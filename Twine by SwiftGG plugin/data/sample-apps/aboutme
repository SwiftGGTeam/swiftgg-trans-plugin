{"About Me": {"zh": "关于我", "tips": ""}, "Display data from a central source in multiple views.": {"zh": "在多个视图中显示来自一个中心源的数据。", "tips": ""}, "Welcome to the About Me app. In this walkthrough, you’ll learn the basics of using SwiftUI to display information across multiple tab views.": {"zh": "欢迎使用 About Me 应用程序。在这个演示中，你将学习使用 SwiftUI 在多个标签视图中显示信息。", "tips": ""}, "Run the preview and tap to select the Home, Story, Favorites, and Fun Facts tabs at the bottom of the screen.": {"zh": "运行预览并选择屏幕底部的 Home, Story, Favorites, 和 Fun Facts 标签栏。", "tips": ""}, "You can change all of the data, or content, in the app to be about any topic of your choice. While you walk through this sample, try swapping out the information and edit colors and modifiers to suit your style.": {"zh": "你可以按照你的偏好更改应用程序中的所有数据或者内容。在演示中，你可以修改信息和颜色以及修饰符来定制你的风格。", "tips": ""}, "Tabbed Interface": {"zh": "标签视图", "tips": ""}, "Explore how to set up a tabbed interface.": {"zh": "探索如何设置标签视图。", "tips": ""}, "Step 1": {"zh": "第一步", "tips": ""}, "This is the ContentView view. It’s the first view that you’ll see when you launch your app.": {"zh": "这是一个 ContentView 视图。它是应用程序的第一个视图。", "tips": ""}, "Step 2": {"zh": "第二步", "tips": ""}, "You create the user interface, or UI, for your app inside the body. The entire contents of your app are in the code below.": {"zh": "你可以在 body 中创建应用程序的用户界面。你的应用程序的所有内容都在 body 中。", "tips": ""}, "Step 3": {"zh": "第三步", "tips": ""}, "TabView is how you create a user interface with tabs. Inside the tab view, you list each of the tab items that you want.": {"zh": "TabView 是你创建的带有标签的展示用户界面的视图。在 tab 视图中，你列出了需要展示的标签项。", "tips": ""}, "Step 4": {"zh": "第四步", "tips": ""}, "To make a tab, create an instance of the view you want to display when someone taps a tab. The first tab view in the list is HomeView, so it’s the first tab you see when the app launches.": {"zh": "要创建一个标签，首先创建一个你想要显示的视图。在列表中的第一个标签视图是 HomeView，因此它是应用程序启动时显示的标签视图。", "tips": ""}, "Step 5": {"zh": "第五步", "tips": ""}, "Try commenting out a tab, using two slashes // at the beginning of each of the highlighted lines of code to see what happens to your UI.": {"zh": "尝试注释掉一个标签，使用两个斜杠 // 放在高亮的代码行的开头来看看你的 UI 会发生什么变化。", "tips": ""}, "Step 6": {"zh": "第六步", "tips": ""}, "Under the view, add the .tabItem modifier, and pass in a Label as the tab display. Without a tabItem, the tab for this view appears empty.": {"zh": "在视图中添加 .tabItem 修饰符，并传递一个 Label 作为标签显示。如果没有 .tabItem 修饰符，则此视图的标签显示为空。", "tips": ""}, "Step 7": {"zh": "第七步", "tips": ""}, "The tabItem modifier only accepts Label, Text, and Image views. Including any other type of view, such as Button, results in an empty tab item.": {"zh": "tabItem 修饰符只接受 Label、Text 和 Image 视图。任何其他类型的视图，例如 Button 都将导致空的标签内容。", "tips": ""}, "Your Data": {"zh": "你的数据", "tips": ""}, "Modify your app data.": {"zh": "修改你的应用数据。", "tips": ""}, "This file is where your app stores all of its data (information). In SwiftUI, it’s best to keep the data separate from the visual components of your app. While learning SwiftUI, you’ll frequently see the concept of having a “source of truth” for your data, which means that you only define a value in one place. You will practice this in a few steps when you begin to change the data.": {"zh": "这个文件是存储你的应用数据的地方。在 SwiftUI 中，最好将数据和应用的可视化组件分开。在学习 SwiftUI 时，你会经常看到将数据有一个 “真实来源” 的概念，这意味着你只在一个地方定义一个值，你将在下面的步骤中分几步练习修改数据。", "tips": ""}, "This structure provides the blueprint for your data. It contains properties that define the name and type of data that the app stores. For instance, your app stores a story property as a String and a colors property as an array of Color values.": {"zh": "这个结构体表示你需要的数据结构。它包含定义应用存储的数据和类型。例如，你的应用存储一个 String 类型的 Story 属性和内部为 Color 类型的名为 colors 的数组。", "tips": ""}, "This value, information, uses the Info structure to store all of the data used in your app. You can refer to this global variable by its name from any file of the project.": {"zh": "information 使用 Info 结构体来存储所有用于应用的数据。你可以在项目的任何文件中引用这个全局变量。", "tips": ""}, "To personalize this project, change the string inside the quotes to your name.": {"zh": "要个性化这个项目，修改在引号内的字符串为你想要的内容。", "tips": ""}, "The value for your name is only created this one time, making it the source of truth. Whenever you want to use your name in a component or view, you refer to this value by its name: information.name.": {"zh": "你定义的名称仅在这里创建一次，因此它是你数据源。当你想在组件或视图中使用你的名称时，你可以引用它的名称： information.name。", "tips": ""}, "Before moving on, try changing the image. The string “Placeholder” refers to the name of an image in your app’s assets. To add a new image, open the sidebar and tap the Add New Item button in the toolbar. Choose Photo, and select an image from your Photos library. Then give your image a descriptive name.": {"zh": "在继续之前，尝试更改图片。字符串 “Placeholder” 代表应用程序的资产中的名字。要添加一个新的图片，打开工具栏并点击 Add New Item 按钮。选择 Photo 并选择你的图片库中的图片。然后为你的图片添加一个描述性的名称。", "tips": ""}, "To use your new image, change “Placeholder” to the name of the new image you just added. Tap the the Home tab in the Preview to see your changes.": {"zh": "要使用你的新图片，更改 “Placeholder” 为你添加的新图片的名称。点击 Preview 中的 Home 按钮来查看你的修改。", "tips": ""}, "Step 8": {"zh": "第八步", "tips": ""}, "Swift Playgrounds adds your photo to the Assets section of the sidebar and highlights the name for you to edit. After you’ve named the image asset, change the string for this property to match its new name.": {"zh": "Swift Playgrounds 将你的图片添加到 Assets 列表中并高亮了你要修改的名称。命名你的图片资产后，更改这个属性的字符串以匹配你的新名称。", "tips": ""}, "Home Tab": {"zh": "Home 标签页", "tips": ""}, "Explore some basic SwiftUI code.": {"zh": "探索一些基本的 SwiftUI 代码。", "tips": ""}, "The HomeView is the first tab of your app, so it’s the first thing you’ll see when the app launches. You’ve seen this in action already, when you first opened the project.": {"zh": "HomeView 是应用程序的第一个标签，因此它是应用程序启动时显示的标签。当你第一次打开项目时，你已经看到了这一点。", "tips": ""}, "A VStack organizes its contents vertically from top to bottom on the screen.": {"zh": "VStack 在屏幕上从上到下排列内容。", "tips": ""}, "A Text view displays the string inside the quotation marks.": {"zh": "文本视图将会显示引号内的字符串。", "tips": ""}, "Try changing the string before moving on. Do you see your new text in the preview?": {"zh": "在继续之前尝试更改字符串。在预览中你看到了你设置的新文本了吗？", "tips": ""}, "You can use modifiers to change how the app displays the text. Here are two good ones to know: You can use .font to specify different styles of text, and .fontWeight to change the weight of the font.": {"zh": "你可以使用修饰符来改变应用显示的文本。下面是两个值得了解的方法: 可以使用 .font 来指定不同的样式的文本，以及 .fontWeight 来改变文本的粗细。", "tips": ""}, "Try changing .largeTitle and .bold to different values to see how they affect the view. To do this, delete the existing value — including the period (.) — then type a period and wait to see the options suggested in the autocompletion menu.": {"zh": "尝试更改 .largeTitle 和 .bold 来不同值来看如何影响视图。要做此事，需要删除现有值 — 包括点(.) — 然后输入点(.)，看看自动补全菜单中建议的选项。", "tips": ""}, "The .padding modifier adds extra space between a view and the other views around it.": {"zh": ".padding 修饰符为视图与周围的视图添加额外的空间。", "tips": ""}, "Here, you’re using the default SwiftUI padding. You can also specify a custom value, which you can spot below.": {"zh": "在这里，你使用的是默认 SwiftUI 间距。你也可以指定一个自定义值，你可以在下面找到它。", "tips": ""}, "Step 9": {"zh": "第九步", "tips": ""}, "This Image view displays the image that you changed in the Data file.": {"zh": "这个 Image 视图显示你修改的 Data 文件中的图片。", "tips": ""}, "Step 10": {"zh": "第十步", "tips": ""}, "This Image view has several common modifiers. The first one, .resizable, is very important to remember.": {"zh": "这个 Image 视图有多种常用修饰符。第一个 .resizable 非常重要需要记住。", "tips": ""}, "Step 11": {"zh": "第十一步", "tips": ""}, "It allows the image to adapt to the available space on the screen; otherwise the image appears at its full size, which may be very large.": {"zh": "它允许图片适应可用空间，否则图片会显示为完整尺寸，这可能会很大。", "tips": ""}, "Step 12": {"zh": "第十二步", "tips": ""}, "The .aspectRatio modifier requires the image to maintain its aspect ratio. By specifying .fit, you’re asking SwiftUI to resize the image so it fits within the available space.": {"zh": ".aspectRatio 修饰符需要图片保持其比例。通过指定 .fit，来要求 SwiftUI 将图片尺寸适应可用空间。", "tips": ""}, "Step 13": {"zh": "第十三步", "tips": ""}, "To see the effect of this modifier, try changing .fit to .fill, or comment out the line entirely.": {"zh": "要查看这个修饰符的效果，尝试更改 .fit 为 .fill 或完全注释整行。", "tips": ""}, "Step 14": {"zh": "第十四步", "tips": ""}, "You can give any view rounded corners with the .cornerRadius modifier. Try changing the value to make the corners larger or smaller.": {"zh": "你可以使用 .cornerRadius 修饰符给任何视图添加圆角。尝试更改值来改变圆角大小。", "tips": ""}, "Story Tab": {"zh": "Story 标签页", "tips": ""}, "Learn how to use a scroll view to create a scrolling narrative.": {"zh": "了解如何使用一个滚动视图来创建滚动故事。", "tips": ""}, "This is the StoryView, where you can display a story about anything you want.": {"zh": "这是一个 StoryView，你可以显示任何想要的故事。", "tips": ""}, "To let your story scroll if the text gets too long, wrap your Text view in a ScrollView.": {"zh": "想要在文本很长的情况下滚动，可以使用 ScrollView 来包裹文本视图。", "tips": ""}, "This text view extracts information that you have in the Data file to build your story.": {"zh": "这个文本视图从 Data 文件中提取信息来构建故事。", "tips": ""}, "To test the scroll view, open Data and edit the story text between the red quotation marks. Try writing a long story of your own, then come back to this preview and test how your page scrolls.": {"zh": "要测试滚动视图，打开 Data 文件并编辑红引号内的故事文本。尝试写一个长长的故事，然后返回预览并测试你的页面滚动。", "tips": ""}, "Favorites Tab": {"zh": "Favorites 标签页", "tips": ""}, "Build your UI using various stacks and loops.": {"zh": "使用各种堆栈和循环构建你的 UI。", "tips": ""}, "The FavoritesView shows your favorite hobbies, foods, and colors.": {"zh": "FavoritesView 展示你喜欢的兴趣、食物和颜色。", "tips": ""}, "Each of the three sections are organized the same way. You have a title at the top, and an HStack below it that displays the images, text, or colors horizontally.": {"zh": "这三个部分是同样组织方式。在顶部有一个标题，下面是一个显示图片、文字或颜色的 HStack。", "tips": ""}, "The ForEach uses the global information data and iterates through the hobbies array. Because ForEach needs to know how to tell the items apart from each other, you pass \\.self as the argument to id.": {"zh": "ForEach 使用全局 information 数据并且迭代遍历 hobbies 数组。因为 ForEach 需要知道如何区分每一个项目，所以你需要传递 \\.self 作为参数当做 id。", "tips": ""}, "In the hobbies example, you create an image inside the HStack using modifiers to adjust its size. For example, .resizable allows you to resize the images.": {"zh": "在 hobbies 示例中，你使用修饰符来调整图片的大小。例如：.resizable 让图片自适应。", "tips": ""}, "Try replacing the .frame modifier with .scaledToFit or .scaledToFill, or removing the .resizable modifier. Did anything happen to your images?": {"zh": "尝试替换 .frame 修饰符为 .scaledToFit 或 .scaledToFill，或者删除 .resizable 修饰符。观察图片是否发生了什么变化？", "tips": ""}, "Fun Facts Tab": {"zh": "Fun Facts 标签页", "tips": ""}, "Make your app interactive by adding a button that displays a random fact about you.": {"zh": "通过添加一个显示随机事实的按钮来让你的应用有交互性。", "tips": ""}, "In the FunFactsView you’ll use a Button view to change a fun fact string whenever someone taps it.": {"zh": "在 FunFactsView 中，你将使用 Button 视图，当用户点击时来改变一个 fun fact 字符串。", "tips": ""}, "The variable funFact stores the fun fact displayed by this view. Because funFact uses @State, the fun fact Text view automatically updates with a new value whenever its value changes.": {"zh": "变量 funFact 用于显示这个视图。因为 funFact 使用 @State，只要 funFact 的值改变，文本视图就会自动更新。", "tips": ""}, "When you tap this button, the code assigns funFact a new value, which then changes the string in the Text view above.": {"zh": "当你点击这个按钮时，代码将 funFact 的值改变，然后将文本视图上的字符串更改。", "tips": ""}, "To edit the look of the button, try adding some modifiers. Add space around the button using .padding(), a background color using .background(Color.cyan), or rounded corners using .cornerRadius(15). Add these below the brace of the button’s closure.": {"zh": "要编辑按钮的外观，尝试添加一些修饰符。在按钮的闭包中添加内边距，使用 .padding()，使用 .background(Color.cyan) 添加背景颜色或使用 .cornerRadius(15) 来添加圆角。", "tips": ""}, "This Text view shows the fun fact. It uses the variable funFact as its argument so it can show a new fun fact whenever the value changes.": {"zh": "这个 Text 视图显示的是 fun fact。它使用 funFact 作为其参数，因此每当值改变时，它就会显示一个新的 fun fact。", "tips": ""}, "Choose Your Own Story": {"zh": "选择你自己的故事", "tips": ""}, "Provide dynamic navigation between views.": {"zh": "提供视图间的动态导航。", "tips": ""}}
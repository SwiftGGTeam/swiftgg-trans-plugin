{"Bubble Level": {"zh": "", "tips": ""}, "Access and display device sensor data by subscribing to notifications.": {"zh": "通过订阅通知来访问和显示设备传感器数据。", "tips": ""}, "Welcome to Bubble Level.": {"zh": "欢迎来到“气泡水平仪”这堂课。", "tips": ""}, "A bubble level helps you determine whether something is level or tilted.": {"zh": "气泡水平仪可帮助您确定一个物体是水平还是倾斜。", "tips": ""}, "This app displays the orientation of your device as numbers and as a graphical version of a bubble level. Try tilting your device and watch the bubble move. Try to make your device level by centering the bubble in the crosshairs. Or place it on a surface like your bedroom floor to determine whether the floor is level.": {"zh": "这个 App 将会分别以数字和可视化的气泡水平仪来显示你设备的方向。你可以尝试倾斜你的设备并观察气泡移动，通过将气泡置于十字准线中心来使设备保持水平。或者将其放在卧室地板等表面上，以确定地板是否水平。", "tips": ""}, "Motion Detector": {"zh": "", "tips": ""}, "You can use the MotionDetector class to observe the motion of your device.": {"zh": "你可以使用这个 MotionDetector 类来观察你的设备的运动。", "tips": ""}, "Step 1": {"zh": "", "tips": ""}, "Your device has sensors such as accelerometers and gyroscopes that it uses to sense motion and orientation. The Core Motion framework gives you access to data from these and other sensors.": {"zh": "你的设备有加速计和陀螺仪等传感器，它们用于感知运动和方向。Core Motion 框架可以让你访问这些传感器和其他传感器的数据。", "tips": ""}, "Step 2": {"zh": "", "tips": ""}, "You use a CMMotionManager object to get motion data from sensors, such as the accelerometer. It gathers information from the sensors and translates their data into values that you can understand.": {"zh": "你将会使用 CMMotionManager 对象来获取传感器的运动数据，例如加速计。它会从传感器中收集信息，并将它们的数据转换为你可以理解的值。", "tips": ""}, "Step 3": {"zh": "", "tips": ""}, "The timer property stores a Timer instance. A timer waits for a period of time that you specify before running some code. The MotionDetector uses the timer to update its pitch, roll, and zAcceleration values at regular intervals, defined by the updateInterval property.": {"zh": "timer 这个属性存储了一个 Timer 实例。Timer 会在你指定的时间段之后运行一些代码。MotionDetector 使用 timer 来在 updateInterval 属性定义的时间间隔内更新它的 pitch、roll 和 zAcceleration 值。", "tips": ""}, "Step 4": {"zh": "", "tips": ""}, "You can choose an update interval that makes sense for your app. For example, you’ll want a short update interval for the bubble level in this project because the interface presents real-time data as the device moves.": {"zh": "你可以选择一个对你的应用程序有意义的更新间隔。例如，你将希望这个项目中的气泡水平仪有一个短的更新间隔，因为界面会随着设备的移动而实时显示数据。", "tips": ""}, "Step 5": {"zh": "", "tips": ""}, "These three properties store data for the tilt of your device in two dimensions (roll and pitch), as well as its vertical acceleration (zAcceleration).": {"zh": "这三个属性存储了你的设备在两个维度上的倾斜数据（roll 和 pitch），以及它的垂直加速度（zAcceleration）。", "tips": ""}, "Step 6": {"zh": "", "tips": ""}, "These properties have a @Published property wrapper, which means that any SwiftUI view that depends on their values updates when they change. You make a view dependent on a published property by referring to it in the view’s code. The BubbleLevel, LevelView, and OrientationDataView views use these properties, which enables them to update when the MotionDetector detects a change to the roll, pitch, or zAcceleration values.": {"zh": "这些属性有一个 @Published 属性包装器，这意味着任何依赖于它们值的 SwiftUI 视图会在它们改变时更新。你可以通过在视图的代码中引用它来使视图依赖于已发布的属性。BubbleLevel、LevelView 和 OrientationDataView 视图使用这些属性，这使它们能够在 MotionDetector 检测到 roll、pitch 或 zAcceleration 值的变化时更新。", "tips": ""}, "Step 7": {"zh": "", "tips": ""}, "This property stores code that runs when the MotionDetector updates its motion data. If you want to execute custom actions every time the motion data changes, you can put your own code into onUpdate in your instance of MotionDetector.": {"zh": "这个属性存储了当 MotionDetector 更新其运动数据时需要运行的代码。如果你想在每次运动数据发生变化时执行自定义操作，你可以将自己的代码放到 MotionDetector 的 onUpdate 中。", "tips": ""}, "Step 8": {"zh": "", "tips": ""}, "This method starts updating the motion detector.": {"zh": "这个方法会开始用传感器的数据更新我们的运动检测器的数据。", "tips": ""}, "Step 9": {"zh": "", "tips": ""}, "Always use isDeviceMotionAvailable to verify that motion data is available before you try to access it.": {"zh": "在你想要访问运动数据之前，记得始终使用 isDeviceMotionAvailable 来验证运动数据是否可用。", "tips": ""}, "Step 10": {"zh": "", "tips": ""}, "This method tells the CMMotionManager to start updating motion data.": {"zh": "这个方法会告诉 CMMotionManager 开始更新运动数据。", "tips": ""}, "Step 11": {"zh": "", "tips": ""}, "This code creates a new timer and schedules it to run. The updateInterval property tells the timer how long to wait between updates, and repeats is set to true so that the timer runs forever until you stop it. (If you pass false to repeats, the timer only runs once.)": {"zh": "这段代码创建了一个新的计时器并设定了其运作方式。updateInterval 属性会告诉计时器在每次数据更新之间需要等待多长时间，将 repeats 设置为 true 后，计时器就会一直运行，直到你停止它。（如果你传递 false 给 repeats，计时器只会运行一次。）", "tips": ""}, "Step 12": {"zh": "", "tips": ""}, "The block of code at the end of the line that reads { _ in is the start of a closure containing the code that the timer runs. The closure calls updateMotionData().": {"zh": "第一行最末端的 { _ in 是一个闭包的开始，包含了定时器运行的代码。这个闭包会调用 updateMotionData() 方法。", "tips": ""}, "Step 13": {"zh": "", "tips": ""}, "This method does the core work of the motion detector. It’s responsible for updating all the published properties with current data from the sensors, as well as calling the code in onUpdate.": {"zh": "这个方法是运动检测器的核心工作。它负责使用传感器的当前数据更新所有已发布的属性，以及调用 onUpdate", "tips": ""}, "Step 14": {"zh": "", "tips": ""}, "The deviceMotion data may not be there in certain conditions. The way you can tell if the data exists is to try to assign it to a variable or constant using if let. If the motion data exists, it’s assigned to data and the code inside the braces runs. Otherwise, it skips the entire if statement.": {"zh": "在一些情况下，deviceMotion 数据可能不存在。你可以通过 if let 来判断数据是否存在。如果 motion 数据存在，它会被赋值给 data 并且大括号内的代码会被执行。否则，整个 if 语句会被跳过。", "tips": ""}, "Step 15": {"zh": "", "tips": ""}, "A CMDeviceMotion instance represents device motion, stored here in data. It has quite a few properties describing the input from the motion sensors.": {"zh": "CMDeviceMotion 实例代表设备的运动，存储在 data 中。它有很多属性来描述传感器的输入。", "tips": ""}, "Step 16": {"zh": "", "tips": ""}, "Use the attitude property to get the device’s tilt in three directions. You may be familiar with X, Y, and Z axes in 3D space. Pitch, roll, and yaw are numbers that describe rotation along those axes.": {"zh": "使用 attitude 属性来获取设备在三个方向上的倾斜。你可能熟悉 3D 空间中的 X、Y 和 Z。Pitch（俯仰）、roll（翻滚）和 yaw（偏航）是描述沿这些轴旋转程度的数字。", "tips": ""}, "Step 17": {"zh": "", "tips": ""}, "Use the userAcceleration property to get the device’s acceleration after accounting for the downward pull of gravity. If it’s at rest, this number is 0. If it’s accelerating upward, the number is negative, and if it’s accelerating downward, the number is positive.": {"zh": "使用 userAcceleration 属性来获取设备在考虑到重力向下拉的情况下的加速度。如果它处于静止状态，这个数值为 0。如果它向上加速，这个数值为负数，如果它向下加速，这个数值为正数。", "tips": ""}, "Step 18": {"zh": "", "tips": ""}, "You run the code in onUpdate just as you’d call any function, with a set of parentheses following its name.": {"zh": "你可以像调用任何函数一样调用 onUpdate 中的代码，只需要在函数名后面加上一对括号。", "tips": ""}, "Step 19": {"zh": "", "tips": ""}, "This method stops updating the motion data. It does two important things:": {"zh": "这个方法会停止更新运动数据。它做了两件重要的事情：", "tips": ""}, "Step 20": {"zh": "", "tips": ""}, "First, it tells the CMMotionManager to stop updating its values by calling stopDeviceMotionUpdates(), then it stops the timer by calling invalidate().": {"zh": "首先，它会通过调用 stopDeviceMotionUpdates() 来告诉 CMMotionManager 停止更新它的值，然后通过调用 invalidate() 来停止定时器。", "tips": ""}, "Step 21": {"zh": "", "tips": ""}, "This deinitializer runs when a MotionDetector instance is about to go away. It’s important to clean up here; otherwise the timer would continue to run even after the motion detector is gone.": {"zh": "这个析构器会在 MotionDetector 实例即将消失时运行。在这里做一些善后工作是很重要的，否则计时器会在 motion detector 消失后继续运行。", "tips": ""}, "Orientation Data View": {"zh": "朝向数据视图", "tips": ""}, "Learn to display motion data as string values in the view.": {"zh": "学习将运动数据显示为视图中的字符串值。", "tips": ""}, "The OrientationDataView displays the roll and pitch of your iPad as numbers. Roll is the degree of left and right tilt, and pitch is the degree of forward and backward tilt.": {"zh": "OrientationDataView 会将你的 iPad 的翻滚角和俯仰角以数字的形式显示出来。翻滚角是左右倾斜的角度，俯仰角是前后倾斜的角度。", "tips": ""}, "This property holds a MotionDetector instance. The motion detector senses changes in your device’s motion and provides that data for you to use in your code.": {"zh": "这个属性会持有一个 MotionDetector 实例。运动检测器会感知你的设备运动的变化，并为你提供这些数据，以便你在代码中使用。", "tips": ""}, "Because detector is an observable object, any changes made to its published values cause SwiftUI to automatically update any views using those values. In this case, changes from the device’s sensors update the Text view with the latest values for the pitch and roll.": {"zh": "因为 detector 是一个可观察对象，所以对它的 published 值所做的任何更改都会导致 SwiftUI 自动更新使用这些值的任何视图。在这种情况下，来自设备传感器的更改会使用最新的 roll 和 pitch 的值更新 Text 视图上的字符。", "tips": ""}, "These two computed properties provide the strings used in the view. They take the roll or pitch value from the motion detector and format that number as a string with a fixed number of digits. The describeAsFixedLengthString() method is a custom method on the Double type. You can learn how it works in DoubleExtension.swift.": {"zh": "这两个计算属性提供了视图中使用的字符串。它们从 motion detector 中获取 roll 或 pitch 的值，并将该数字格式化为具有固定位数的字符串。describeAsFixedLengthString() 方法是 Double 类型的自定义方法。你可以在 DoubleExtension.swift 中了解它的工作原理。", "tips": ""}, "Here is the value for the roll of the device, presented as text.": {"zh": "这里是设备的翻滚角的值，以文本形式呈现。", "tips": ""}, "Because this view uses a published value from detector, SwiftUI updates it any time the motion detector’s roll value changes.": {"zh": "因为这个视图使用了 detector 的一个 published value，所以 SwiftUI 会在 detecotr 的 roll 值发生变化时更新它。", "tips": ""}, "The .font modifier formats this Text view with a monospaced font. By default, a Text view uses a system font with proportional width, but that causes the text view to change its width as the numbers change.": {"zh": ".font 修饰符使用等宽字体格式化这个 Text 视图。默认情况下，Text 视图使用系统字体，它的宽度是比例宽度，但这会导致 Text 视图在数字变化时改变它的宽度。", "tips": ""}, "With a monospaced font, each character has the same width. (For example, the strings 1.01 and 3.14 have different widths with a proportional font like Helvetica or Times, but 1.01 and 3.14 have the same width with a monospaced font like Courier or Menlo.)": {"zh": "在等宽字体下，每个字符的宽度都是相同的。（例如，1.01 和 3.14 这两个字符串在 Helvetica 或 Times 等比例字体下的宽度是不同的，但在 Courier 或 Menlo 等等宽字体下，1.01 和 3.14 的宽度是相同的。）", "tips": ""}, "Bubble Level View": {"zh": "泡泡水平仪.pre视图", "tips": ""}, "Learn to display the tilt of your device using a bubble level UI.": {"zh": "学习何使用 气泡水平仪的 UI 来显示设备的倾斜。", "tips": ""}, "This view displays the tilt of your device by drawing a circle within a larger circular boundary with crosshairs to indicate its centerpoint. When your device is level, the bubble rests at the center of the frame. Try tilting your device to see how the bubble moves.": {"zh": "这个在自定义视图通过在一个较大的圆形边界内绘制一个圆圈，并用十字线来指示它的中心点，来显示你的设备的倾斜。当你的设备水平时，气泡会停留在框架的中心。试着倾斜你的设备，看看气泡是如何移动的。", "tips": ""}, "This property holds a MotionDetector instance, which senses changes in your device’s motion. You can access this instance in your code to update the user interface as the motion data changes.": {"zh": "这个属性持有一个 MotionDetector 实例，它可以感知你的设备运动的变化。你可以在你的代码中访问这个实例，以便在运动数据发生变化时更新用户界面。", "tips": ""}, "Because detector is an observable object, any changes to its published values allows SwiftUI to automatically update any views using those values. In this case, you’ll update the bubble’s position.": {"zh": "因为 detector 是一个可观察对象，所以任何对它的 published 值的更改都会使 SwiftUI 自动更新使用这些值的任何视图。在这种情况下，你将更新气泡的位置。", "tips": ""}, "This property represents the range of values the motion detector reports as you tilt the device (assuming you don’t turn it upside down). Negative values indicate a tilt to the left, and positive values indicate a tilt to the right. (You could assign the value 3.14 to this property, but Double.pi is convenient shorthand for the mathematical constant π, and it’s a closer approximation because it includes many digits of precision.)": {"zh": "这个属性表示运动检测器在你倾斜设备时报告的值的范围（假设你没有把它倒过来）。负值表示向左倾斜，正值表示向右倾斜。（你可以给这个属性赋值 3.14，但 Double.pi 是数学常量 π 的方便简写，它是一个更接近的近似值，因为它的精度更高。）", "tips": ""}, "This is the size of the level display, both width and height. You can change this value to make the display larger or smaller.": {"zh": "这就是水平仪显示的大小，宽度和高度。你可以改变这个值来使其显示得更大或更小。", "tips": ""}, "It’s useful to define and use constants like these for important values in your code, rather than using the values themselves. When you read the code, you’ll have a better idea of what it does than if you see a lot of numbers with no context.": {"zh": "比起来直接使用这些值，定义和使用这样的常量来表示代码中的重要值更有用。当你阅读代码时，看到这样的常量通常比看到一堆没有上下文的数字更容易理解它的作用。", "tips": ""}, "This property calculates the horizontal placement of the bubble using three steps.": {"zh": "这个属性使用三个步骤来计算气泡的水平位置。", "tips": ""}, "First, adjust the roll value from the detector so that it has a minimum of 0 and goes up to the value of π, and store the adjusted value in zeroBasedRoll. This helps with the next part of the calculation, which needs values greater than 0.": {"zh": "首先，调整检测器的 roll 值，使其最小值为 0，最大值为 π，并将调整后的值存储在 zeroBasedRoll 中。这有助于下一部分的计算，该计算需要大于 0 的值。", "tips": ""}, "Then, use this adjusted value to calculate the roll as a fraction of the entire range of roll values, so that full tilt left is 0.0, flat is 0.5, and full tilt right is 1.0.": {"zh": "接下来，使用这个调整后的值来计算 roll 作为整个 roll 值范围的一个分数，这样完全向左倾斜就是 0.0，水平就是 0.5，完全向右倾斜就是 1.0。", "tips": ""}, "Multiplying the fraction with the size of the level gives you the X position of the bubble.": {"zh": "将这个分数乘以水平仪的大小，就得到了气泡的 X 位置。", "tips": ""}, "Because all of these calculations are hidden in a property, your view’s body code remains simple and readable.": {"zh": "因为所有这些计算都隐藏在一个属性中，所以你的视图的 body 代码保持简单和可读。", "tips": ""}, "While you can write all of the code here in a longer mathematical expression, decomposing the code makes it easier to understand. (Can you imagine having to explain this code if it were written in one line?!)": {"zh": "虽然你可以在这里写所有的代码，但是把代码分解开来会更容易理解。（你能想象如果这段代码写在一行里，你要怎么解释这段代码吗？！）", "tips": ""}, "This property calculates the vertical position of the bubble in the same way that bubbleXPosition works.": {"zh": "这个属性以与 bubbleXPosition 相同的方式计算气泡的垂直位置。", "tips": ""}, "This property returns a vertical line that you use to draw the bubble level display. Because there are multiple identical vertical lines, you can use this property whenever you need one rather than repeating the more complex code inside it.": {"zh": "这个属性返回一个垂直线，你可以用它来绘制气泡水平仪的显示。因为有多个相同的垂直线，所以你可以在需要一个垂直线时使用这个属性，而不是重复其中的更复杂的代码。", "tips": ""}, "Here’s a circle with a gray foreground color that provides a visual boundary for the display.": {"zh": "这里是一个圆，它有一个灰色的前景色，为显示提供了一个视觉边界。", "tips": ""}, "You can use a .frame modifier to give the circle a fixed width and height, which is important to draw the other components correctly.": {"zh": "你可以使用 .frame 修饰符给圆一个固定的宽度和高度，这对于正确绘制其他组件很重要。", "tips": ""}, "The .overlay modifier adds a view on top of the circle that occupies the same area.": {"zh": ".overlay 修饰符在圆上面添加一个视图，该视图占用相同的区域。", "tips": ""}, "The overlay is useful here because it positions the level’s components relative to the circle they’re drawn in.": {"zh": "overlay 在这里很有用，因为它将水平仪的组件相对于它们绘制的圆进行定位。", "tips": ""}, "A ZStack view allows you to draw the components of the level over each other.": {"zh": "一个 ZStack .pre视图允许你将水平仪的组件绘制在彼此上面。", "tips": ""}, "The first circle represents the bubble. Notice that the bubbleXPosition and bubbleYPosition values position the bubble inside the overlay view.": {"zh": "第一个代表气 泡。注意，bubbleXPosition 和 bubbleYPosition 值将气泡定位在覆盖视图内。", "tips": ""}, "Because these properties use published values from MotionDetector, SwiftUI updates the bubble view’s position each time they change.": {"zh": "因为这在自定义些属性使用了 MotionDetector 的 published 值，所以 SwiftUI 在每次它们改变时都会更新气泡视图的位置。", "tips": ""}, "Step 22": {"zh": "", "tips": ""}, "In the center are a smaller circle and a crosshair made of two lines: one horizontal and one vertical.": {"zh": "在中心是一个较小的圆和一个由两条线组成的十字线：一条水平线和一条垂直线。", "tips": ""}, "Step 23": {"zh": "", "tips": ""}, "There are four other lines on the edge of the frame of the bubble level display. You can use the .position modifier to move them relative to their default position at the center of the overlay view.": {"zh": "这里还有其他四条线在气泡水平仪显示的边框上。你可以使用 .position 修饰符将它们相对于它们在覆盖视图中心的默认位置移动。", "tips": ""}, "Double Extension": {"zh": "给 Double 类型增加扩展", "tips": ""}, "Investigate using an extension on Double to format them in an easy to read way.": {"zh": "研究使用 Double 的扩展以一种易于阅读的方式格式化它们。", "tips": ""}, "An extension is a way to make custom behavior for existing types. Declaring extension Double means you’re adding new capabilities to the Double type. Any time you use a Double value in your code, you can access anything defined in this extension.": {"zh": "扩展是为现有类型添加自定义行为的一种方式。声明扩展 Double 意味着你正在为 Double 类型添加新的功能。任何时候你在代码中使用 Double 值，你都可以访问在这个扩展中定义的任何东西。", "tips": ""}, "This method returns a string describing the value of a Double using a fixed number of digits. You can pass in the number of integer digits and fraction digits you want, or leave those arguments out for the default values of 2.": {"zh": "这个方法返回一个字符串，描述一个 Double 的值，使用固定数量的数字。你可以传入你想要的整数位数和小数位数，或者忽略这些参数，使用默认值 2。", "tips": ""}, "The formatted() method operates on a number of basic types such as Date, Int, and Double, which are all commonly represented as strings in an app. Because there are so many ways to format these strings, the formatted() method gives you ways to customize how they’re represented. For example, does a number represent a percentage, or a simple value, or maybe a price?": {"zh": "formatted() 方法对一些基本类型进行操作，比如 Date、Int 和 Double，它们在应用中都通常表示为字符串。因为有很多方法可以格式化这些字符串，所以 formatted() 方法提供了一些方法来自定义它们的表示方式。例如，一个数字代表一个百分比，还是一个简单的值，或者一个价格？", "tips": ""}, "The argument to formatted() is a format style.": {"zh": "formatted() 的参数是一个 format style。", "tips": ""}, "The .number style gives you a string describing this Double value as a simple number, as opposed to a percentage or a price.": {"zh": ".number style 给你一个字符串，描述这个 Double 值作为一个简单的数字，而不是一个百分比或一个价格。", "tips": ""}, "The .number style has modifiers much like those for SwiftUI views.": {"zh": ".number style 有类似于 SwiftUI 视图的修饰符。", "tips": ""}, "The .sign modifier lets you format the number so that it’s always preceded by a sign, even when the number is positive.": {"zh": ".sign 修饰符让你可以格式化数字，这样即使数字是正数，它也总是以一个符号开头。", "tips": ""}, "The .precision modifier lets you specify exactly how many digits to use.": {"zh": ".precision 修饰符让你可以指定要使用多少位数字。", "tips": ""}, "Seismometer": {"zh": "地震仪", "tips": ""}, "Present dynamic data in custom views.": {"zh": "在自定义视图中呈现动态数据。", "tips": ""}}
{"Previewing the Camera Output": {"zh": "预览摄像头输出", "tips": ""}, "Preview the output from the camera.": {"zh": "预览摄像头的输出。", "tips": ""}, "Your camera’s video output sends a continuous stream of individual images (video frames). You display these in a viewfinder so you can see exactly what the camera is looking at before composing your shot and taking a photo.": {"zh": "摄像头的视频输出会发送连续的单独图像流（视频帧）。你可以在取景器中显示这些图像，以便在构图和拍照前能准确地看到摄像头正在显示的内容。", "tips": ""}, "Discover more about how this works. 🎞": {"zh": "了解更多关于这是如何工作的。", "tips": ""}, "Section 1": {"zh": "第一节", "tips": ""}, "Using the Camera": {"zh": "使用摄像头", "tips": ""}, "Learn about the camera in your data model.": {"zh": "了解在你数据模型中的相机。", "tips": ""}, "Step 1": {"zh": "第一步", "tips": ""}, "Your data model has a camera property that represents one of the physical cameras — or capture devices — available to your device.": {"zh": "你的数据模型中有一个 camera 属性，其代表你设备中可用的一个物理摄像头或捕捉设备。", "tips": ""}, "Note": {"zh": "注释", "tips": ""}, "Your device may have access to several capture devices — for example, the front and back cameras on iPad — and you can switch between these using the camera’s switchCaptureDevice() method. Learn more about capture devices in Cameras and Media Capture.": {"zh": "你的设备可能可以访问多个捕捉设备（例如，iPad 的前后摄像头），并且你还可以通过它的 switchCaptureDevice() 方法在这些设备之间进行切换。 在 “Cameras and Media Capture” 中了解更多关于捕捉设备的信息。", "tips": ""}, "Tip": {"zh": "提示", "tips": ""}, "To start using the camera, you call its start() method: await model.camera.start()": {"zh": "为了开始使用摄像头，你需要这样调用它的 start() 方法：await model.camera.start()", "tips": ""}, "Section 2": {"zh": "第二节", "tips": ""}, "Exploring the Preview Stream": {"zh": "探索预览流", "tips": ""}, "Learn about the stream of preview images from your camera.": {"zh": "了解来自于你摄像头的图像预览流。", "tips": ""}, "After calling the camera’s start() method, its video output produces a stream of low-resolution preview images (video frames), at rates of up to 60 frames a second.": {"zh": "在调用 Camera 的 start() 方法后，它的视频输出会以每秒最多60帧的速度产生一个低分辨率的图像预览流（视频帧）。", "tips": ""}, "Step 2": {"zh": "第二步", "tips": ""}, "You receive these preview images through the camera’s previewStream property, as an asynchronous stream of CIImage (Core Image) objects.": {"zh": "你通过 Camera 的 previewStream 属性接收这些预览图像，previewStream 的类型是一个包含 CIImage 对象的异步流。", "tips": ""}, "Section 3": {"zh": "第三节", "tips": ""}, "Processing the Preview Stream": {"zh": "处理预览流", "tips": ""}, "Learn how to process the preview stream so that it’s ready to display in the viewfinder.": {"zh": "学习如何处理预览流，使其可以在取景器中显示。", "tips": ""}, "Your data model has a dedicated task to handle the stream of preview images from the camera, using its handleCameraPreviews function.": {"zh": "你的数据模型有一个专门的 Task 来处理从摄像头过来的图像预览流，这个 Task 则直接调用 handleCameraPreviews 函数。", "tips": ""}, "You can learn more about Tasks in the Swift standard library.": {"zh": "你可以在 Swift 标准库中了解更多关于 Task 的信息。", "tips": ""}, "In handleCameraPreviews, turn the preview stream of CIImage objects from the camera into a stream of Image views, ready for display.": {"zh": "在 handleCameraPreviews 中，将 camera 产生的类型为 CIImage 对象的预览流转化为一系列的 Image 视图，让其准备好进行显示。", "tips": ""}, "An AsyncStream is a stream of values that are produced at time intervals. The values form a sequence, but with its values arriving asynchronously — an AsyncSequence. You can do many of the same things you can do with any other sequence of values, such as with an array.": {"zh": "AsyncStream 是一个每隔一段时间就会产生值的流。这些值会形成一个类型为 AsyncSequence 的序列，其值是异步到达的。你可以对它做许多与其他值序列（例如数组）相同的操作。", "tips": ""}, "Step 3": {"zh": "第三步", "tips": ""}, "In this case you use the stream’s map(_:) function to convert each element — $0 — into an Image instance using an image property extension of CIImage. This transforms the stream of CIImage instances into a stream of Image instances.": {"zh": "在这个例子中，你使用 stream 的 map(_:) 函数将每个元素（也就是 $0），通过 CIImage 的 image 属性扩展转换为 Image 实例。这是将 CIImage 实例的流转换为一个 Image 实例的流。", "tips": ""}, "Step 4": {"zh": "第四步", "tips": ""}, "Your for-await loop waits for each image in your transformed imageStream before doing something with it.": {"zh": "在对得到的图像做点什么之前，你的 for-await 循环会在那里等待转换后的 imageStream 中产生每一个图像。", "tips": ""}, "Learn more about working with asynchronous sequences in the Swift Programming Language Guide.": {"zh": "你可以在 “Swift Programming Language Guide” 中了解更多关于处理异步序列的信息。", "tips": ""}, "Step 5": {"zh": "第五步", "tips": ""}, "You use the image from the preview stream to update your data model’s viewfinderImage property. SwiftUI makes sure that any views using this property get updated when the viewfinderImage value changes.": {"zh": "你使用从预览流中得到的图像来更新你数据层的 viewfinderImage 属性。当 viewfinderImage 值改变时，SwiftUI 确保任何使用此属性的视图都得到更新。", "tips": ""}, "Section 4": {"zh": "第四节", "tips": ""}, "Viewing the Preview Stream": {"zh": "查看预览流", "tips": ""}, "See how you can connect your viewfinder view to the processed preview stream.": {"zh": "了解如何将你的取景器视图与处理后的预览流连接起来。", "tips": ""}, "Your CameraView has a ViewfinderView that it uses to display live video from the camera.": {"zh": "你的 CameraView 有一个 ViewfinderView，其用于显示摄像头的实时视频。", "tips": ""}, "By binding the the model’s viewfinderImage property to your ViewfinderView, you ensure that the viewfinder updates whenever the view receives a new preview image. Because the preview image updates many times per second, your eyes see it as live video in the viewfinder.": {"zh": "通过将 model 的 viewfinderImage 属性绑定到你的 ViewfinderView 上，确保每当视图接收到新的预览图像时，取景器都会更新。 由于预览图像每秒会更新多次，所以你的眼睛会认为在取景器中看到的是实时视频。", "tips": ""}}
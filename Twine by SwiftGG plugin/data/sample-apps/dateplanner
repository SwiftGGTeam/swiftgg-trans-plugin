{"Date Planner": {"zh": "日期规划", "tips": ""}, "Present hierarchical information in a list.": {"zh": "在列表中呈现层次化信息。", "tips": ""}, "Welcome to the Date Planner app. Use this app to organize and plan a series of events, organized by date.": {"zh": "欢迎使用 Date Planner 应用程序。使用该应用程序来组织和计划一系列按日期排列的活动。", "tips": ""}, "This walkthrough teaches you how to use lists and an observable data model to create dynamic lists of events and tasks. Time to jump in.": {"zh": "本次讲解教你如何使用列表和可观察数据模型来创建事件和任务的动态列表。让我们开始吧。", "tips": ""}, "App Configuration": {"zh": "应用配置", "tips": ""}, "Learn how the app shares data with its views by creating a single data object and making it available to the entire view hierachy.": {"zh": "了解应用程序如何通过创建一个单一的数据对象，并且让整个视图层次结构可以共享数据。", "tips": ""}, "Step 1": {"zh": "第一步", "tips": ""}, "To navigate between different views in your app, create a NavigationView as the top-level view in your view hierarchy, inserting the app’s home view. For this app, EventList is that home view and the first view the app displays when it launches.": {"zh": "要在你的应用程序中导航到不同视图，创建一个 NavigationView，作为它们的顶层视图，在视图层次结构中插入应用程序的主页视图。对于此应用程序，EventList 是它的主页视图，也就是应用程序启动时显示的第一个视图。", "tips": ""}, "Step 2": {"zh": "第二步", "tips": ""}, "In wider app configurations, such full-screen landscape on an iPad, SwiftUI displays the NavigationView content as multiple adjacent columns, rather than a single stack. In this layout, your EventList displays in a sidebar column, and its destination content appears in the primary pane.": {"zh": "在更加广泛的应用程序配置中，如 iPad 上的全屏，SwiftUI 将内容分为多个相邻的列，而不是单个堆栈。在这种布局中，事件列表显示在侧边栏列，并且目标内容显示在主要视图中。", "tips": ""}, "Step 3": {"zh": "第三步", "tips": ""}, "Adding a Text view is a useful way to give the second column a placeholder view until a person selects an event in the list. When a person selects an event, the app replaces the placeholder view with an EventDetail view.": {"zh": "添加 Text 视图是一种有用的方法来给第二列添加占位视图，直到用户选择列表中的事件。当用户选择某个事件时，应用程序将占位视图替换为 EventDetail 视图。", "tips": ""}, "Step 4": {"zh": "第四步", "tips": ""}, "The app stores its data using the variable eventData. It’s defined with the @StateObject property wrapper to create an instance of an observable object, EventData. Because this object is observable, SwiftUI watches it to keep track of any changes to its values. Whenever the data changes, SwiftUI automatically updates all of the views that use (or observe) it.": {"zh": "应用程序使用变量 eventData 存储其数据。使用 @StateObject 属性包装器定义此对象，以创建一个可观察的对象 EventData。由于该对象是可观察的，因此 SwiftUI 监视它以跟踪任何变更，每当数据发生变化时，更新所有使用（或观察）它的视图。", "tips": ""}, "Step 5": {"zh": "第五步", "tips": ""}, "To make eventData available to your entire view hierarchy, use the .environmentObject modifier and pass in the eventData instance. Now you can use this data across all of your navigation view’s child views (and their child views as well).": {"zh": "要使 eventData 可以在所有的导航视图的子视图上使用，使用 .environmentObject 属性修饰符传入 eventData 实例。现在你可以在所有的导航视图的子视图上使用该数据。", "tips": ""}, "Event Model": {"zh": "事件模型", "tips": ""}, "Your event model holds all of the data needed to visualize and organize events in your list. Here you’ll explore how to structure an Event.": {"zh": "你的事件模型保存了需要在列表中呈现和组织事件的所有数据。在这里你将了解如何结构化一个事件。", "tips": ""}, "To organize its data, Event planner uses a collection of Event objects, each of which represent a specific event, such as a camping trip or birthday party. By conforming to the Identifiable protocol, you ensure that when you create a list of events, SwiftUI can identify and update each row.": {"zh": "为了组织数据，Event planner 使用一个集合，每个事件都代表一次事件，例如一个露营旅行或生日派对。通过符合 Identifiable 协议，你确保 SwiftUI 可以识别和更新每行。", "tips": ""}, "The Event type contains all of the information you need to populate an event, including a symbol, color, title, date, and collection of tasks. Each task is a specific to-do item for the event, such as “Get a camping lantern“.": {"zh": "Event 类包含你需要填充事件的所有信息，包括符号、颜色、标题、日期和任务集合。每个任务是事件的具体代办事项，例如“拿一个露营灯“。", "tips": ""}, "You’ll also notice a list of computed properties for Event. These help people organize the sections of their lists based on the date and the number of tasks to complete.": {"zh": "你还会注意到一个计算属性列表。这些帮助人们根据日期和任务数来组织列表的各个部分。", "tips": ""}, "For instance, the isPast property checks to see if the date property is less than Date.now, which is the current date and time. The property returns true when the event date is in the past, which allows people to sort any past events into their own category.": {"zh": "例如，isPast 属性检查 date 是否小于当前日期和时间。当事件日期是过去时间，该属性返回 true，它允许人们将任何过去的事件分类到自己的类别中。", "tips": ""}, "Take a moment to examine some of the other properties defined here. Can you figure out how they might help organize the list of events?": {"zh": "花点时间检查一下此处定义的其他属性。你能想到怎样它们会怎么样帮助组织列表的事件呢?", "tips": ""}, "Event Task": {"zh": "事件任务", "tips": ""}, "An event task represents a to-do item for an event. Here, you’ll learn how how to model the tasks.": {"zh": "时间任务表示事件的代办事项。在这里，你将了解如何为任务构建模型。", "tips": ""}, "An EventTask represents one of a collection of to-do items for an event. Like Event, an EventTask is also Identifiable, which lets SwiftUI manage and update its appearance in a list.": {"zh": "EventTask 表示一个事件的代办事项。与 Event 类型一样，EventTask 是 Identifiable 协议，让 SwiftUI 管理和更新它在列表中的外观。", "tips": ""}, "EventTask contains properties for text, completion state, and an isNew property. When a person marks a task as completed, you set isCompleted to true, which allows your app to track the remaining tasks for each event.": {"zh": "EventTask 包含文本、完成状态和 isNew 属性。当用户将一个任务设为已完成时，你将 isCompleted 设置为 true，它允许你的应用程序跟踪每个事件的剩余任务。", "tips": ""}, "Event Data": {"zh": "事件数据", "tips": ""}, "You use the EventData observable object to populate the data in your event list. Here you’ll learn how to structure and update the data.": {"zh": "使用 EventData 可观察对象来填充你的事件列表。在这里你将了解如何结构化和更新数据。", "tips": ""}, "This is the EventData type, which stores and modifies all of the events that your app displays in its UI. EventData conforms to the ObservableObject protocol, which means that if any of its published values change, SwiftUI notifies all observers (views using those values) and updates those views automatically.": {"zh": "这是 EventData 类型，它将包含所有你显示在 UI 中的事件存储和修改。EventData 符合 ObservableObject 协议，因此如果任何被 @Publish 修饰的值改变，SwiftUI 会通知所有观察者并自动更新它们的视图。", "tips": ""}, "EventData contains a property called events that stores a prepopulated array of Event values, such as game night or a doctor’s appointment. By using the @Published property wrapper when defining this property, you instruct SwiftUI to notify all observers and update their views whenever the events array changes. This allows you to add and delete events from the array and see the change instantly in your UI.": {"zh": "EventData 包含一个名为 events 的属性，该属性存储预填充的 Event 数组，例如比赛夜或者医生的预约。通过在定义此属性时使用 @Published 属性修饰符，你可以指示 SwiftUI 通知所有观察者并自动更新它们的视图，以便你可以在数组中添加和删除事件并立即看到改变。", "tips": ""}, "EventData provides methods for adding and deleting events. In addition, sortedEvents(period:) returns an array of sorted events based on the requested time period. Use this method in EventList to create sections based upon the event’s date, such as Next 7 Days.": {"zh": "EventData 提供添加和删除事件的方法。此外，sortedEvents(period:) 返回基于请求的时间段的排序事件数组。在 EventList 中使用该方法根据事件的日期创建分组，例如“接下来 7 天”。", "tips": ""}, "The Period enumeration provides each of the time categories that you’ll use to sort the list. The categories are nextSevenDays, nextThirtyDays, future, and past.": {"zh": "Period 枚举提供了你将使用来排序列表的各种时间分类。分别是 nextSevenDays（下周）, nextThirtyDays（下月）, future（未来）, 和 past（过去）。", "tips": ""}, "Event List": {"zh": "活动列表", "tips": ""}, "Learn how to construct the primary UI for the app, the event list, using a List view.": {"zh": "了解如何使用 List 视图构建应用程序的主列表界面。", "tips": ""}, "The EventList view creates a grouped listing of events using a List view.": {"zh": "EventList 视图使用 List 视图创建一个分组列表。", "tips": ""}, "In DatePlannerApp, the top-level navigation view uses the .environmentObject modifier to pass in an instance of EventData, making it accessible to all of its child views. You can now access that data in this child view by declaring a variable with the @EnvironmentObject property wrapper and giving it the EventData type. You now have access to all of the prepopulated event data to create your list.": {"zh": "在 DataPlannerApp 中，最外层导航视图使用 .environmentObject 修饰符传入 EventData 的实例，使其可用于所有子视图。现在你可以在此子视图中访问该数据，并声明一个变量，它的类型是 EventData。现在你可以使用预先填充的数据来创建列表。", "tips": ""}, "To make your list, create a List view and use a ForEach loop to iterate over all of the time periods (nextSevenDays, nextThirtyDays, future, and past).": {"zh": "要创建列表，创建 List 视图并使用 ForEach 循环迭代所有时间段(下周，下月，未来和过去)。", "tips": ""}, "Next, check that the current time period contains at least one event, otherwise, don’t show any data for it.": {"zh": "接下来，检查当前时间段至少包含一个事件，否则不显示任何数据。", "tips": ""}, "When you know there are events in a section, create a Section view and use ForEach to iterate over all events in that time period. Use the method sortedEvents(period:) from EventData to return the events specific to the section’s time range.": {"zh": "当你知道在某个时间段中有事件时，创建 Section 视图并使用 ForEach 迭代所有事件。使用 EventData 的方法 sortedEvents(period:) 来返回特定于时间段的事件。", "tips": ""}, "Step 6": {"zh": "第六步", "tips": ""}, "Inside the ForEach, create the EventRow views for each event in the time period. To do this, use a NavigationLink, then add an EventRow as the label (the part that you see), and an EventEditor as the destination (the part you navigate to when tapped). The event editor is where you’ll see all the tasks for each event and edit the event details.": {"zh": "在 ForEach 内，为该时间段内的每个事件都创建一个 EventRow 视图，然后添加一个 EventRow 作为标签和一个 EventEditor 作为目的地(点击跳转)。你可以在活动编辑器中查看每个活动的所有任务并编辑活动详细信息。", "tips": ""}, "Step 7": {"zh": "第七步", "tips": ""}, "To delete events, add the modifier .swipeActions on the event row and define a button that calls the delete method from EventData. You can now swipe on an event and tap the delete button to remove the current event.": {"zh": "要删除事件，为事件行添加 .swipeActions 修饰符并定义一个按钮，它调用 EventData 的 delete 方法。现在你可以在事件行中滑动并点击删除按钮来删除当前事件。", "tips": ""}, "Organizing with Grids": {"zh": "用网格组织展示数据", "tips": ""}, "Display visual content in an arrangement of rows and columns.": {"zh": "以网格形式展示内容", "tips": ""}}
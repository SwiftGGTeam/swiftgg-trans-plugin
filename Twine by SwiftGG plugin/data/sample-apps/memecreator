{"Meme Creator": {"zh": "", "tips": ""}, "Fetch structured data from a server asynchronously.": {"zh": "以异步方式从服务器获取结构化数据。", "tips": ""}, "Welcome to the Meme Creator app, where you’ll learn to fetch data from the internet to create panda memes.": {"zh": "欢迎来到 Meme Creator 应用程序，您将学习从网络中获取数据来创建熊猫备忘录。", "tips": ""}, "To create a meme, you’ll load some images from a URL, which could take some time depending on the speed of your internet connection to the server. You’ll use an asynchronous request so that your app can keep doing other things in the background, like responding to user actions, while waiting for the images to load into the UI.": {"zh": "为了创建一个备忘，你需要花费一些时间从 URL 中加载多个图片，而这个时间取决于网速。您将使用异步请求，以便您的应用程序可以保持在后台运作，例如响应用户行为。", "tips": ""}, "In this walkthrough, you’ll learn how asynchronous data fetching works, and how to use it when retrieving panda images and their corresponding data in JSON format.": {"zh": "在这个演示中，您将学习如何异步的获取网络数据，以及在 JSON 格式的数据里获取熊猫图像并正确的使用它们。", "tips": ""}, "Sharing App Data": {"zh": "分享应用程序数据", "tips": ""}, "Explore how the app makes its fetched data available to the entire view hierarchy.": {"zh": "探究如何让整个视图层次结构获取到数据。", "tips": ""}, "Step 1": {"zh": "第 1 步", "tips": ""}, "To fetch its data, the app uses an observable object, PandaCollectionFetcher. This is where all of the data fetching occurs.": {"zh": "为了获取数据，应用程序使用可观察对象 PandaCollectionFetcher。这是获取所有数据的地方。", "tips": ""}, "Step 2": {"zh": "第 2 步", "tips": ""}, "To share its data, MemeCreator passes in PandaCollectionFetcher as an environment object, making it available to all of the child views of MemeCreator. An environment object must also be an observable object, which enables all views observing its data to update whenever that data changes.": {"zh": "为了共享数据，MemeCreator 将 PandaCollectionFetcher 作为一个环境对象传入，使得 MemeCreator 的所有子视图都可以使用它。环境对象也必须是可观察对象，这使得观察其数据的所有视图能够在数据发生变化时进行更新。", "tips": ""}, "Creating the Panda Model": {"zh": "创建熊猫模型", "tips": ""}, "Learn how to model structured JSON data from a data source as a Swift structure.": {"zh": "学习如何将 JSON 中的数据以 Swift 结构体的方式变成一个数据模型。", "tips": ""}, "This is the Panda model object. It’s structured to mirror the JSON data returned from this URL.": {"zh": "这是一个熊猫模型的对象。它的结构与从 URL 返回的 JSON 数据形成映射。", "tips": ""}, "Each panda contains a text description as well as an imageUrl, which points to a panda image. This is the data you’ll use to download a panda image.": {"zh": "每个熊猫数据都包含文字描述和指向熊猫图像的 imageUrl。您可以使用这些数据下载熊猫图片。", "tips": ""}, "Step 3": {"zh": "第 3 步", "tips": ""}, "A PandaCollection is composed of an array of Panda model objects. This mirrors the format of the JSON data, which enables you to easily decode URLs and descriptive text from your JSON data into a PandaCollection instance.": {"zh": "PandaCollection 是由多个 Panda 模型对象组成的数组类型。这与 JSON 的数据格式相匹配，使您可以很容易的将 JSON 数据里的URL和描述文本解码成 PandaCollection 实例。", "tips": ""}, "Fetching Panda Data": {"zh": "获取 Panda 数据", "tips": ""}, "To fetch these images and their metadata, you’ll use an observable object that fetches data asynchronously. You’ll learn more about how to structure asynchronous functions in this walkthrough.": {"zh": "为了获取这些图像和它们的元数据，您将以异步的方式，使用可观察对象获取数据。在这个演示中，您将学习如何构建异步函数。", "tips": ""}, "PandaCollectionFetcher handles data fetching in your app. It’s an observable object, which allows it to publish changes to its values to all UI elements observing them. In this case, you’ll have an image view that’s waiting for new Panda data so it can update its image and description.": {"zh": "PandaCollectionFetcher 在 App 中负责处理数据获取。它是一个可观察对象，这使得它可以将自身值的变化推送到所有观察它们的 UI 元素中。在本例中，刚好有一个图像视图，正在等待新的熊猫数据，以便更新。", "tips": ""}, "There are two published values: imageData, a PandaCollection that you populate with JSON data, and currentPanda, a Panda model object that you display in the app’s UI.": {"zh": "这里有两个需要 published 的值: imageData(由 JSON 数据填充的 PandaCollection 类型) 和 currentPanda(需要在 App 中展示的熊猫模型数据)。", "tips": ""}, "The fetchData function retrieves the JSON data. Notice that it’s marked as async to indicate that the function runs asynchronously. Because it might take a little time to fetch the data from the internet, an async function pauses until the data returns. Meantime, your app’s code continues to run in the background.": {"zh": "fetchData 函数用于取回 JSON 数据。请注意，它被标记为 async，这表示它是异步的。因为从互联网获取数据可能需要一点时间，所以异步函数会暂停，直到数据返回。此时，你的代码会在后台持续运行。", "tips": ""}, "Tip": {"zh": "提示", "tips": ""}, "If you didn’t make fetchData asynchronous, the app might experience some lag while it loads images individually.": {"zh": "假如您没有异步加载数据，在加载图像时可能会带来一点延迟。", "tips": ""}, "Step 4": {"zh": "第 4 步", "tips": ""}, "The function is also marked throws. This tells you that the function can throw an error when you call it. In MemeCreator, the code handles this error with try? by ignoring any values it throws.": {"zh": "该函数还标记为 throws。这告诉您，当您调用该函数时，它可能会抛出错误。在 MemeCreator 中，通过使用 try? 关键字来忽略抛出的任何值值", "tips": ""}, "Step 5": {"zh": "第 5 步", "tips": ""}, "Inside fetchData, check to see if you have a valid URL.": {"zh": "在 fetchData 中, 检查 URL 是否有效。", "tips": ""}, "Step 6": {"zh": "第 6 步", "tips": ""}, "Call another async function — URLSession.shared.data(for:) — which passes in a URL request using the URL you’ve defined. This call is also marked await, because this is where the function pauses as it waits for the response from the URL request.": {"zh": "调用另一个异步函数 —URLSession.shared.data(for:) —，在这个函数中传入一个您定义的 URL 请求。这个调用被标记为 await 类型，因为这是函数等待 URL 请求响应时暂停的位置。", "tips": ""}, "Step 7": {"zh": "第 7 步", "tips": ""}, "After your data returns, you’ll check the URL response to verify that you didn’t receive an error. This code generates a badRequest error if the response’s status code isn’t equal to 200, indicating a successful request.": {"zh": "", "tips": "当你的数据返回后, 你可以检查 URL 响应确保没有收到错误。如果响应的状态代码不等于200（表示请求成功），则该代码生成 badRequest 错误。"}, "Step 8": {"zh": "第 8 步", "tips": ""}, "Finally, decode the JSON data and assign it to the published variable, imageData. Now you have all of the data you need to create panda memes.": {"zh": "最后，解码 JSON 数据并将其赋值给 published 变量 imageData。现在您拥有了创建熊猫备忘录所需的所有数据。", "tips": ""}, "Creating Asynchronous Images": {"zh": "创建异步图像", "tips": ""}, "Investigate how to use a URL to load an image asynchronously.": {"zh": "研究如何使用 URL 异步加载图像。", "tips": ""}, "When you have the JSON data, you can use it to load panda images. To accomplish this, compose your LoadableImage view from AsyncImage, a view that loads an image asynchronously.": {"zh": "当您获得JSON数据后，您可以使用它来加载熊猫图像。要实现这一点，可以使用 AsyncImage（一种异步加载图片的视图）组成 LoadableImage 视图。", "tips": ""}, "To create an image, LoadableImage needs data about the Panda it’s loading. The metadata supplied here includes the image URL and the description.": {"zh": "为了创建图像，LoadableImage 需要加载的数据。这里提供的元数据包括图像URL和描述。", "tips": ""}, "Inside the view body, create an AsyncImage and pass in the imageUrl to load the panda image. An AsyncImage view loads asynchronously, so you’ll need to show something in its place while the image loads, and show something else if image loading fails. You’ll handle all of this logic in the following if statement.": {"zh": "在视图的层级结构中，创建一个 AsyncImage 并传递 imageUrl 来加载熊猫图片。AsyncImage 视图的加载是异步的，所以你需要在图片加载时显示一些内容，如果图片加载失败则显示其他内容。您将在下面的 if 语句中处理所有这些逻辑", "tips": ""}, "When you create an instance of AsyncImage, SwiftUI provides you with phase data, which updates you on the state of image loading. For example, phase.error provides you with errors that occur, while phase.image provides an image, if available. You can use the phase data to show the appropriate UI based on the phase state.": {"zh": "当你创建了一个 AsyncImage 的实例, SwiftUI 为你提供了 phase 数据,使您了解图像加载的最新状态。例如，phase.error 提供了错误信息，而 phase.image 提供可用的图像。根据 phase 数据显示相应的 UI 界面。", "tips": ""}, "Check to see if any errors occurred while loading the image. If so, you can provide a view that tells the user something went wrong.": {"zh": "检查在加载图片时是否发生错误。如果有，您可以提供一个视图，告诉用户出错了。", "tips": ""}, "If you haven’t received an image and you don’t have an error, that means the image is loading. To let people know that the image is downloading, use ProgressView to display an animation while the image loads.": {"zh": "如果没有收到图像并且没有错误，那意味着图像正在加载。为了让人知道图像正在下载，可使用 ProgressView 的动画来表达这一隐喻。", "tips": ""}, "Making the Meme Creator": {"zh": "创建熊猫备忘录", "tips": ""}, "You’ll use the data from your app to create a meme-generating UI. Explore how to compose this view in this walkthrough.": {"zh": "您将使用应用程序中的数据创建一个可生成备忘录的用户界面。在本教程中，您将了解如何构建该视图。", "tips": ""}, "MemeCreator is where you bring everything together to make panda memes. As the top-level view of your app, this is where you’ll display the panda image along with tools for adding and editing text.": {"zh": "MemeCreator 是您制作熊猫备忘录的地方。作为应用程序的顶层视图，这里将显示熊猫图片以及用于添加和编辑文本的工具。", "tips": ""}, "In MemeCreatorApp, you passed in a PandaCollectionFetcher as an environment object to the top level view. Here, you access that environment object by defining a fetcher variable with the @EnvironmentObject property wrapper.": {"zh": "在 MemeCreatorApp 中，你将一个 PandaCollectionFetcher 作为环境对象传入顶层视图。在这里，您可以通过 @EnvironmentObject 属性包装器定义一个 fetcher 变量来访问该环境对象。", "tips": ""}, "Before you start loading panda images, the fetcher needs to retrieve the JSON data. The .task modifier defines a task to complete when the view first appears. This is where you’ll call fetcher.fetchData() to retrieve the JSON data.": {"zh": "在你开始加载熊猫图像之前，fetcher 需要获取 JSON 数据。.task 修饰符定义了当视图第一次显示时需要完成的任务。这是您将调用 fetcher.fetchData() 来获取 JSON 数据的时机。", "tips": ""}, "In the closure, you’ll insert try? await before calling fetcher.fetchData(). These words correspond to how you defined fetchData() with async throws. Because the function is asynchronous, await means that you’ll wait for the results of the async function to return, and try followed by a question mark - try? - means you’ll try calling the function, but ignore any error that it throws.": {"zh": "在闭包中，您将在调用 fetcher.fetchData() 之前插入 try? await。这些关键字对应于 fetchData() 函数里的 async throws。因为函数是异步的，await 表示等待异步函数返回结果，而 try 后面的问号 - try? - 表示您将尝试调用该函数，但忽略它抛出的任何错误。", "tips": ""}, "In the UI for this view, you’ll use LoadableImage to asynchronously load an image based on the data fetcher’s currentPanda. Even if your JSON data hasn’t loaded yet, the app provides a default currentPanda to load as the first image.": {"zh": "在该视图的用户界面中，您将使用 LoadableImage 根据数据获取器的 currentPanda 异步加载图片。即使您的 JSON 数据尚未加载，应用程序也会提供默认的 currentPanda 作为第一张图片加载。", "tips": ""}, "The image also has a text overlay, which you can add as a modifier. This overlay shows the meme text. The text field uses three state variables, memeText, textSize, and textColor to dynamically change the data of the text field in response to user editing actions. The text field can become focused by passing the @FocusState variable into the .focused modifier.": {"zh": "图片还有一个文本叠加，您可以将其添加为修改器。该叠加显示备忘录文本。文本字段使用三个变量 memeText、textSize 和 textColor 来动态改变文本字段的数据，以响应用户的编辑操作。通过将 @FocusState 变量传入 .focused 修饰符，文本字段可以进入聚焦状态。", "tips": ""}, "To change the image, you can push a button that retrieves a random Panda from the PandaCollection and sets it as the currentPanda. Because currentPanda is a published value, the LoadableImage view automatically updates to use the latest currentPanda data whenever it changes.": {"zh": "要改变图片，您可以按一个按钮从熊猫图库中随机获取一个熊猫并设置为当前熊猫。因为 currentPanda 是一个 published 类型的值，LoadableImage 视图会自动更新使用最新的 currentPanda 数据", "tips": ""}, "To add text, use a button that changes the focus state of the text field to true. This automatically inserts the cursor in the text field so you can add text.": {"zh": "要添加文本，使用按钮将文本字段的焦点状态更改为 true。这将自动在文本字段中插入光标，以便您添加文本。", "tips": ""}, "Step 9": {"zh": "第 9 步", "tips": ""}, "Finally, you can modify the state variables textSize and textColor using the slider and color picker at the bottom of the UI. These controls modify the values of those state variables to automatically update the meme text appearance.": {"zh": "最后，您可以使用用户界面底部的滑块和颜色选择器修改状态变量textSize和textColor。这些控件修改这些状态变量的值，以自动更新备忘录文本外观。", "tips": ""}, "Bubble Level": {"zh": "泡泡等级", "tips": ""}, "Access and display device sensor data by subscribing to notifications.": {"zh": "通过订阅通知访问和显示设备传感器数据。", "tips": ""}, "Check to see if an image is available. If there is, great — this is the panda image you’ll display using the description as the accessibility text.": {"zh": "检查图片是否可用。如果有，很好--这就是您要显示的熊猫图片，使用 description 作为 accessibilityLabel 的文本。", "tips": ""}}
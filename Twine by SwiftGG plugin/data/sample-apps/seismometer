{"Seismometer": {"zh": "地震仪", "tips": ""}, "Present dynamic data in custom views.": {"zh": "在自定义视图中呈现动态数据。", "tips": ""}, "Welcome to Seismometer.": {"zh": "欢迎来到地震仪。", "tips": ""}, "You can use your iPad to detect vibrations using its built-in motion sensors. This sample shows how to display vibration information in two formats: a needle and a line graph.": {"zh": "你可以使用 iPad 内置的运动传感器来检测震动。这个例子会向你展示如何用两种方式来展示震动：针形图和线形图", "tips": ""}, "Try out Seismometer by placing your iPad on a flat surface and then jostling it a bit. Or you can hold your iPad and move it up and down slowly.": {"zh": "你可以将你的 iPad 放在一个平坦的平面上，然后稍微推挤一下来体验“地震仪”这个 App。或者，你可以拿着你的 iPad 慢慢地上下移动。", "tips": ""}, "Motion Detector": {"zh": "", "tips": ""}, "You can use the MotionDetector class to observe the motion of your device.": {"zh": "你可以使用 MotionDetector 类来观察你的设备的运动。", "tips": ""}, "Step 1": {"zh": "", "tips": ""}, "Step 2": {"zh": "", "tips": ""}, "A CMMotionManager is the object that you use to get motion data from the sensors in your iPad, such as the accelerometer. It gathers information from the sensors and translates their data into values you can understand.": {"zh": "CMotionManager 是你用来从你的 iPad 的传感器中获取运动数据的对象，比如加速度计。它会从传感器中收集信息，并将它们的数据转换成你可以理解的值。", "tips": ""}, "Step 3": {"zh": "", "tips": ""}, "The timer property stores a Timer instance. A timer waits for certain period of time, defined in the updateInterval property, before running some code. The MotionDetector uses the timer to update its pitch, roll, and zAcceleration values at regular intervals.": {"zh": "timer 属性存储了一个 Timer 实例。Timer 会在一段时间后——即 updateInterval 属性中定义的时间后，运行一些代码。MotionDetector 使用 timer 来在固定的时间间隔内更新它的 pitch、roll 和 zAcceleration 值。", "tips": ""}, "Note": {"zh": "注意", "tips": ""}, "Choose an update interval that makes sense for your app. For example, you’ll want a short update interval for the seismometers in this project because the interface presents real-time data as you move your iPad around.": {"zh": "选择一个对你的 App 来说有意义的更新间隔。例如，你会想要一个短的更新间隔，因为这个项目中的地震仪会在你移动你的 iPad 时实时更新数据。", "tips": ""}, "Step 4": {"zh": "", "tips": ""}, "These three properties store data for the tilt of your device in two dimensions (roll and pitch), as well as its vertical acceleration (zAcceleration).": {"zh": "这三个属性存储了你的设备在两个维度上的倾斜（roll 和 pitch），以及它的垂直加速度（zAcceleration）。", "tips": ""}, "These properties have a @Published property wrapper, which means that any SwiftUI view that depends on their values automatically updates when the values change. You make a view dependent on a published property by using that value in the view’s code. The NeedleSeismometer and GraphSeismometer samples use these properties to update when the MotionDetector detects changes to the values of roll, pitch, and zAcceleration.": {"zh": "这些属性有一个 @Published 属性包装器，这意味着任何依赖于它们值的 SwiftUI 视图在值改变时会自动更新。你可以通过在视图的代码中使用该值来使视图依赖于已发布的属性。NeedleSeismometer 和 GraphSeismometer 示例会使用这些属性来在 MotionDetector 检测到 roll、pitch 和 zAcceleration 值的变化时更新。", "tips": ""}, "Step 5": {"zh": "", "tips": ""}, "This property stores code that runs when the MotionDetector updates its motion data. If you want to execute custom actions when the motion data changes, you can put your own code into onUpdate in your instance of MotionDetector.": {"zh": "这个属性存储了 MotionDetector 更新它的运动数据时要运行的代码。如果你想在运动数据改变时执行自定义操作，你可以将你自己的代码放到 MotionDetector 的 onUpdate 中。", "tips": ""}, "Step 6": {"zh": "", "tips": ""}, "This method starts updating the motion detector.": {"zh": "这个方法开始更新运动检测器。", "tips": ""}, "Step 7": {"zh": "", "tips": ""}, "Always use isDeviceMotionAvailable to verify that motion data is available before you try to access it.": {"zh": "当你在尝试访问它之前，总是使用 isDeviceMotionAvailable 来验证运动数据是否可用。", "tips": ""}, "Step 8": {"zh": "", "tips": ""}, "This method tells the CMMotionManager to start updating motion data.": {"zh": "这个方法告诉 CMMotionManager 开始更新运动数据。", "tips": ""}, "Step 9": {"zh": "", "tips": ""}, "This code creates a new timer and schedules it to run. The updateInterval property tells the timer how long to wait between updates, and repeats is set to true so the timer runs forever until you stop it. (If you pass false to repeats, the timer only runs once.) The block of code at the end of the line that reads { _ in is the start of a closure that contains the code run by the timer. The closure calls the updateMotionData() method.": {"zh": "这段代码创建了一个新的计时器，并设定了它调用的时机。updateInterval 属性会告诉计时器在更新之间等待多长时间，由于 repeats 被设置为 true，因此计时器会一直运行，直到你停止它（如果你传递 false 给 repeats，计时器只会运行一次。）。 行末尾的代码块 { _ in 计时器会调用的闭包的开始部分。在这个闭包中，代码调用了 updateMotionData() 方法。", "tips": ""}, "Step 10": {"zh": "", "tips": ""}, "The updateMotionData() method does the core work of the motion detector. It’s responsible for updating all published properties with current data from the sensors, as well as calling the code in onUpdate.": {"zh": "updateMotionData() 方法完成了是运动检测器的核心工作。它负责使用传感器的当前数据更新所有已发布的属性，以及调用 onUpdate 方法。", "tips": ""}, "Step 11": {"zh": "", "tips": ""}, "The deviceMotion data may not be there in certain conditions. To see if the data exists, try to assign deviceMotion to a variable or constant using if let. If the motion data exists, it’s assigned to data and the code inside the braces runs. Otherwise, it skips the entire if statement.": {"zh": "deviceMotion 数据在某些情况下可能不存在。要查看数据是否存在，请尝试使用 if let 将 deviceMotion 分配给变量或常量。如果运动数据存在，它就会被分配给 data，然后花括号内的代码就会运行。否则，它就会跳过整个 if 语句。", "tips": ""}, "Step 12": {"zh": "", "tips": ""}, "A CMDeviceMotion instance represents device motion, stored in data. The CMDeviceMotion class has quite a few properties for describing the input from the motion sensors. Use the attitude property to get the device’s tilt in three directions. You may be familiar with X, Y, and Z axes in 3D space, which relate to pitch, roll, and yaw, respectively.": {"zh": "CMDeviceMotion 实例表示设备运动状态，存储在 data 属性中。CMDeviceMotion 类有很多属性来描述运动传感器的输入。使用 attitude 属性来获取设备在三个方向上的倾斜。你可能熟悉 3D 空间中的 X、Y 和 Z 轴，它们分别与 pitch、roll 和 yaw 相关。", "tips": ""}, "Step 13": {"zh": "", "tips": ""}, "Use the userAcceleration property to get the device’s acceleration after accounting for the downward pull of gravity. If your device is still, this number is 0. However, the value changes to a negative number when you lift your iPad upward, or to a positive number when you move your iPad downward.": {"zh": "使用 userAcceleration 属性来获取设备在考虑到重力向下拉的情况下的加速度。如果你的设备静止不动，这个数值就是 0。然而，当你将 iPad 向上抬起时，这个值会变成一个负数，或者当你将 iPad 向下移动时，这个值会变成一个正数。", "tips": ""}, "Step 14": {"zh": "", "tips": ""}, "You run the code in onUpdate just as you’d call any function, with a set of parentheses following its name.": {"zh": "你可以像调用任何函数一样调用 onUpdate 中的代码，只需要在函数名后面加上一对括号。", "tips": ""}, "Step 15": {"zh": "", "tips": ""}, "The stop() method tells the CMMotionManager class to stop updating its values by calling stopDeviceMotionUpdates(), then it stops the timer by calling invalidate().": {"zh": "stop() 方法通过调用 stopDeviceMotionUpdates() 告诉 CMMotionManager 类停止更新它的值，然后它通过调用 invalidate() 停止计时器。", "tips": ""}, "Step 16": {"zh": "", "tips": ""}, "This deinitializer runs when a MotionDetector instance is about to go away. It’s important to clean up here; otherwise the timer continues to run even after the motion detector is gone.": {"zh": "这个析构器在 MotionDetector 实例即将消失时运行。在这里做一些善后工作很重要；否则，即使 motion detector 对象消失了，计时器仍然会继续运行。", "tips": ""}, "Needle Seismometer": {"zh": "指针地震仪", "tips": ""}, "Learn how to display a needle that registers the vibration of your device.": {"zh": "学习如何显示一个可以记录你的设备振动的指针。", "tips": ""}, "The NeedleSeismometer view displays a needle that moves as your device vibrates. It uses the zAcceleration data from a MotionDetector instance to detect vibration, and translates that data into left and right rotation of the needle.": {"zh": "NeedleSeismometer 视图显示一个随着你的设备振动而移动的指针。它使用 MotionDetector 实例的 zAcceleration 数据来检测振动，并将这些数据转换为指针的左右旋转。", "tips": ""}, "The motionDetector property holds a MotionDetector instance. The motion detector senses changes in your device’s motion and provides that data for use in your code.": {"zh": "motionDetector 属性保存一个 MotionDetector 实例。运动检测器会感知你的设备运动的变化，并提供这些数据供你在代码中使用。", "tips": ""}, "The property has an @EnvironmentObject property wrapper because this view expects the app to put a motion detector in the environment for it to use.": {"zh": "该属性有一个 @EnvironmentObject 属性包装器，因为该视图期望应用程序将一个运动检测器放在环境中供它使用。", "tips": ""}, "The seismometer display is a vertical stack (VStack) with a rotating needle, text that displays the raw values from the sensor, and some instructions for people to follow.": {"zh": "地震仪显示是一个垂直堆栈（VStack），有一个旋转的指针，一个显示传感器原始值的文本，以及一些人们要遵循的指示。", "tips": ""}, "You can use a ZStack to layer views on top of each other. Here, the background view for the gauge goes underneath the needle itself. The background draws a semicircle with marks around its edge. Check out the code in GaugeBackground.swift if you’re curious how that’s done.": {"zh": "你可以使用 ZStack 将视图层叠在一起。在这里，仪表盘的背景视图位于指针本身的下方。背景绘制了一个带有标记的半圆。如果你想知道这是怎么做的，请查看 GaugeBackground.swift 中的代码。", "tips": ""}, "The needle is just a rectangle with a .frame modifier to give it a narrow, tall shape. It also uses the .foregroundColor modifier to adopt the app’s accent color. Try changing the accent color of this sample to see how it affects the view.": {"zh": "指针只是一个矩形，有一个 .frame 修饰符，给它一个狭窄的、高的形状。它还使用 .foregroundColor 修饰符来采用应用程序的强调颜色。尝试更改此示例的强调颜色，看看它如何影响视图。", "tips": ""}, "Use the .rotationEffect modifier to rotate the rectangle for the needle, and set the rotationAngle and needleAnchor properties to define the needle’s behavior. You pass in rotationAngle as the first argument, which interprets the motion data to calculate the correct needle angle.": {"zh": "使用 .rotationEffect 修饰符来旋转指针的矩形，并设置 rotationAngle 和 needleAnchor 属性来定义指针的行为。你将 rotationAngle 作为第一个参数传入，它会解释运动数据来计算正确的指针角度。", "tips": ""}, "By default, rotation happens around the center of a view; however, you can use the needleAnchor property as the second argument so the needle rotates at its base.": {"zh": "默认情况下，旋转发生在视图的中心；然而，你可以使用 needleAnchor 属性作为第二个参数，这样指针就会在它的底部旋转。", "tips": ""}, "The rotationAngle property returns the amount the needle rotates for a given sensor reading. The rotationEffect property expects an Angle instance, so you can create one using the zAcceleration property of the motion detector. The motion detector represents upward acceleration with a negative number, but you’re multiplying by -1 to make upward acceleration positive, and downward acceleration negative.": {"zh": "rotationAngle 属性返回指针在给定传感器读数下旋转的量。rotationEffect 属性期望一个 Angle 实例，所以你可以使用运动检测器的 zAcceleration 属性创建一个。运动检测器用一个负数表示向上的加速度，但是你乘以 -1 来使向上的加速度为正，向下的加速度为负。", "tips": ""}, "Experiment": {"zh": "实验", "tips": ""}, "The amplification constant is useful for controlling the sensitivity of the display. Try changing its value to see how that affects the needle.": {"zh": "amplification 常量对于控制显示的灵敏度很有用。尝试更改它的值，看看它如何影响指针。", "tips": ""}, "The needleAnchor property defines the point of rotation for the needle as a UnitPoint. A unit point has x and y coordinates like a regular point, but their values only range between 0 and 1.": {"zh": "needleAnchor 属性将指针的旋转点定义为 UnitPoint。一个单位点有 x 和 y 坐标，就像一个普通的 point 类型，但它们的值只能取在 0 和 1 之间。", "tips": ""}, "A unit point is useful for defining a point inside any view, regardless of its size. This one defines the midpoint of a view (width-wise) at its bottom. Regardless of the view’s size, the point is exactly at that location relative to the view’s width and height.": {"zh": "当我们不想关心视图的具体大小的时候，用 unit point 来定义视图内部的点会非常有用。在这里，这个 unit point 定义了视图的中点（宽度方向）在视图底部。无论具体视图的大小是多少，该点都恰好位于相对于视图宽度和高度的固定位置。", "tips": ""}, "Without this overlay, you’d get a plain rectangle that rotates at its base. But to make things a little more polished, this overlay adds a small circle at the bottom.": {"zh": "如果没有这个 overlay，你就会得到一个在底部旋转的普通矩形。但是为了让矩形看起来更加精致，这个 overlay 在矩形底部添加了一个小圆。", "tips": ""}, "You can use an overlay to put content directly on top of a view. The overlay occupies the same area as its parent view. In this overlay, a Spacer pushes a small Circle to the bottom of a VStack so it aligns with the base of the needle.": {"zh": "你可以使用 overlay 将内容直接放在视图的顶部。overlay 占据与其父视图相同的区域。在这个 overlay 中，一个 Spacer 将一个小圆推到 VStack 的底部，这样它就与指针的底部对齐了。", "tips": ""}, "Graph Seismometer": {"zh": "图形化的地震仪", "tips": ""}, "Learn how to display the vibration of your device as an animated line graph.": {"zh": "学习如何将你的设备的振动显示为一个动画的折线图。", "tips": ""}, "The GraphSeismometer view displays a line graph of your device’s vibration. It uses the zAcceleration data from a MotionDetector instance to detect vibration, and translates that data into Y values in the graph; the X values represent time.": {"zh": "", "tips": "GraphSeismometer 视图显示了你的设备的振动的折线图。它使用 MotionDetector 实例的 zAcceleration 数据来检测振动，并将该数据转换为图表中的 Y 值；X 值表示时间。"}, "This property holds a MotionDetector instance. The motion detector senses changes in your device’s motion and provides that data for you to use in your code.": {"zh": "这个属性保存了一个 MotionDetector 实例。它会感知你的设备运动的变化，并为你提供这些数据，以便你在代码中使用。", "tips": ""}, "The data property stores the seismometer data you’ll graph in this view as an array of Double values. It includes a @State property wrapper because you want the line graph to update whenever the data changes.": {"zh": "data 属性是一个值为 Double 的数组，它会存储地震仪的数据，并提供给你以便在视图中以图形形式呈现。因为你会希当数据变化时折线图也跟着变化，所以这个属性还包括了一个 @State 属性包装器。", "tips": ""}, "The maxData property represents the maximum number of data points your graph shows. This is vital, because the seismometer updates 100 times per second, which produces a lot of data, and you don’t want to keep that around forever. When you accumulate enough data, you’ll start deleting the old ones.": {"zh": "maxData 属性表示你的图表显示的数据点的最大数量。这是至关重要的，因为地震仪每秒更新 100 次，这会产生大量的数据，而你不希望永远保留这些数据。当你积累了足够的数据，你就会开始删除旧数据。", "tips": ""}, "The sensitivity property controls how sensitive the seismometer is to motion. Sensitivity affects the line graph by expanding it vertically. The higher the sensitivity, the larger the peaks and valleys will appear in the graph.": {"zh": "sensitivity 属性控制地震仪对运动的敏感度。敏感度会通过在垂直方向上扩展折线图来影响折线图。敏感度越高，图表中的峰值和谷值就会越大。", "tips": ""}, "The graphMaxValueMostSensitive property represents the maximum value the graph displays at its most sensitive, and graphMaxValueLeastSensitive represents the maximum value displayed at its least sensitive. Along with sensitivity, these properties control the graph’s display.": {"zh": "graphMaxValueMostSensitive 属性表示图表在最敏感时显示的最大值，graphMaxValueLeastSensitive 表示在最不敏感时显示的最大值。这些属性与敏感度一起控制图表的显示。", "tips": ""}, "Try changing these values to affect the range of sensitivity of the graph. (Note that graphMaxValueMostSensitive should always be less than graphMaxValueLeastSensitive.)": {"zh": "尝试更改这些值以影响图表的敏感度范围。（注意，graphMaxValueMostSensitive 应该始终小于 graphMaxValueLeastSensitive。）", "tips": ""}, "This property represents the maximum value of the graph: the one that’s represented by the top edge. The calculation uses the sensitivity properties declared above.": {"zh": "这个属性表示图表的最大值：也就是顶部边缘所代表的值。计算使用了上面声明的敏感度属性。", "tips": ""}, "The LineGraph.swift file represents the main view of the seismometer. The initializer for LineGraph has four parameters: the data to display, the maximum amount of data in the graph, and the minimum and maximum values corresponding to its bottom and top edges.": {"zh": "LineGraph.swift 文件表示地震仪的主视图。LineGraph 的初始化器有四个参数：要显示的数据、图表中的最大数据量，以及对应于其底部和顶部边缘的最小值和最大值。", "tips": ""}, "As you explore the seismometer, you’ll notice that the data can contain values outside the minimum and maximum range, but they aren’t displayed because they fall outside the view bounds.": {"zh": "当你探索地震仪时，你会注意到数据可能包含在最小值和最大值范围之外的值，但它们不会被显示，因为它们超出了视图边界。", "tips": ""}, "These five modifiers configure the line graph display. The .clipped modifier prevents the line from drawing outside its frame. You can use .background to set the background color. By using .accentColor the display can adapt to your app’s theme. Using opacity makes the color less bold.": {"zh": "这五个修饰符配置了折线图的显示。.clipped 修饰符防止线条在其框架之外绘制。你可以使用 .background 来设置背景颜色。通过使用 .accentColor，显示可以适应你的应用程序的主题。使用 opacity 使颜色不那么醒目。", "tips": ""}, "Try commenting out the .clipped modifier to see what happens with the graph display.": {"zh": "尝试注释掉 .clipped 修饰符，看看图表显示会发生什么。", "tips": ""}, "You can curve the points of the graph by adding .cornerRadius to the line. Change the number to make the curves broader or narrower. The .padding modifier adds some space around the edges to keep it away from other views.": {"zh": "你可以通过在线条上添加 .cornerRadius 来使图表的点变成曲线。更改数字可以使曲线变宽或变窄。.padding 修饰符在边缘周围添加了一些空间，使其远离其他视图。", "tips": ""}, "The modifier .aspectRatio gives it a square shape.": {"zh": ".aspectRatio 修饰符使其呈正方形。", "tips": ""}, "Try changing the number to 2, or 0.3, to see how that affects the display.": {"zh": "尝试将数字更改为 2 或 0.3，看看它如何影响显示。", "tips": ""}, "The Slider control affects the sensitivity of the graph display. Its first parameter, value: $sensitivity, is a binding to the sensitivity state property.": {"zh": "Slider 控件会影响图表显示的敏感度。它的第一个参数 value: $sensitivity 是对敏感度状态属性的绑定。", "tips": ""}, "You use bindings to let other views control state properties. In this case, you’re telling the slider it can update the value of sensitivity as the user interacts with it.": {"zh": "你可以使用绑定来让其他视图控制状态属性。在当前场景中，你会在用户和滑块交互时告诉它可以更新 sensitivity 变量的值。", "tips": ""}, "The next three parameters control features of the slider. in: 0...1: specifies the slider’s range of values, from minimum to maximum. Use the minimumValueLabel and maximumValueLabel parameters to add labels at the left and right ends of the slider, respectively.": {"zh": "接下来的三个参数控制滑块的特性。in: 0...1：指定滑块的值范围，从最小值到最大值。minimumValueLabel 和 maximumValueLabel 参数会分别在滑块的左端和右端添加标签。", "tips": ""}, "To store a history of motion values to draw the line graph, assign the code inside the braces to the onUpdate property. This tells the motion detector to run that code whenever there’s new data to display. This code takes the latest motion data and adds it to the data array.": {"zh": "为了存储绘制折线图所需的运动值历史记录，将大括号内的代码分配给 onUpdate 属性。这会告诉运动检测器在有新数据要显示时运行该代码。该代码会获取最新的运动数据并将其添加到数据数组中。", "tips": ""}, "Append the zAcceleration of the device to the data array with every motion detector update. Use zAcceleration to chart up- and downward motion of the device. That makes the graph correspond visually to the movement of the device. When you lift your iPad, the line goes upward on the graph.": {"zh": "每次 motion detector 更新时，设备的 zAcceleration 会被追加到 data 数组中。使用 zAcceleration 来绘制设备的上下运动。这使得图表在视觉上与设备的运动相对应。当你抬起 iPad 时，线条在图表上向上移动。", "tips": ""}, "Here’s where the maxData property comes into play. After you’ve reached the limit, you’ll drop the first item in the array (the oldest data point) and make a new array out of the result.": {"zh": "这里就是 maxData 属性发挥作用的地方。在达到限制后，你将删除数组中的第一个项目（最旧的数据点），并将结果制作成一个新数组。", "tips": ""}, "Seismometer Browser": {"zh": "地震仪浏览器", "tips": ""}, "Learn how the top-level view of the app passes motion data to its child views.": {"zh": "学习如何将应用的顶级视图中的运动数据传递给其子视图。", "tips": ""}, "The SeismometerBrowser view displays the two options for seismometer display in a list. When you choose a display from the list, the app displays that view. The browser is a container for the other two views, so it also acts as the manager of the MotionDetector instance that gathers motion data from the device.": {"zh": "SeismometerBrowser 视图在列表中显示地震仪的两个选项。当你从列表中选择一个显示时，应用会显示该视图。浏览器是其他两个视图的容器，因此它也充当从设备收集运动数据的 MotionDetector 实例的管理器。", "tips": ""}, "The detector property holds the MotionDetector instance that’s shared throughout the app. The code annotates the property with @StateObject to indicate that SwiftUI keeps track of its updates. You can share state objects with other views, but this view is its owner.": {"zh": "detector 属性保存了在整个应用程序中共享的 MotionDetector 实例。代码使用 @StateObject 以指示 SwiftUI 会跟踪其更新。你可以与其他视图共享该属性，但是该视图是其所有者。", "tips": ""}, "To give other views access to the motion detector, you can use the .environmentObject modifier to add it to the app’s environment. Any child view of this view can use it by declaring a property of the same type and annotating it with @EnvironmentObject.": {"zh": "为了让其他视图访问运动检测器，你可以使用 .environmentObject 修饰符将其添加到应用程序的环境中。该视图的任何子视图都可以通过声明具有相同类型的属性并使用 @EnvironmentObject 进行注释来使用它。", "tips": ""}, "You can use the .onAppear modifier to perform actions when this view first appears. It’s the perfect place to start the motion detector. Use the .onDisappear modifier to stop the detector when the view isn’t visible.": {"zh": "你可以使用 .onAppear 修饰符在该视图首次出现时执行操作。这是启动运动检测器的理想位置。使用 .onDisappear 修饰符在视图不可见时停止检测器。", "tips": ""}, "Double Extension": {"zh": "Double 类型的扩展", "tips": ""}, "Investigate using an extension on Double to format text in an easy to read way.": {"zh": "探究使用 Double 类型的扩展以便以易于阅读的方式格式化文本。", "tips": ""}, "You can use an extension to create custom behaviors for existing types. Declaring extension Double means you’re adding new capabilities to the Double type. When you use a Double value, you can access anything defined in this extension.": {"zh": "你可以使用扩展为现有类型创建自定义行为。声明 Double 扩展意味着你正在为 Double 类型添加新功能。当你使用 Double 值时，可以访问在此扩展中定义的任何内容。", "tips": ""}, "This method returns a string that describes the value of a Double with a fixed number of digits. You can pass in the number of integer digits and fraction digits you want, or leave those arguments out for the default values of 2.": {"zh": "这个方法返回一个字符串，该字符串用固定数量的数字描述 Double 的值。你可以传入你想要的整数位数和小数位数，或者忽略这些参数以使用默认值 2。", "tips": ""}, "The formatted() method operates on a number of basic types such as Date, Int, and Double, all of which are commonly represented as strings in an app. Because there are so many ways to format these strings, the formatted() method gives you ways to customize how they’re represented. For example, does a number represent a percentage, a simple value, or maybe a price?": {"zh": "formatted() 方法对许多基本类型（如 Date、Int 和 Double）进行操作，所有这些类型在应用程序中通常表示为字符串。因为有很多方法可以格式化这些字符串，所以 formatted() 方法提供了一些方法来自定义它们的表示方式。例如，一个数字表示一个百分比、一个简单的值，或者可能是一个价格？", "tips": ""}, "The argument to formatted() is a format style. The .number style gives you a string that describes this Double value as a simple number, as opposed to a percentage or a price.": {"zh": "formatted() 的参数是一个 format style 类型。.number 样式为你提供了一个字符串，该字符串将此 Double 值描述为一个简单的数字，而不是一个百分比或价格。", "tips": ""}, "The .number style has modifiers much like those for SwiftUI views. For example, the .sign modifier lets you format the number so that it’s always preceded by a sign, even when the number is positive. You can also use the .precision modifier to specify exactly how many digits to use.": {"zh": ".number 这种变成风格具有与 SwiftUI 视图相似的修饰符。例如，.sign 修饰符允许你格式化数字，以便即使数字为正数，它也总是以符号开头。你还可以使用 .precision 修饰符来指定要使用的精度。", "tips": ""}, "Recognizing Gestures": {"zh": "识别手势", "tips": ""}, "Update shapes or other content in response to taps, rotations, or other Multi-Touch gestures.": {"zh": "当识别到点击、旋转或其他多点触控手势时，更新形状或其他内容。", "tips": ""}, "Your device has sensors such as accelerometers and gyroscopes which sense its motion and orientation. The Core Motion framework gives you access to data from these and other sensors.": {"zh": "你的设备具有加速度计和陀螺仪等传感器，这些传感器可以感知其运动和方向。Core Motion 框架使你可以访问来自这些和其他传感器的数据。", "tips": ""}}
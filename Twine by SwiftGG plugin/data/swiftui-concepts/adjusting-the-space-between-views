{"Adjusting the space between views": {"zh": "调整视图之间的间距", "tips": ""}, "Specify the alignment and spacing of your content.": {"zh": "指定你内容的对齐和间距。", "tips": ""}, "As you define the views that display information, you can adjust the layout by declaring where any extra space should go. Depending on how you want your layout to adapt, you may choose different tools. Some of the tools for managing the space between views are themselves views, like Spacer. There are also view modifiers that affect the space adjacent to a view, like padding(_:_:). In some cases, you affect a layout by providing a non-default value as a parameter of a view or modifier.": {"zh": "当定义视图来显示信息时，你可以通过声明额外的间距来调整布局。根据希望布局如何自适应，你可以选择不同的工具。 一些用于管理视图之间间距的工具本身就是视图，例如 Spacer。还有一些视图修饰符可以影响相邻视图的间距，例如 padding(::)。 在某些情况下，可以通过为视图或修饰符的参数提供非默认值来影响布局。", "tips": ""}, "Define your content": {"zh": "定义你的内容", "tips": ""}, "To show some different strategies for changing the spacing between views, this example uses a sequence of train cars. Each train has three views — a front, middle, and rear section — and uses the train car symbols from SF Symbols. These examples use an HStack to show horizontal spacing. The same principles apply on the vertical axis and to other stack and grid views in SwiftUI.": {"zh": "为了展示改变视图之间间距的不同方式，这个例子使用了一系列的火车车厢。每个火车有三个视图（前部、中部和后部），每个视图都使用了 SF Symbols 中的火车车厢符号。 这些例子使用一个 HStack 来控制水平间距。相同的原则也适用于垂直方向以及 SwiftUI 中的其他 Stack 和网格视图。", "tips": ""}, "Many of these container views include some negative space by default, so set up your content and a PreviewProvider first to see how the defaults look before you customize the spacing.": {"zh": "许多这些容器视图都包含一些默认值是负数的间距，因此在自定义间距之前，首先设置你的内容，并且创建一个实现了 PreviewProvider 协议的实例来查看默认样式是什么样的。", "tips": ""}, "Step 1": {"zh": "第一步", "tips": ""}, "This custom view defines an Image view that displays an SF Symbol of a train car, with a pink background to show the extent of the view.": {"zh": "这个自定义视图定义了一个 Image 视图，用于显示一个表示火车车厢的 SF Symbol，并使用粉色背景来显示视图的范围。", "tips": ""}, "You can define your own custom views so that you can have similar views in multiple places without having to specify the same modifiers and parameters in each place.": {"zh": "你可以自己定义一个视图，这样就可以在多个地方复用相同的视图，而无需在每个地方都重复指定相同的修饰符和参数。", "tips": ""}, "Experiment": {"zh": "实践", "tips": ""}, "Try changing the color of the background(_:ignoresSafeAreaEdges:) to another color, and see the color of the background change on all the train cars.": {"zh": "尝试将传入 background(_:ignoresSafeAreaEdges:) 的背景颜色更改为其他颜色，并观察所有火车车厢背景颜色发生的变化。", "tips": ""}, "Step 2": {"zh": "第二步", "tips": ""}, "Here’s an example of that custom TrainCar view in use. This view declaration only specifies which part of the train it represents. The TrainCar structure defines the Image view with the corresponding symbol and adds a background.": {"zh": "这里展示了一个使用自定义 TrainCar 视图的示例。这个视图的声明仅需指定它表示火车的哪个部分。剩下的就由 TrainCar 结构来定义相应符号的 Image 视图，并添加了一个背景。", "tips": ""}, "Step 3": {"zh": "第三步", "tips": ""}, "This HStack contains three TrainCar views - front, middle, and rear - to form a train. The code doesn’t add any custom space or padding to the HStack or the TrainCar views, but there’s still a little space between the frames of the train cars.": {"zh": "这个 HStack 包含了组成火车前中后三个部分的 TrainCar 视图。代码没有给 HStack 或 TrainCar 视图添加任何自定义的间距或填充，但火车车厢之间仍然有一些间距。", "tips": ""}, "An HStack, like many of SwiftUI’s built-in collection views, puts some spacing between its subviews by default.": {"zh": "HStack 就像 SwiftUI 中许多内置的集合视图一样，默认情况下会在其子视图之间添加一些间距。", "tips": ""}, "Customize a container's spacing": {"zh": "自定义容器的间距", "tips": ""}, "The default spacing of an HStack isn’t right for all layouts. You can specify a constant spacing between a stack’s subviews, spacing that scales with Dynamic Type, or no spacing at all.": {"zh": "HStack 的默认间距并不适用于所有布局。你可以指定一个常量作为子视图间的间距，使其随动态类型进行缩放，或者完全没有间距。", "tips": ""}, "The spacing parameter of an HStack customizes the spacing between its views. This value of 20 puts 20 points of space between the front and middle TrainCar views and 20 points of space between the middle and rear TrainCar views, instead of the default spacing.": {"zh": "HStack 的 spacing 参数可以自定义视图间的间距。这里用 20 取代了默认的间距，在前部和中部，以及中部和后部的 TrainCar 视图之间增加了 20 个点的间距。", "tips": ""}, "Because these train cars are SF symbols, their size changes when the current dynamicTypeSize changes. This train’s spacing adjusts proportionally. In this HStack, the value for the spacing parameter is the trainCarSpace property of the ScaledSpacing view.": {"zh": "因为这些火车车厢是 SF 符号，所以它们的大小会随着当前 dynamicTypeSize 的变化而改变。这列火车车厢之间的间距也应该按比例调整。 在这个 HStack 中，spacing 参数的值是由 ScaledSpacing 修饰的 trainCarSpace 属性来表示。", "tips": ""}, "Adjust the Dynamic Type slider in the Canvas Device Settings to see how the train cars and spacing in the preview change.": {"zh": "调整画布设备设置中的 Dynamic Type 滑块，观察预览中火车车厢和间距的变化。", "tips": ""}, "The ScaledMetric property wrapper configures the trainCarSpace property to change in proportion to the current body font size.": {"zh": "使用 ScaledMetric 属性包装器，可以让 trainCarSpace 属性按当前 body 字体大小成比例地变化。", "tips": ""}, "Step 4": {"zh": "第四步", "tips": ""}, "Using the value of 0 for the spacing parameter here removes all of the space between the views. In this HStack, the train cars are right next to each other.": {"zh": "在这里，将 spacing 参数设置为 0，会删除视图之间的所有间距，在这个 HStack 中，火车车厢彼此紧密相连，没有任何间距。", "tips": ""}, "Add padding around subviews": {"zh": "在子视图周围添加填充", "tips": ""}, "You can add padding to the outer edges of a view to put some space between that view and any neighboring views, or to the edge of a window or scene.": {"zh": "你可以在视图的外部边缘添加填充，让该视图和任何相邻视图之间留出一些空间，或者与 windows 或 scene 的边缘保持距离。", "tips": ""}, "padding(_:_:) without any parameters puts space around all four edges. The size of the default padding varies, depending on attributes of the view and the environment where the view appears.": {"zh": "不带任何参数的 padding(_:_:) 会给周围四个边缘都添加空间。默认填充的大小会根据视图的属性和其出现的环境而变化。", "tips": ""}, "This example pads the leading edge of a train car, but not the other edges, by specifying a set that contains only leading.": {"zh": "这里通过指定一个只包含 leading 的集合来只填充火车车厢的 leading 边缘。", "tips": ""}, "This example defines a specific amount of padding in the length parameter.": {"zh": "这个例子给 length 参数指定了一个填充的数值。", "tips": ""}, "You can also use a ScaledMetric to adjust the spacing in response to font changes.": {"zh": "你也可以使用 ScaledMetric 包装器来根据字体变化调整间距。", "tips": ""}, "The effect of the padding modifier depends on which view it modifies.": {"zh": "padding 修饰符的效果取决于它修改的是哪个视图。", "tips": ""}, "Applying the padding(_:_:) modifier to the stack that contains the TrainCar views puts padding around the edges of the stack instead of between the train cars.": {"zh": "将 padding(::) 修饰符应用于包含 TrainCar 视图的 stack 上时，不会在火车车厢上添加填充，而是会在其周围边缘添加填充。", "tips": ""}, "Add a view to create space": {"zh": "添加一个用来作为间距的视图", "tips": ""}, "Besides modifying a content view to create space, you can also create space by adding an invisible view that modifies your layout without displaying any content.": {"zh": "除了修改内容视图本身来创建间距外，你还可以通过添加一个什么都不显示的不可见视图来修改布局以达到创建间距的目的。", "tips": ""}, "This Spacer() between views pushes the content views as far apart as possible.": {"zh": "这个 Spacer() 会在视图之间将它们尽可能地推开。", "tips": ""}, "You can specify a minimum width for each Spacer, or let it squish all the way to zero if the adjacent content needs all the space.": {"zh": "你可以为每个 Spacer 指定最小宽度，或者如果相邻的内容需要所有的空间，那么可以将其变成零。", "tips": ""}, "Change to a landscape orientation in the Canvas Device Settings or choose a different size device for previews to see how the width of the device changes the layout.": {"zh": "在画布设备设置中更改为横屏，或选择不同尺寸的设备进行预览，以查看设备宽度如何改变布局。", "tips": ""}, "This layout specifies an amount of space that depends on the size of a view by using the opacity modifier to create an invisible version of that view to take up the correct amount of space.": {"zh": "这个布局通过使用 opacity 修饰符创建一个不可见的视图，以占据恰当的空间，该空间量取决于视图的大小。", "tips": ""}, "A ZStack adapts to the size of its largest view, so the invisible view in this stack creates a visual appearance like padding around the middle train car.": {"zh": "ZStack 会根据最大子视图的大小进行调整，因此在这个 stack 中被隐藏的视图会创建一种类似在中部火车车厢周围填充的视觉效果。", "tips": ""}, "Section 1": {"zh": "第一节", "tips": ""}, "Section 2": {"zh": "第二节", "tips": ""}, "Section 3": {"zh": "第三节", "tips": ""}, "Section 4": {"zh": "第四节", "tips": ""}}
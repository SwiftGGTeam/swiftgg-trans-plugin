{"Driving changes in your UI with state and bindings": {"zh": "通过状态和绑定来改变你的 UI", "tips": ""}, "Indicate data dependencies in a view using state, and share those dependencies with other views using bindings.": {"zh": "通过状态在视图中来指示数据依赖关系，并通过绑定将这些依赖关系与其他视图共享。", "tips": ""}, "The user interface of a SwiftUI app is a composition of views that form a view hierarchy. Each view has a dependency on some data. As that data changes, either due to external events or because of actions taken by a person using the app, SwiftUI automatically updates the view to reflect those changes.": {"zh": "SwiftUI应用的用户界面是一组视图的组合，这些视图构成了视图的层次机构。每个视图都依赖于某些数据。当数据发生变化时，无论是由于外部事件还是由于用户在使用应用程序所进行的操作，SwiftUI 都会自动更新视图以反映这些变化。", "tips": ""}, "This sample shows examples of using State variables to indicate data dependencies, and sharing data with other views using the Binding property wrapper.": {"zh": "这个案例展示了一个使用State变量来指示数据的依赖性，以及使用 Binding 属性包装器与其他视图共享数据的例子。", "tips": ""}, "To experiment with the code, download the project files and open the sample in Xcode.": {"zh": "如果要亲自尝试代码，请下载项目文件，并在 Xcode 中打开案例。", "tips": ""}, "Separate properties and imperative code from the view": {"zh": "从视图中分离属性和指令代码", "tips": ""}, "When a view needs to manage more than a single piece of state data, it can be helpful to manage that data in a separate view-specific structure. This approach helps make the declarative interface code of a view more readable by moving properties and imperative code outside of the view. It also helps make unit testing state changes easier to implement.": {"zh": "当一个视图需要管理不止一块状态数据时，在一个视图专用的结构中管理这些数据会很有帮助。通过将属性和指令代码移到视图之外，有助于使视图的声明式界面代码更易阅读。此外，还更容易实现关于状态改变的单元测试代码。", "tips": ""}, "This sample app displays a collection of cooking recipes. A person using the app can view the details of a recipe and add new ones. To add a recipe, the sample presents the custom view RecipeEditor, which needs three pieces of state data: a recipe, a flag indicating whether to save the changes, and a flag indicating whether to present the RecipeEditor view.": {"zh": "这个案例应用展示了一个食谱的集合。使用这个应用的人可以查看食谱的详细说明并添加新的食谱。为了能使用户添加一个食谱，该案例显示了一个自定义视图 RecipeEditor，它需要三块状态数据：一个是食谱，一个用来表示是否保存更改的标志，以及一个表示是否展示 RecipeEditor 视图的标志。", "tips": ""}, "The sample app separates its state data and imperative code from RecipeEditor by defining a structure, RecipeEditorConfig.": {"zh": "这个案例应用通过定义一个结构，RecipeEditorConfig，将状态数据和指令代码与RecipeEditor分开。", "tips": ""}, "Step 1": {"zh": "第一步", "tips": ""}, "The structure RecipeEditorConfig stores the state data that the RecipeEditor view needs.": {"zh": "结构 RecipeEditorConfig 存储了 RecipeEditor 视图需要的状态数据。", "tips": ""}, "To trigger state changes that happen in the RecipeEditor view, RecipeEditorConfig provides mutating functions that update the data to reflect a new state.": {"zh": "为了触发发生在 RecipeEditor 视图中的状态变化，RecipeEditorConfig 提供了一些可变方法，用来更新数据以反映新的状态。", "tips": ""}, "Step 2": {"zh": "第二步", "tips": ""}, "The method presentAddRecipe(sidebarItem:) changes the state of the view to indicate that its editing a new recipe.": {"zh": "方法 presentAddRecipe(sidebarItem:) 用来改变视图的状态，表明正在编辑一个新的食谱。", "tips": ""}, "Note": {"zh": "注释", "tips": ""}, "The app calls this method when a person taps the Add Recipe button.": {"zh": "当用户点击“Add Recipe”按钮时，应用会调用这个方法。", "tips": ""}, "Step 3": {"zh": "第三步", "tips": ""}, "This method creates an empty recipe as the recipe to edit.": {"zh": "该方法创建了一个空的配方作为要编辑的配方。", "tips": ""}, "The static method emptyRecipe() creates a new instance of Recipe, setting its properties to the default values of a new recipe.": {"zh": "静态方法 emptyRecipe() 用于创建一个新的配方实例，并将其属性设置为新配方的默认值。", "tips": ""}, "Step 4": {"zh": "第四步", "tips": ""}, "In addition to the default values that emptyRecipes() sets, presentAddRecipe(sidebarItem:) sets the recipe’s isFavorite and collections properties based on the selected sidebar item.": {"zh": "除了 emptyRecipes() 设置的默认值外，presentAddRecipe(sidebarItem:) 还会根据选定的边栏项设置食谱的 isFavorite 和 collections 属性。", "tips": ""}, "By setting the isFavorite and collections properties, the new recipe automatically appears in the appropriate list of recipes after saving the recipe.": {"zh": "通过设置 isFavorite 和 collections 属性，新配方在保存后会自动出现在相应的配方列表中。", "tips": ""}, "Step 5": {"zh": "第五步", "tips": ""}, "presentAddRecipe(sidebarItem:) sets the shouldSaveChanges flag to false because the person using the app hasn’t indicated that they want to save the changes yet.": {"zh": "presentAddRecipe(sidebarItem:) 会将 shouldSaveChanges 标志设置为 false，因为使用该应用的人还没有表示他们想保存这些变化。", "tips": ""}, "Step 6": {"zh": "第六步", "tips": ""}, "This method sets the isPresented flag to true to tell SwiftUI to display the editor view.": {"zh": "此方法将 isPresented 标志设置为 true，以告诉SwiftUI显示编辑器视图。", "tips": ""}, "Keeping reading to learn how the recipe editor appears based on the isPresented value.": {"zh": "继续阅读以了解如何通过改变 isPresented 的值显示配方编辑器。", "tips": ""}, "Step 7": {"zh": "第七步", "tips": ""}, "The method presentEditRecipe(_:) is similar to presentAddRecipe(sidebarItem:), but for editing an existing recipe.": {"zh": "presentEditRecipe(_:) 方法与 presentAddRecipe(sidebarItem:) 类似，但用于编辑现有配方。", "tips": ""}, "Step 8": {"zh": "第八步", "tips": ""}, "Instead of creating an empty recipe like presentAddRecipe(sidebarItem:) does, presentEditRecipe(_:) receives the recipe to edit as a parameter and sets recipe to the incoming recipe.": {"zh": "presentEditRecipe(_:) 不是像是 presentAddRecipe(sidebarItem:) 那样创建一个空配方，而是接收要编辑的配方作为参数，并将 recipe 设置为这个被传入的配方。", "tips": ""}, "The RecipeEditorConfig supports two other mutating methods that trigger state changes in the editor while also separating imperative code from declarative interface code: done() and cancel().": {"zh": "RecipeEditorConfig 支持另外两个触发编辑器状态变化的可变方法，同时也将指令性代码与声明性界面代码分开：done() 和 cancel()。", "tips": ""}, "Step 9": {"zh": "第九步", "tips": ""}, "The done() method indicates that the editor should save changes made to the recipe, and dismiss the RecipeEditor view.": {"zh": "done() 方法表示编辑器应该保存对配方所做的修改，并退出 RecipeEditor 视图。", "tips": ""}, "The method sets shouldSaveChanges to true to indicate that the app should save changes made to the recipe. It also sets isPresented to false, which tells SwiftUI to dismiss the editor view.": {"zh": "该方法将 shouldSaveChanges 设置为 true，表示应用应该保存对配方的修改。它还将 isPresented 设置为 false，告诉SwiftUI取消显示编辑器视图。", "tips": ""}, "Step 10": {"zh": "第十步", "tips": ""}, "The cancel() method is similar to done(), but it sets shouldSaveChanges to false, telling the app to disregard the changes made to the recipe.": {"zh": "cancel() 方法与 done() 方法类似，但它将 shouldSaveChanges 设置为 false，告诉应用无视对配方的修改。", "tips": ""}, "The method also sets isPresented to false, which tells SwiftUI to dismiss the editor view.": {"zh": "这个方法还将 isPresented 设置为 false，这告诉SwiftUI取消显示编辑器视图。", "tips": ""}, "Bind the view to its state data": {"zh": "将视图与它的状态数据绑定", "tips": ""}, "With a structure in place that contains the data that the recipe editor needs, and methods that change the state of the editor, look at the RecipeEditor view to see how it uses RecipeEditorConfig.": {"zh": "有了一个包含配方编辑器所需数据的结构，以及一些改变编辑器状态的方法，是时候看看 RecipeEditor 视图是如何使用 RecipeEditorConfig 的。", "tips": ""}, "RecipeEditor is a structure that conforms to the View protocol.": {"zh": "RecipeEditor 是一个符合 View 协议的结构。", "tips": ""}, "The structure declares the binding variable config of type RecipeEditorConfig, which contains the state data that the view uses to determine its appearance.": {"zh": "该结构声明了一个 RecipeEditorConfig 类型的绑定变量 config，它包含了视图用来决定外观的状态数据。", "tips": ""}, "Important": {"zh": "重要提示", "tips": ""}, "The Binding property wrapper provides a two-way, read-write binding to data that the view needs. However, RecipeEditor doesn’t own the data. Instead, another view creates and owns the instance of RecipeEditorConfig that RecipeEditor binds to and uses.": {"zh": "Binding 属性包装器为视图所需的数据提供了双向的、可读写的绑定。然而，RecipeEditor 并不拥有这些数据。相反，另一个视图创建并拥有 RecipeEditorConfig 的实例，RecipeEditor 仅仅只是与之绑定并使用其数据。", "tips": ""}, "RecipeEditor contains RecipeEditorForm, which displays the input fields needed to edit recipe data.": {"zh": "RecipeEditor 包含 RecipeEditorForm，它显示了编辑配方数据所需的输入框。", "tips": ""}, "RecipeEditor passes the binding variable config to RecipeEditorForm. It passes the variable as a binding, indicated by prefixing the variable name config with the $ symbol. Because RecipeEditorForm receives config as a binding, the form can read and write data to config.": {"zh": "RecipeEditor 把绑定变量 config 传递给了 RecipeEditorForm。通过在变量名 config 前加上 $ 符号，它把这个变量作为一个绑定变量来传递。因为 RecipeEditorForm 接收 config 作为一个绑定变量，所以 RecipeEditorForm 可以向 config 读写数据。", "tips": ""}, "The editor displays a Cancel button in its toolbar.": {"zh": "编辑器在其工具栏上显示一个取消按钮。", "tips": ""}, "When a person taps the Cancel button, its action calls the mutating method cancel() defined in RecipeEditorConfig, which sets shouldSaveChanges to false and isPresented to false.": {"zh": "当一个人点击取消按钮时，它会调用 RecipeEditorConfig 中定义的可变方法 cancel()，它将 shouldSaveChanges 设置为 false，isPresented 设置为 false。", "tips": ""}, "The editor also displays a Save button that, when a person taps it, calls the mutating done() method, which sets shouldSaveChanges to true and isPresented to false, telling the app to save any changes made to the recipe and dismiss the editor view.": {"zh": "编辑器还显示一个保存按钮，当人们点击该按钮时，会调用可变方法 doed()，该方法将 shouldSaveChanges 设置为 true，将 isPresented 设置为 false，告诉应用保存对配方所做的任何修改，并退出编辑器视图。", "tips": ""}, "Settings shouldSaveChanges and isPresented in the cancel() and done() methods make the view code easier to read because each button’s action only needs one line of code. The button actions could’ve explicitly set config.saveConfig and config.isPresented, but keeping imperative code in an action to a minimum helps make the declarative interface code of the view more readable and easier to maintain.": {"zh": "在 cancel() 和 done() 方法中设置 shouldSaveChanges 和 isPresented 可以使视图代码更容易阅读，因为每个按钮的动作只需要一行代码。按钮动作也可以明确地设置 config.saveConfig 和 config.isPresented 的值，但将按钮动作中的指令性代码保持在最低限度，有助于使视图的声明性界面代码更易读，更容易维护。", "tips": ""}, "Create a state variable in another view": {"zh": "在另一个视图中创建一个状态变量", "tips": ""}, "The RecipeEditor view has a binding to an instance of RecipeEditorConfig. The editor can read and write the data but it doesn’t own the recipe data. Instead, the view ContentListView creates and owns the data, and SwiftUI manages that data for the lifespan of the content list view.": {"zh": "RecipeEditor 视图拥有一个对 RecipeEditorConfig 实例的绑定。编辑器可以读取和写入数据，但它并不拥有配方数据。相反，视图 ContentListView 创建并拥有这些数据，SwiftUI在 ContentListView 的生命周期内管理这些数据。", "tips": ""}, "ContentListView is a custom view that conforms to the View protocol and displays a list of recipes.": {"zh": "ContentListView 是一个符合 View 协议的自定义视图，它显示了一个食谱列表。", "tips": ""}, "ContentListView is also responsible for displaying the recipe editor when a person wants to add a recipe, making this view the ideal place to create an instance of RecipeEditorConfig.": {"zh": "ContentListView 还负责在人们想要添加食谱时显示食谱编辑器，这使得该视图成为创建 RecipeEditorConfig 实例的理想场所。", "tips": ""}, "The view defines the private state variable recipeEditorConfig, of type RecipeEditorConfig.": {"zh": "该视图定义了一个私有状态变量 recipeEditorConfig，类型为 RecipeEditorConfig。", "tips": ""}, "This view also displays an Add Recipe button in its toolbar.": {"zh": "该视图还在其工具栏上显示了一个添加配方按钮。", "tips": ""}, "The Add Recipe button appears as a button with a plus sign as its label.": {"zh": "添加配方按钮将显示为一个带加号标识的按钮。", "tips": ""}, "When a person taps the Add Recipe button, the button’s action calls the mutating method presentAddRecipe(sidebarItem:), which changes the data contained in recipeEditorConfig.": {"zh": "当一个人点击添加配方按钮时，该按钮的动作会调用可变方法 presentAddRecipe(sidebarItem:) ，从而改变 recipeEditorConfig 中包含的数据。", "tips": ""}, "Recall that presentAddRecipe(sidebarItem:) creates an empty recipe and sets its isFavorite and collections property values based on the selected sidebar item. The method also sets shouldSaveChanges to false and isPresented to true. Keeping this imperative code outside of the view helps make the declarative code of the view easier to understand and maintain.": {"zh": "回想一下 presentAddRecipe(sidebarItem:)，它创建了一个空的配方，并根据选定的侧边栏项目设置 isFavorite 和 collection 属性的值。该方法还将 shouldSaveChanges 设置为 false，isPresented 设置为 true。将这些命令式代码放置在视图之外有助于使视图的声明式界面代码更容易理解和维护。", "tips": ""}, "After calling presentAddRecipe(sidebarItem:), isPresented is true, which tells SwiftUI to display a sheet that contains the recipe editor.": {"zh": "调用 presentAddRecipe(sidebarItem:) 后，isPresented 将设置为 true，这会让SwiftUI显示一个包含食谱编辑器的页面。", "tips": ""}, "The Boolean value recipeEditorConfig.isPresented determines whether to present the sheet that contains the RecipeEditor view. When the value changes from false to true, the sheet presents a modal view containing RecipeEditor. When the value changes from true to false, the sheet dismisses the modal view.": {"zh": "布尔值 recipeEditorConfig.isPresented 决定了是否呈现包含 RecipeEditor 视图的弹窗。当值从 false 变为 true 时，长弹窗会呈现一个包含 RecipeEditor 的视图。当该值从 true 变为 false 时，长弹窗就会取消该视图。", "tips": ""}, "The modifier sheet(isPresented:onDismiss:content:) receives a binding as indicated by the dollar sign ($) prefix. This binding lets the sheet read and write to the property. For instance, when a person dismisses the sheet by swiping it downward, the sheet sets recipeEditorConfig.isPresented to false. This change causes SwiftUI to reinitialize and rebuild the view. And because isPresented is now false, the sheet no longer appears.": {"zh": "修饰器 sheet(isPresented:onDismiss:content:) 接收一个由美元符号（$）前缀表示的绑定。这个绑定让长弹窗可以读取和写入其中的属性。例如，当一个人向下轻扫长弹窗时，长弹窗会将 recipeEditorConfig.isPresented 设置为 false。这一变化导致SwiftUI重新初始化并重建视图。由于 isPresented 现在是 false，长弹窗不再出现。", "tips": ""}, "The sheet contains RecipeEditor, a custom view that displays a form containing input fields that let a person change the data of a recipe.": {"zh": "该长弹窗包含 RecipeEditor，这是一个自定义视图，显示了一个包含一些用于让人改变食谱数据的输入框的表单。", "tips": ""}, "RecipeEditor receives a binding to recipeEditorConfig — as indicated by the dollar sign ($) prefix — which makes it possible for the editor to retrieve and make changes to data contained in recipeEditorConfig. This includes changing recipe data and triggering state changes.": {"zh": "RecipeEditor 收到了一个与 recipeEditorConfig 的绑定 -- 如美元符号（$）前缀所示 -- 这使得编辑器可以获取和改变 recipeEditorConfig 中包含的数据。这包括改变配方数据和触发状态变化。", "tips": ""}, "When the value of isPresented changes from true to false, the sheet calls its onDismiss action, which calls the didDismissEditor method.": {"zh": "当 isPresented 的值从 true 变为 false 时，长弹窗就会调用它的 onDismiss 动作，即调用 didDismissEditor 方法。", "tips": ""}, "The sheet also calls onDismiss when isPresented changes from true to false in the cancel() and done() methods that RecipeEditorConfig defines. The sheet is able to detect the value change because it has a binding to the recipeEditorConfig.isPresented property.": {"zh": "当 isPresented 在 RecipeEditorConfig 定义的 cancel() 和 done() 方法中从 true 变为 false 时，长弹窗也会调用 onDismiss。长弹窗能够检测到这个值的变化，因为它与 recipeEditorConfig.isPresented 属性有一个绑定。", "tips": ""}, "This view implements the didDismissEditor method, which saves the changes a person makes to the recipe if recipeEditorConfig.shouldSaveChanges is true; otherwise, the method disregards the changes.": {"zh": "这个视图实现了 didDismissEditor 方法，如果r ecipeEditorConfig.shouldSaveChanges 为 true，该方法将保存一个人对配方所做的修改；否则，该方法将不考虑这些修改。", "tips": ""}, "RecipeEditorConfig concerns itself with RecipeEditor and only that view, which is why ContentListView implements the didDismissEditor method instead of RecipeEditorConfig. This approach keeps the areas of concern separate.": {"zh": "RecipeEditorConfig 与 RecipeEditor 有关，并且仅与该视图有关，这就是为什么 ContentListView 实现了 didDismissEditor 方法，而不是 RecipeEditorConfig。这种方式使关注的领域分开。", "tips": ""}, "Creating a custom input control that binds to a value": {"zh": "创建一个与值绑定的自定义输入控件", "tips": ""}, "Provide interactions that are unique to your app with custom controls that bind to a value.": {"zh": "通过绑定到一个值的自定义控件，提供你应用所特有的交互方式。", "tips": ""}, "The recipeEditorConfig declaration includes the attribute for the State property wrapper, which tells SwiftUI to create and manage the instance of RecipeEditorConfig. Each time view state changes, that is, data that recipeEditorConfig contains changes, SwiftUI reinitializes the view, reconnects the RecipeEditorConfig instance to the view, and rebuilds the view defined in the computed body property, which reflects the current state of the data. For more information, see Model data.": {"zh": "recipeEditorConfig 声明包括State属性包装器，它让SwiftUI创建并管理 RecipeEditorConfig 的实例。每次视图状态发生变化，即 recipeEditorConfig 包含的数据发生变化时，SwiftUI都会重新初始化视图，将 RecipeEditorConfig 实例重新连接到视图，并重新构建计算属性中定义的视图，使其反映数据当前的状态。想要了解更多信息，请参考模型数据。", "tips": ""}, "When presentAddRecipe(sidebarItem:) changes the data in recipeEditorConfig, SwiftUI reinitializes the ContentListView instance and reconnects recipeEditorConfig to the instance that it’s managing. SwiftUI then rebuilds the view from its computed body property so that the view reflects the current state of the data.": {"zh": "当 presentAddRecipe(sidebarItem:) 更改 recipeEditorConfig 中的数据时，SwiftUI 会重新初始化 ContentListView 实例，并将 recipeEditorConfig 重新连接到它所管理的实例。然后，SwiftUI从其计算属性 body 中重建视图，以使视图反映数据的当前状态。", "tips": ""}}
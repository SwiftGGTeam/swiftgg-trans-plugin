{"Exploring the structure of a SwiftUI app": {"zh": "探索 SwiftUI app 的结构", "tips": ""}, "Walk through code that explores the structure of a SwiftUI app.": {"zh": "跟着代码逐步探索 SwiftUI app 的结构", "tips": ""}, "SwiftUI is a declarative framework that helps you compose the user interface of your app. The principle building blocks that form the structure of a SwiftUI app are the App, Scene, and View protocols. This sample introduces you to these protocols by walking through lines of code, and explaining what’s happening and why.": {"zh": "SwiftUI 是一个声明式框架，可帮助您构建应用程序的用户界面。构成 SwiftUI 应用程序结构的主要部分是 App、Scene 和 View protocol（协议）。本示例通过逐行代码去介绍这些协议，以及解释正在发生的事情以及原因。", "tips": ""}, "To experiment with the code, download the project files and open the sample in Xcode.": {"zh": "若要尝试代码，下载项目文件并在 Xcode 中打开示例。", "tips": ""}, "App structure": {"zh": "App 结构体", "tips": ""}, "An app structure describes the content and behavior of your app, and each SwiftUI app has one and only one main app structure. This sample defines its app structure in the MyApp.swift file. Let’s take a look at the contents of that file.": {"zh": "App 结构描述了 App 内的内容和您 App 的各种行为，每个 SwiftUI App 有且仅有一个主 App 结构。这个示例在 MyApp.swift 文件中定义了它的 App 结构。让我们看一看这个文件里的内容。", "tips": ""}, "Step 1": {"zh": "第 1 步", "tips": ""}, "To access the symbols and features of SwiftUI, the app uses an import declaration to import the SwiftUI framework.": {"zh": "为了使用 SwiftUI 的符号和功能，App 使用 import 声明来导入 SwiftUI 框架。", "tips": ""}, "Note": {"zh": "注释", "tips": ""}, "For more information, see Import Declaration in The Swift Programming Language.": {"zh": "更多的相关信息，请参阅 The Swift Programming Language 中的 Import Declaration 部分。", "tips": ""}, "Step 2": {"zh": "第 2 步", "tips": ""}, "To indicate the entry point of the SwiftUI app, the sample applies the @main attribute to the app structure.": {"zh": "为了标示 SwiftUI app 的入口点，示例项目将 @main 属性应用于 app 结构体。", "tips": ""}, "The entry point is responsible for the start up of the app.": {"zh": "入口点负责 app 的启动。", "tips": ""}, "Important": {"zh": "重要提示", "tips": ""}, "A SwiftUI app contains one and only one entry point. Attempting to apply @main to more than one structure in the app results in a compiler error.": {"zh": "一个 SwiftUI app 包含一个且仅包含一个入口点。尝试将 @main 在 app 内应用到多于一个结构体的位置会导致编译错误。", "tips": ""}, "Step 3": {"zh": "第 3 步", "tips": ""}, "The MyApp structure conforms to the App protocol, and provides the content of the app and its behavior.": {"zh": "MyApp 结构体遵循 App 协议，并提供了 App 的内容和这个 App 的行为。", "tips": ""}, "Step 4": {"zh": "第 4 步", "tips": ""}, "The structure implements the computed property body, which is a requirement of the App protocol.": {"zh": "该结构体内实现了计算属性 body，这是为了遵循 App 协议。", "tips": ""}, "This property returns the contents of your app described as a Scene. A scene contains the view hierarchy that defines the app’s user interface. SwiftUI provides different types of scenes including WindowGroup, Window, DocumentGroup, and Settings.": {"zh": "这个属性返回了一个被称为 Scene（场景）的东西，他描述了 app 内的内容。一个 scene（场景）包含了视图层次结构，定义了 app 的用户界面。SwiftUI 提供了不同的 scene（场景），包括 WindowGroup（窗口组），Window（窗口），DocumentGroup（文档组） 和 Settings（设置）。", "tips": ""}, "Step 5": {"zh": "第 5 步", "tips": ""}, "This sample uses a WindowGroup scene to represent the main window that the app displays.": {"zh": "这个示例使用了一个 WindowGroup（窗口组）场景来展示应用显示的主窗口。", "tips": ""}, "SwiftUI provides platform-specific behaviors for WindowGroup. For instance, in macOS and iPadOS, a person can open more than one window from the group. And in macOS, a person can combine multiple instances of the window group into a set of tabs.": {"zh": "SwiftUI 的 WindowGroup 为不同的平台提供了不同的表现方式。例如，在 macOS 和 iPadOS 中，一个用户可以从 group（组）内打开多个 window（窗口）。并且在 macOS 上，可以将多个窗口 group（组）的实体放到一个多标签页集合中。", "tips": ""}, "Tip": {"zh": "提示", "tips": ""}, "If you’re creating a document-based app such as a word processor or text editor, you can use the DocumentGroup scene to open, save, and edit documents. For more information, see Building a Document-Based App with SwiftUI.": {"zh": "如果你要创建一个基于文档的 app，例如文字处理器或文本编辑器，你可以使用 DocumentGroup（文档组）scene（场景）来打开，保存，编辑文档。更多的相关信息，请参阅文章 - Building a Document-Based App with SwiftUI（利用 SwiftUI 创建一个基于文档的 App）。", "tips": ""}, "Step 6": {"zh": "第 6 步", "tips": ""}, "The scene contains ContentView, a custom view that creates a view hierarchy that consists of an image and text.": {"zh": "scene（场景）包含 ContentView（内容视图），他是一个自定义 view（视图），用于创建一个包含图像和文本的视图层次结构。", "tips": ""}, "Keep reading to learn how ContentView composes the view hierarchy.": {"zh": "继续阅读以了解 ContentView（内容视图）是如何建立 view hierachy（视图树）的。", "tips": ""}, "Content view": {"zh": "内容视图", "tips": ""}, "In SwiftUI, a scene contains the view hierarchy that an app displays as its user interface. A view hierarchy defines the layout of views relative to other views. In this sample, a WindowGroup scene contains the view hierarchy that ContentView composes using other views.": {"zh": "SwiftUI 中，一个 scene（场景）内包含了 app 所显示 UI 的视图层次结构。视图的层次结构定义了该视图相对于其他视图的布局。在这个示例中，一个 WindowGroup（窗口组）scene（场景）包含了视图的层次结构，即 ContentView（内容视图）通过组合其他视图而成。", "tips": ""}, "The source code begins by importing the SwiftUI framework.": {"zh": "源代码从导入 SwiftUI 框架开始。", "tips": ""}, "Without the import declaration, ContentView wouldn’t have access to symbols in SwiftUI.": {"zh": "如果没有 import 导入声明，ContentView 将无法访问 SwiftUI 中的相关内容。", "tips": ""}, "ContentView is a structure that conforms to the View protocol.": {"zh": "ContentView 是遵循 View protocol（协议）的 struct（结构体）。", "tips": ""}, "A view defines one or more visual elements that appear somewhere on a screen. A view is typically made up of other views, creating a view hierarchy.": {"zh": "view（视图）定义了一个或多个出现在屏幕上的可见元素。view（视图）通常由其他视图构成，最终形成 view hierarchy（视图树）。", "tips": ""}, "Implementing body is a common pattern that you see throughout your SwiftUI code; for instance, when a structure conforms to protocols such as App, Scene, and View.": {"zh": "在编写 SwiftUI 代码的过程中，在结构体中实现 body（主体）属性，是一种非常常见的模式；例如，当结构体遵循 App，Scene，View 协议时，内部都要实现 body（主体）属性。", "tips": ""}, "ContentView contains the SwiftUI-provided view VStack, which arranges subviews vertically.": {"zh": "ContentView（内容视图）内包含了 SwiftUI 提供的视图 VStack（垂直堆栈），用于垂直整理子视图。", "tips": ""}, "A VStack simultaneously renders any on- or off-screen views it contains. Using VStack is ideal when you have a small number of subviews. However, if your app needs to display many more subviews, consider using LazyVStack, which only renders the views when the app needs to display them onscreen.": {"zh": "VStack（垂直堆栈）同时渲染它所包含的任意屏幕上或屏幕外的视图。当你有少量的子视图时，用 VStack（垂直堆栈）是最合适的。然而，如果你的 app 需要展示更多的子视图，考虑使用 LazyVStack（惰性垂直堆栈），他只在 app 需要在屏幕上展示对应视图时才进行渲染。", "tips": ""}, "Experiment": {"zh": "实践", "tips": ""}, "Replace VStack with either HStack or LazyHStack to arrange subviews horizontally.": {"zh": "将 VStack（垂直堆栈）替换成 HStack（水平堆栈）或 LazyHStack（惰性水平堆栈），以水平整理子视图。", "tips": ""}, "The first subview in VStack is Image, a view that displays an image.": {"zh": "VStack（水平堆栈）内第一个子视图是 Image（图像），这个视图用于展示图片。", "tips": ""}, "The sample displays an image of a globe using the initializer method init(systemName:). This method creates an image view that displays a system symbol image. Symbol images like globe come from SF Symbols, a library of icons that you can use in your app.": {"zh": "示例中使用初始化方法 init(systemName:) 展示了一个地球图片。这个方法创建了一个展示系统符号的图像视图。如展示中的地球，以及其他的符号图片都来自 SF Symbols，这是一个包含丰富 icon（图标）的库，你都可以在你的 app 内使用。", "tips": ""}, "ContentView applies the view modifier imageScale(_:) to the image view to scale the image within the view to the relative size Image.Scale.large.": {"zh": "ContentView（内容视图）内添加了 imageScale(_:)（可调整图片缩放）视图修饰符，可以将图片缩放到相对大小的尺寸，如 Image.Scale.large。", "tips": ""}, "Change Image.Scale.large to another scale size. For a list of sizes, see Image.Scale.": {"zh": "将 Image.Scale.large 替换成另外的缩放尺寸。有关尺寸列表，请参阅 Image.Scale。", "tips": ""}, "Step 7": {"zh": "第 7 步", "tips": ""}, "The foregroundColor(_:) modifier adds color to the image view.": {"zh": "foregroundColor(_:) 修饰符能给 image view（图像视图）添加颜色。", "tips": ""}, "In this sample, ContentView applies the semantic color accentColor, which reflects the accent color of the system or app. To learn more about color representations, see Color.": {"zh": "在此示例中，ContentView（内容视图）应用了语义颜色：accentColor（强调色），它反映了系统或 app 的强调色。要了解有关颜色的更多信息，请参阅 Color", "tips": ""}, "Step 8": {"zh": "第 8 步", "tips": ""}, "The second subview of VStack is Text, a view that displays one or more lines of read-only text.": {"zh": "VStack（垂直堆栈）的第二个子视图是 Text（文本），该视图能够展示一行或多行只读文本。", "tips": ""}, "Replace “Hello, world!” with “Hello, your name!” or other text.": {"zh": "将 \"Hello, world\" 替换成 \"Hello, your name!\" 或其他文本。", "tips": ""}, "Step 9": {"zh": "第 9 步", "tips": ""}, "ContentView applies the padding(_:_:) modifier to the VStack, adding a platform-specific default amount of padding — that is, space — to the edges of the VStack view.": {"zh": "ContentView（文本视图）将 padding(_:_:)（填充）修饰符应用于 VStack（垂直堆栈），为 VStack 视图的边缘添加了针对不同平台进行调整的默认的 padding（填充），也可以理解成为 VStack 视图的边缘添加了空间。", "tips": ""}, "You can specify which edges and amount of padding to apply by providing edges and length parameter values; for example, padding([.bottom, .trailing], 20). Change the padding edges and amount or comment the line of code to see what effect it has on the view.": {"zh": "你可以通过提供 edges（边缘）和 length（长度）来指定要应用到的特定边缘和其特定的填充量；例如，padding([.bottom, .trailing], 20)。尝试更改边缘和长度或注释掉代码，看看它对视图的影响。", "tips": ""}, "Step 10": {"zh": "第 10 步", "tips": ""}, "When you run the sample app, it displays the scene that contains the view hierarchy described in ContentView.": {"zh": "当你运行示例 App，他会展示 scene（场景），该场景包含 ContentView 里所描述的 view hierachy（视图树）", "tips": ""}, "Build and run the sample using Xcode. Then play around with code by following the suggested experiments mentioned in the previous steps.": {"zh": "使用 Xcode 编译并运行示例。然后按照前面步骤中提到的建议的实践内容，尝试编写一下代码。", "tips": ""}, "Specifying the view hierarchy of an app using a scene": {"zh": "使用 scene（场景）指定 app 的 view hierarchy（视图树）", "tips": ""}, "A scene contains the view hierarchy of your app.": {"zh": "scene（场景）内包含 app 的 view hierachy（视图树）。", "tips": ""}, "ContentView implements the computed property body, just like the ‘MyApp’ structure does in the previous section.": {"zh": "ContentView（内容视图）内实现了 computed property（计算属性）body，就像前面章节里 MyApp 中的结构体一样。", "tips": ""}, "Change the foreground color to another semantic color such as primary or a standard color like teal.": {"zh": "将前景色更改为其他 semantic color（语义颜色），例如 primary（基础色）或 teal（蓝绿色）", "tips": ""}}
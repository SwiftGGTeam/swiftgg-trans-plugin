{"Maintaining the adaptable sizes of built-in views": {"zh": "保持内建视图的可自适应尺寸", "tips": ""}, "Keep your app’s view layouts fluid on any device for each type of content your app displays.": {"zh": "对于每种在你 app 上显示的内容类型，确保其视图布局可以灵活地适应任何设备。", "tips": ""}, "The views you define with SwiftUI either directly contain views that SwiftUI provides, or use other custom views that contain these built-in views. SwiftUI views determine their own size, and understanding how to modify the size of built-in views while preserving their adaptability is the best way to create a fluid layout without complicating your code.": {"zh": "你在 SwiftUI 中定义的视图要么直接使用 SwiftUI 内置的视图，要么使用那些包含这些内置视图的其他自定义视图。 而创建灵活布局，并且不会使代码复杂化的最佳方式，就是让 SwiftUI 的视图自己决定其自身的大小，以及需要理解在保持其可自适应的同时如何修改内置视图的尺寸。", "tips": ""}, "Text and symbols": {"zh": "文本和符号", "tips": ""}, "When defining the layout for your app, text and symbols play a central role in conveying information to people – in navigation links, button labels, tables, and more. Text and symbols that display information or label other elements need to have enough space to display their contents.": {"zh": "在定义你 app 的布局时，例如在导航链接、按钮标签、表格等向人们传达信息这一方面，文本和符号起到了核心的作用。当文本和符号为了显示信息或标记其他元素时，需要有足够的空间来显示其内容。", "tips": ""}, "Text": {"zh": "文本", "tips": ""}, "A Text view displays read-only text. Its contents could be a short String, like the title of a play or the heading of a section. A Text view could also display a much longer String, like all of the actors’ lines for a scene in the play.": {"zh": "Text 视图被用来显示只读的文本。它的内容即可以是像戏剧的名字或章节的标题一样的短字符串，也可以用来显示一段非常长的字符串，比如戏剧中一场戏里所有演员的台词。", "tips": ""}, "When you declare a Text view in your layout, give the system semantic information about your text with the Font attribute. The system chooses font faces and sizes so that, for example, a Text with the title font is more prominent than one with body or caption.": {"zh": "当你在布局中声明一个 Text 视图时，可以使用 Font 属性来向系统提供关于文本的语义信息。系统会根据这个属性选择字体样式和大小，例如，使用 title 字体的文本就会比使用 body 或 caption 字体的文本更加显眼。", "tips": ""}, "A Text view can adjust to some space constraints with line-wrapping or truncation, but it doesn’t change font size to accommodate situations where its ideal size is smaller or larger than the available space.": {"zh": "Text 视图可以通过换行或截断来适应一些空间上的限制，但它不会改变字体大小以适应其理想尺寸与可用空间不匹配的情况。", "tips": ""}, "For more information about localization, see Preparing views for localization. For guidance about supporting Dynamic Type, see Applying custom fonts to text.": {"zh": "想了解更多关于本地化的信息，请参考 \"Preparing views for localization\"。请参考 \"Applying custom fonts to text\" 相关内容，以获取关于支持动态字体的指导", "tips": ""}, "Symbols": {"zh": "符号", "tips": ""}, "Symbols, such as the iconography that SF Symbols provides, can denote common app features, like folders, heart shapes for favorites, or a camera icon to access the camera. Effective symbols streamline your app’s UI, and are easily recognizable by the people who use your app. You can customize their colors and sizes using standard view modifiers provided in SwiftUI. Even though you specify a system or custom symbol in an Image, treat SF Symbols more like text. To adjust the size and weight of a symbol, specify a semantic Font, like title, just like you would for a Text view.": {"zh": "就像 SF Symbols 提供了很多图标一样，符号可以用来表示一些常见的 app 功能，例如：文件夹、用来表示收藏的心形形状、或用来访问相机的相机图标。 对于那些使用你 app 的人来说，有效的图标不但能简化界面，还能让人轻松地识别出它。你可以使用 SwiftUI 已经提供的那些视图修饰符来自定义它们的颜色和大小。 尽管你是把系统（例如 SF Symbols）或自定义的符号放在一个 Image 视图里，但在使用上更像是操作文本。 要调整符号的大小和粗细，就得像之前为 Text 视图所做的那样，通过设置 Font 属性来达到目的，例如设置其为 title。", "tips": ""}, "The following example uses an HStack to create a row of three Image views that display icons from SF Symbols.": {"zh": "以下示例使用了 HStack 创建了一行包含三个 Image 视图的布局，每个视图显示一个来自 SF Symbols 的图标。", "tips": ""}, "Labels": {"zh": "标签", "tips": ""}, "To use both text and a symbol to represent a single element in your app, use a Label. A Label takes care of matching its title and icon sizes and their alignment. The following code defines a Label that combines an SF Symbol of some books, with some text for its title. The Label applies the largeTitle font to both the icon and the title. The titleAndIcon style tells the view to display both its title and icon, overriding any built-in or custom LabelStyle that a containing view might specify.": {"zh": "要想在 app 中把文本和符号组合表示成单个界面元素的话，我们可以使用 Label。Label 负责处理标题和图标的大小以及它们的对齐方式。 以下代码定义了一个 Label，它用某个名为 books 的 SF Symbol 符号作为图标，以及若干文字作为标题。这个 Label 将 largeTitle 字体应用到图标和标题上。 titleAndIcon 样式则告诉视图同时显示标题和图标，并且覆盖掉任何内置或父视图可能指定的自定义 LabelStyle 属性。", "tips": ""}, "Controls": {"zh": "控件", "tips": ""}, "Views that people interact with come in discrete sizes, to maintain consistency when several elements of the same type appear together, like in a Settings pane. Controls also need to be large enough for people to accurately click or tap. You can use view modifiers to choose among these sizes. For example, you can use the controlSize(_:) modifier to make a control smaller or larger, or you can use the progressViewStyle(_:) modifier to choose a linear or circular appearance for a progress bar.": {"zh": "人们与之交互的视图都具有各自的尺寸，例如在设置面板中，当同一类型的多个界面元素一起出现时要保持其一致性。控件同样也需要足够大，以便人们能够准确地点击或触摸。你可以使用视图修饰符在多个尺寸之间进行选择。 例如，可以使用c ontrolSize(:) 修饰符使控件变小或变大，或可以使用 progressViewStyle(:) 修饰符为进度条选择线性或圆形外观。", "tips": ""}, "The following example shows a Picker and a Button with different ControlSize values.": {"zh": "以下示例展示了具有不同 ControlSize 值的一个 Picker 和一个 Button。", "tips": ""}, "There are general-purpose controls like Menu and Link, and specialized views like EditButton and ColorPicker. Use these views to provide familiar UI elements rather than creating custom controls that you’ll need to maintain. To explore more of these built-in views, see Controls and indicators.": {"zh": "系统不但提供了例如 Menu 和 Link 这样的通用控件，也有像是 EditButton 和 ColorPicker 这样的专用视图。使用这些视图来提供令人熟悉的界面元素，而不是创建需要你自己维护的自定义控件。要了解更多关于这些内置视图的内容，请参阅 \"Controls and indicators\"", "tips": ""}, "Images and shapes": {"zh": "图片和形状", "tips": ""}, "Graphical elements, such as images and shapes, can add a level of visual enhancement for your app. These can vary from product images for a shopping app, achievements for a game, or a dynamic background pattern you create by layering and aligning various shapes.": {"zh": "像是图片和形状这样的图形元素，可以为你的 app 提升视觉效果。这些可以是某个购物 app 的产品图片、游戏中的成就、或通过叠加和对齐各种形状而创建的动态背景图案。", "tips": ""}, "Images": {"zh": "图片", "tips": ""}, "Display photos and other rich graphics in an Image. By default, an Image displays at the asset’s original size. You can add modifiers like resizable(capInsets:resizingMode:) and scaledToFit() or scaledToFill() to scale it to the available space.": {"zh": "你可以使用 Image 来显示照片和其他丰富的图形内容。默认情况下，Image 会显示资源的原始尺寸。 你可以添加像是 resizable(capInsets:resizingMode:)、scaledToFit()或scaledToFill() 这样的修饰符，将其缩放到适合的尺寸。", "tips": ""}, "If you’re accessing an image asset from a server, use an AsyncImage to handle the download while keeping your app responsive.": {"zh": "如果你要访问服务器上的图片资源，那么为了保持 app 的响应性，请使用 AsyncImage 来处理下载操作。", "tips": ""}, "For more information about working with images, see Fitting images into available space.": {"zh": "有关使用图像的更多信息，请参阅 \"Fitting images into available space\"。", "tips": ""}, "Shapes": {"zh": "形状", "tips": ""}, "SwiftUI provides several common shapes, and modifiers to change their size, color, or other aspects of their appearance. Use a single shape or a composition of multiple shapes to create a background, border, or other visual element. You can define a shape’s size with a modifier like frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:), or allow it to fill all available space.": {"zh": "SwiftUI 提供了几种常见的形状，并提供修改器来改变大小、颜色或外观的其他方面。可以使用单个形状或组合多个形状，来创建背景、边框或其他视觉元素。 你可以使用 frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) 等修饰器来定义形状的大小，或允许它填充所有可用空间。", "tips": ""}, "The following example shows three different shapes. The foregroundColor(_:) on each shape customizes that shape’s fill color. The RoundedRectangle includes values for the cornerRadius and style parameters to define the rounded corners. The HStack provides some default spacing between each shape and, to give each shape a square space to fill, the aspectRatio(_:contentMode:) modifier makes the HStack three times as wide as it is tall.": {"zh": "以下示例展示了三种不同的形状。每个形状都用 foregroundColor(_:) 自定义了填充色。RoundedRectangle 为了定义圆角，在初始化方法中指定了 cornerRadius 和 style 参数。 HStack 为每个形状之间提供了默认的间距，并且为了每个形状的填充区域都是正方形，使用了 aspectRatio(:contentMode:) 修饰符使得宽度是高度的三倍。", "tips": ""}, "For an example of the rich possibilities of composing shapes, see Drawing Paths and Shapes.": {"zh": "有丰富的可能性来组合形状，要了解其有关示例的话，请参阅 \"Drawing Paths and Shapes\"。", "tips": ""}}
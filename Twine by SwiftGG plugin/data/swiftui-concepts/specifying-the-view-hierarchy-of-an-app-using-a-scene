{"Note": {"zh": "注释", "tips": ""}, "To experiment with the code, download the project files and open the sample in Xcode.": {"zh": "下载项目文件并在 Xcode 中打开示例，以尝试代码。", "tips": ""}, "Refactor the code to use custom scenes": {"zh": "重构代码以使用 custom scenes（自定义场景）", "tips": ""}, "A scene contains the view hierarchy of your app.": {"zh": "scene（场景）包含了 app 的 view hierachy（视图树）。", "tips": ""}, "Let’s look at the view hierarchy the sample defines for macOS.": {"zh": "让我们看看示例中为 macOS 定义的 view hierarchy（视图树）。", "tips": ""}, "The iPhone version of the app displays a scene with a tabbed user interface, while the Mac version displays a scene with split view interface. The Mac app also displays the secondary scene Settings when you select the Preferences item under the app menu.": {"zh": "iPhone 版本的 app 显示了一个带有 tabbed user interface（选项卡式用户界面）的 scene（场景），而 Mac 版本显示了一个带有 split view interface（分割视图界面）的 scene（场景）。当你在 Mac app 菜单下选择 Preferences（偏好设置）项时，还会显示 secondary scene（次要场景）Settings（设置）。", "tips": ""}, "Step 5": {"zh": "第 5 步", "tips": ""}, "To describe the scene that displays on iOS devices, the sample includes the custom scene MyScene, which is a structure that conforms to the Scene protocol.": {"zh": "为了描述在 iOS 设备上显示的 scene（场景），示例包含了一个自定义 scene（场景） MyScene，这个结构体遵循了 Scene protocol（场景协议）。", "tips": ""}, "To compile the first view hierarchy for iOS, the sample uses a platform conditional compilation block that tells the Swift compiler to compile the code only when the target platform is iOS.": {"zh": "为了在 iOS 上编译第一个 view hierarchy（视图树），示例内使用了 platform conditional compilation block（平台条件编译块），它告诉 Swift 编译器只在目标平台为 iOS 时才编译这部分代码。", "tips": ""}, "Unlike the previous hierarchy, the root node of this hierarchy is the custom view, AlternativeContentView.": {"zh": "不像之前的 hierarchy（视图树），这个 hierarchy（视图树）的根节点是一个自定义视图 AlternativeContentView。", "tips": ""}, "Specifying the view hierarchy of an app using a scene": {"zh": "使用 scene（场景）指定 app 的 view hierarchy（视图树）", "tips": ""}, "However, after refactoring the code, the MyApp structure is easier to read and maintain.": {"zh": "然而，在重构代码之后，MyApp 结构体更易读，更易维护。", "tips": ""}, "Each of these views apply the tabItem(_:) modifier, which tells the TabView the image and text to display in each tab.": {"zh": "这些视图都应用了 tabItem(_:)（选项卡项）修饰符，它告诉 TabView 在每个选项卡中显示的图像和文本。", "tips": ""}, "The source code in the MyApp structure does the job of defining view hierarchies different versions of the sample app, but the code is lengthy making it difficult to maintain. One improvement that can help make the code more readable and easier to maintain is to use custom scenes. A custom scene is one that you compose from other scenes.": {"zh": "MyApp 结构体内的代码起到了定义不同示例 app 版本的 view hierarchies（视图树）的作用，但是代码冗长，难以维护。我们可以使用 custom scenes（自定义场景）使代码更易读，更易维护。custom scene（自定义场景）是由其他场景组成的场景。", "tips": ""}, "Keep your app’s view layouts fluid on any device for each type of content your app displays.": {"zh": "使你的 app 的视图布局，内容，在任何设备上都能流畅显示。", "tips": ""}, "Step 6": {"zh": "第 6 步", "tips": ""}, "The root node of the view hierarchy is TabView, a container view that provides tabs that people can use to switch between different subviews.": {"zh": "view hierarchy（视图树）的根结点是 TabView，它是一个视图容器，提供了 tabs（选项卡），用户可以使用它们在不同的子视图之间切换。", "tips": ""}, "Create custom scenes": {"zh": "创建自定义场景", "tips": ""}, "Experiment": {"zh": "实践", "tips": ""}, "Here’s the view hierarchy discussed in the previous section.": {"zh": "这是上一节中讨论的 view hierarchy（视图树）。", "tips": ""}, "A structure that conforms to Scene must implement the computed property body, just like structures that conform to the App protocol do.": {"zh": "遵循 Scene protocol（场景协议）的结构体必须实现 computed property body（计算属性 - 主体），如同符合 App protocol（应用程序协议）的结构体。", "tips": ""}, "Define another view hierarchy": {"zh": "定义另一个 view hierarchy（视图树）", "tips": ""}, "The code for this scene is the same code from the MyApp structure, discussed in the Define another view hierarchy section.": {"zh": "在这个 scene（场景）内的代码和在 Define another view hierarchy（定义另一个视图树）章节中讨论的 MyApp 结构体内的代码是一样的。", "tips": ""}, "Here’s how the scenes appear when you run the app on iPhone and Mac.": {"zh": "以下是在 iPhone 和 Mac 上运行 app 时的场景。", "tips": ""}, "The computed body property can return one or more primary and secondary scenes.": {"zh": "computed body property（计算的 body 属性）可以返回一个或多个主要场景和次要场景。", "tips": ""}, "The MyApp structure implements the computed property body, which returns a scene.": {"zh": "MyApp struct（结构体）实现了 body computed property（计算属性），该属性返回一个 scene（场景）。", "tips": ""}, "A conditional compilation block tells the Swift compiler to conditionally compile the code block depending on the value of one or more compilation conditions. For more information about conditional compilation blocks, see Compiler Control Statements": {"zh": "conditional compilation block（条件编译块）告诉 Swift 编译器根据一个或多个编译条件来编译代码块。有关条件编译块的更多信息，请参阅 Compiler Control Statements（编译器控制语句）。", "tips": ""}, "For macOS, the sample includes another custom scene, MyAlternativeScene, which is another structure that conforms to Scene.": {"zh": "对于 macOS，该示例包含另一个自定义场景 - MyAlternativeScene，这是另一个遵循 Scene（场景协议）的结构体。", "tips": ""}, "This approach can make the implementation of computed property body more difficult to maintain.": {"zh": "这种实现方法使计算属性 body 变得难以维护。", "tips": ""}, "It too implements the computed body property.": {"zh": "他也实现了 computed body property（计算属性 - 主体）。", "tips": ""}, "The sample defines the other view hierarchy in a WindowGroup scene.": {"zh": "示例定义了 WindowGroup scene（窗口组场景）中的其他 view hierarchy（视图树）。", "tips": ""}, "Step 8": {"zh": "第 8 步", "tips": ""}, "Step 3": {"zh": "第 3 步", "tips": ""}, "This sample uses a journaling app as an example. To describe the view hierarchy of the app’s user interface, the MyApp structure declares a scene and its contents. Let’s take a look at the structure and its scene.": {"zh": "此示例以一个日记 app 作为例子。为了描述 app 用户界面的 view hierarchy（视图树），MyApp struct（结构体）声明了一个 scene（场景）及其内容。让我们看看这个 struct 和它的 scene。", "tips": ""}, "The Settings scene is only available in macOS.": {"zh": "设置场景（Settings scene）仅在 macOS 中可用。", "tips": ""}, "Step 4": {"zh": "第 4 步", "tips": ""}, "The TabView contains two subviews, ContentView and SettingsView.": {"zh": "TabView（标签页视图）包含了两个子视图，ContentView（内容视图）和 SettingsView（设置视图）。", "tips": ""}, "Maintaining the adaptable sizes of built-in views": {"zh": "维护自适应尺寸的视图", "tips": ""}, "The sample defines the view hierarchy using a WindowGroup scene that contains a TabView. In turn, the TabView contains two subviews: ContentView and SettingsView.": {"zh": "示例内利用 WindowGroup scene 定义了 view hierarchy（视图树），其中包含了 TabView（标签页视图）。TabView 内也包含了两个子视图，ContentView（内容视图） 和 SettingsView（设置视图）。", "tips": ""}, "SwiftUI provides building blocks that help you create the user interface of your app. One of those building blocks is Scene, which contains a view hierarchy that defines the user interface of your app. You can specify your app’s view hierarchy in a scene that SwiftUI provides, or you can create a custom scene. This tutorial walks you through both approaches.": {"zh": "SwiftUI 提供了 building blocks（构建块）来帮助你创建 app 的用户界面。其中之一就是 Scene，它包含了定义你 app 用户界面的 view hierachy（视图树）。你可以在 SwiftUI 提供的 scene（场景）指定你 app 的 view hierachy，也可以创建一个自定义的 scene。本教程将引导你完成这两种方法。", "tips": ""}, "The root node of the previous view hierarchy is the container view, TabView.": {"zh": "前面提到的 view hierarchy（视图树）的根节点是一个叫 TabView（标签页视图）的容器视图。", "tips": ""}, "Both are custom views. ContentView displays a list of journal entries, and SettingsView displays other views that let people edit the settings for the app, such as the account associated with the journal.": {"zh": "两个视图都是自定义视图。ContentView（内容视图）展示了日记 app 记录的列表，同时 SettingsView（设置视图）展示了能够让用户编辑 app 内设置的视图，如设置与日记关联的账户。", "tips": ""}, "Add a scene to the app": {"zh": "在 app 内添加 scene（场景）。", "tips": ""}, "The sample uses the secondary scene Settings to provide a Settings menu item that’s available in the app menu, which is a common feature of Mac apps.": {"zh": "示例中使用了 secondary scene（次要场景）的 Settings（设置），它提供了一个在 app 菜单中可用的 Settings menu（设置菜单项），这在 Mac app 中非常常见。", "tips": ""}, "Step 1": {"zh": "第 1 步", "tips": ""}, "In this sample, body returns the primary scene WindowGroup, which describes the view hierarchy of the sample’s main window.": {"zh": "在此示例中，body 返回了主场景 WindowGroup（窗口组），他描述了示例主窗口的 view hierarchy（视图树）。", "tips": ""}, "The entry point and MyApp structure are responsible for the start up of the app. Each SwiftUI app has one and only one entry point and main app structure.": {"zh": "entry point（入口点）和 MyApp 结构体负责 app 的启动。每个 SwiftUI app 有且只有一个 entry point 和一个 main app struct（主 app 结构体）。", "tips": ""}, "With two separate view hierarchies defined, the sample must specify which one to use based on the target platform.": {"zh": "在定义了两个单独的 view hierarchies（视图树）后，示例 app 内的代码必须根据不同的平台来指定所使用的内容。", "tips": ""}, "Before refactoring the MyApp structure to use the custom scenes, the code is fairly long and complex.": {"zh": "在重构 MyApp 结构体以使用自定义 scenes（场景）之前，我们先看看代码，它似乎有点冗长且复杂。", "tips": ""}, "The computed body property includes the secondary scene Settings. This scene is only available in macOS, so it’s placed inside a platform conditional compilation block.": {"zh": "computed body property（计算主体属性）包含了 secondary scene（次要场景） Settings（设置）。此 scene（场景）仅在 macOS 中可用，所以它被放置在了一个 platform conditional compilation block（平台条件编译块）内。", "tips": ""}, "The sample defines an entry point using the @main attribute and the structure MyApp, which conforms to the App protocol.": {"zh": "该示例使用 @main 属性定义了 app entry point（app 的入口），以及一个遵循 App protocol（App 协议）的结构体 MyApp。", "tips": ""}, "The WindowGroup scene is one of the more commonly used scenes. It provides platform-specific behaviors for your app, such as supporting multiple windows in macOS and iPadOS. For more information about this scene as well as other scenes that SwiftUI provides, see Scenes.": {"zh": "WindowGroup scene（窗口组场景）是最常用的场景之一。它为你的 app 在不同平台做了针对性的优化，例如在 macOS 和 iPadOS 上支持多窗口。更多有关此 scene（场景）或其他 SwfitUI 提供的场景，请参阅 Scenes（场景）。", "tips": ""}, "Step 2": {"zh": "第 2 步", "tips": ""}, "The Settings scene contains the custom view, SettingView, which displays app settings in a window that the Settings menu item provides.": {"zh": "Settings scene（设置场景）包含了一个自定义视图 - SettingsView（设置视图），它在 Settings menu item（设置菜单项）所提供的窗口中显示 app 的设置。", "tips": ""}, "Change the code so that the sample uses MyScene in macOS and MyAlternativeScene in iOS.": {"zh": "尝试更改代码，在 macOS 中使用 MyScene，而在 iOS 中使用 MyAlternativeScene。", "tips": ""}, "The implementation of body uses the same code from the MyApp structure, covered in the Add a scene to the app section of this tutorial.": {"zh": "body（主体）内的实现使用了与 MyApp 结构体相同的代码，在本教程的 Add a scene to the app（在 app 中添加场景）章节中有所介绍。", "tips": ""}, "The sample app runs on multiple devices including iPhone and Mac. But the view hierarchy described in the previous section doesn’t look quite right in macOS. So the sample declares another view hierarchy that takes advantage of features specific to the Mac.": {"zh": "示例 app 可以运行在多设备上，包括 iPhone 和 Mac。但是在之前章节的 view hierarchy（视图树）在 macOS 上看起来并不是非常的好。因此，在示例中声明了另一个 view hierarchy，以便能够较好的适配 Mac，并利用其中的特性。", "tips": ""}, "With the MyScene and MyAlternativeScene in place, the final step is to refactor the code in the MyApp structure so that it uses the custom scenes.": {"zh": "在完成 MyScene 和 MyAlternativeScene 后，最后一步就是重构 MyApp 结构体内的代码，以使用自定义场景。", "tips": ""}, "Step 7": {"zh": "第 7 步", "tips": ""}, "The app uses a separate platform conditional to compile the scenes that the Mac app uses.": {"zh": "该 app 使用了一个单独的 platform conditional（平台条件编译）来编译 Mac app 所使用的 scenes（场景）。", "tips": ""}, "When the sample app runs, it displays the view hierarchy described in the WindowGroup scene, which is a tab interface with two tabs: Journal and Settings.": {"zh": "当示例 app 运行时，他将显示 WindowGroup scene（窗口组场景）描述的 view hierarchy（视图树），这是一个带有日记和设置两个标签的标签页。", "tips": ""}}
{"Drag the Hikes folder from the downloaded files’ Resources folder into your project’s Views group. Be sure to select “Copy items if needed” and “Create groups” before clicking Finish.": {"zh": "将下载文件的资源文件夹中的 Hikes 文件夹拖到您的项目的“Views”组中。在单击“完成”之前，请确保选择“如果需要复制项目”和“创建文件夹”。", "tips": ""}, "Familiarize yourself with the new views. They work together to display the hike data loaded into your model.": {"zh": "熟悉新视图。它们一起工作，显示加载到您的模型中的徒步旅行数据。", "tips": ""}, "SwiftUI includes basic animations with predefined or custom easing, as well as spring and fluid animations. You can adjust an animation’s speed, set a delay before an animation starts, or specify that an animation repeats.": {"zh": "SwiftUI 包括具有预定义或自定义缓动的基本动画，以及弹簧和流体动画。你可以调整动画的速度，为动画设置开始前的延迟，或指定动画重复次数。", "tips": ""}, "Create a new Swift file called Hike.swift in your project’s Model group using the menu item File > New > File.": {"zh": "在项目的 Model 文件夹中，使用菜单项 File > New > File 创建一个名为 Hike.swift 的新 Swift 文件。", "tips": ""}, "Switch to using the move(edge:) transition, so that the graph slides in and out from the same side.": {"zh": "切换为使用 move(edge:) 过渡，以使图表从同一侧滑入滑出。", "tips": ""}, "This keeps your code clean as you expand the custom transition.": {"zh": "这样可以在扩展自定义转场时保持代码的整洁。", "tips": ""}, "Try turning off animation for the rotation by adding another animation modifier just above the scaleEffect modifier.": {"zh": "尝试通过在 scaleEffect 修饰符上方添加另一个动画修饰符来关闭旋转动画。", "tips": ""}, "Customize View Transitions": {"zh": "自定义视图转场", "tips": ""}, "Check Your Understanding": {"zh": "", "tips": ""}, "Add another animatable change by making the button larger when the graph is visible.": {"zh": "当图表可见时，通过使按钮变大来添加另一个动画。", "tips": ""}, "Drag the hikeData.json file from the downloaded files’ Resources folder into your project’s Resources group. Be sure to select “Copy items if needed” before clicking Finish.": {"zh": "将下载的文件的 Resources 文件夹中的 hikeData.json 文件拖到项目的 Resources 文件夹中。在单击“完成”之前，请确保选择“如有需要复制项目”。", "tips": ""}, "By default, views transition on- and offscreen by fading in and out. You can customize this transition by using the transition(_:) modifier.": {"zh": "默认情况下，视图会通过淡入淡出的方式在屏幕上显示和消失。你可以使用 transition(:) 修饰符自定义这种转换效果。", "tips": ""}, "Speed up the animation a bit, to shorten the time each bar takes to move to its new position.": {"zh": "稍微加快动画速度，缩短每个柱子移动到新位置动画所需的时间。", "tips": ""}, "Because you’ll never modify hike data after initially loading it, you don’t need to mark it with the @Published attribute.": {"zh": "因为你在最初加载后永远不会修改徒步数据，所以不需要使用 @Published 属性标记它。", "tips": ""}, "Step 6": {"zh": "步骤 6", "tips": ""}, "Be sure to use the live preview throughout this tutorial so you can experiment with the results of each step.": {"zh": "在本教程中一定要使用实时预览，这样你就可以看到每一步的效果。", "tips": ""}, "Experiment": {"zh": "实验", "tips": ""}, "Change the animation type from easeInOut to spring().": {"zh": "将动画类型从 easeInOut 更改为 spring()。", "tips": ""}, "Pass a four-second long basic animation to the withAnimation function.": {"zh": "将为时四秒的基本动画传递给 withAnimation 函数。", "tips": ""}, "In HikeView, change the default value for showDetail to true, and pin the preview to the canvas.": {"zh": "在 HikeView 中，将 showDetail 的默认值更改为 true，并将预览固定到画布。", "tips": ""}, "Download the starter project and follow along with this tutorial, or open the finished project and explore the code on your own.": {"zh": "下载入门项目来跟随本教程操作，或者打开已完成的项目然后自行探索代码。", "tips": ""}, "Now the graph appears and disappears by sliding in and out of sight.": {"zh": "现在，图表通过滑入滑出的方式出现和消失。", "tips": ""}, "Before continuing to the next section, restore the withAnimation function to use the default animation by removing the call’s input parameter.": {"zh": "在继续下一节之前，请通过删除调用的输入参数将 withAnimation 函数恢复为使用默认动画。", "tips": ""}, "Composing Complex Interfaces": {"zh": "", "tips": ""}, "Now that you’ve learned how to apply animations to individual views, it’s time to add animations in places where you change your state’s value.": {"zh": "既然你已经学会了如何将动画应用到单个视图，现在是时候在更改状态值的地方添加动画了。", "tips": ""}, "Load the hikes array into your model object.": {"zh": "将 hikes 数组加载到您的模型对象中。", "tips": ""}, "You can pass the same kinds of animations to the withAnimation function that you passed to the animation(_:value:) modifier.": {"zh": "你可以将与 animation(:value:) 修饰符相同的动画传递给 withAnimation 函数。", "tips": ""}, "Step 3": {"zh": "步骤 3", "tips": ""}, "In this tutorial, you’ll animate a view that contains a graph for tracking the hikes a user takes while using the Landmarks app. Using the animation(_:) modifier, you’ll see just how easy it is to animate a view.": {"zh": "在本教程中，你将为一个显示 Landmarks 应用中用户进行徒步旅行的图表视图创建动画。使用 animation(:) 修饰符，你会发现为视图创建动画是多么容易。", "tips": ""}, "Step 4": {"zh": "步骤 4", "tips": ""}, "The animation modifier applies to all animatable changes within the views it wraps.": {"zh": "动画修饰符适用于其包装视图中的所有可以执行动画的数值修改。", "tips": ""}, "Both of the views affected by the showDetail property — the disclosure button and the HikeDetail view — now have animated transitions.": {"zh": "受 showDetail 属性影响的两个视图 - 展开按钮和 HikeDetail 视图 - 现在都有动画过渡。", "tips": ""}, "In HikeView.swift, turn on animation for the button’s rotation by adding an animation modifier that begins on changes of the showDetail value.": {"zh": "在 HikeView.swift 中，通过添加一个动画修饰符，在 showDetail 值改变时启动按钮旋转的动画。", "tips": ""}, "Before you can add animation, you’ll need something to animate. In this section, you’ll import and model hiking data, and then add some prebuilt views for displaying that data statically in a graph.": {"zh": "在添加动画之前，你需要有一些内容来执行动画。在本节中，你将导入并建立徒步旅行数据，然后为静态显示数据的图表添加一些预先构建的视图。", "tips": ""}, "Section 2": {"zh": "第 2 节", "tips": ""}, "This makes it possible for you to see the graph in context while you work on the animation in another file.": {"zh": "固定预览能够使你在处理另一个文件中的动画时，仍然保持查看固定住的预览。", "tips": ""}, "Animate the Effects of State Changes": {"zh": "使状态变化的效果动起来", "tips": ""}, "Extract the transition that you just added as a static property of AnyTransition, and access the new property in the view’s transition modifier.": {"zh": "将刚刚添加的过渡作为 AnyTransition 的静态属性提取，并在视图的过渡修饰符中访问新属性。", "tips": ""}, "Add Hiking Data to the App": {"zh": "", "tips": ""}, "You can see the effect of the animation by switching between elevation, heart rate, and pace in the live preview.": {"zh": "你可以通过在实时预览中切换海拔、心率和速度来查看动画效果。", "tips": ""}, "Section 3": {"zh": "第 3 节", "tips": ""}, "When you use the animation(_:) modifier on an equatable view, SwiftUI animates any changes to animatable properties of the view. A view’s color, opacity, rotation, size, and other properties are all animatable. When the view isn’t equatable, you can use the animation(_:value:) modifier to start animations when the specified value changes.": {"zh": "当你在可比较的视图上使用 animation(:) 修饰符时，SwiftUI 会为视图的可动画属性的任何更改添加动画。视图的颜色、不透明度、旋转、大小等属性都是可动画的。当视图不可以比较时，你可以使用 animation(_:value:) 修饰符在指定值更改时启动动画。", "tips": ""}, "Be sure to unpin the preview before moving on to the next tutorial.": {"zh": "在继续下一个教程之前，取消固定预览。", "tips": ""}, "Remove both animation modifiers before moving on to the next section.": {"zh": "在继续下一部分之前，请删除两个动画修饰符。", "tips": ""}, "Switch the animation to a spring animation, with a reduced damping fraction to make the bars hop.": {"zh": "将动画切换为弹簧动画，减小阻尼系数，使条形图跳跃。", "tips": ""}, "In HikeView.swift, turn on the live preview and experiment with showing and hiding the graph.": {"zh": "在HikeView.swift中，打开实时预览并尝试显示和隐藏图表。", "tips": ""}, "Observe how the custom animation provides a rippling effect when transitioning between graphs.": {"zh": "观察在图表之间过渡时，自定义动画如何展示波纹效果。", "tips": ""}, "Slow down the animation to see how SwiftUI animations are interruptible.": {"zh": "放慢动画速度，了解 SwiftUI 动画是如何可中断的。", "tips": ""}, "Experiment with opening and closing the graph view mid-animation.": {"zh": "尝试在动画进行中打开和关闭图形视图。", "tips": ""}, "Step 1": {"zh": "步骤 1", "tips": ""}, "Use the asymmetric(insertion:removal:) modifier to provide different transitions for when the view appears and disappears.": {"zh": "使用 asymmetric(insertion:removal:) 修饰符为视图出现和消失时提供不同的过渡动画。", "tips": ""}, "Animating Views and Transitions": {"zh": "", "tips": ""}, "The category view for Landmarks shows a vertically scrolling list of horizontally scrolling landmarks. As you build this view and connect it to your existing views, you’ll explore how composed views can adapt to different device sizes and orientations.": {"zh": "Landmarks的类别视图显示一个垂直滚动的水平滚动地标列表。在构建此视图并将其连接到现有视图时，你将探索如何使组合视图适应不同的设备大小和方向。", "tips": ""}, "The graph switches between three different sets of data when you click the buttons below the bars. In this section, you’ll use a composed animation to give the capsules that make up the graph a dynamic, rippling transition.": {"zh": "当你点击柱子下方的按钮时，图表会在三个不同的数据集之间切换。在本节中，你将使用一个组合动画，为构成图表的胶囊提供动态的波纹过渡效果。", "tips": ""}, "Add Animations to Individual Views": {"zh": "为单个视图添加动画效果", "tips": ""}, "Section 4": {"zh": "第 4 节", "tips": ""}, "Take SwiftUI for a spin. Try combining different animation effects to see what’s possible.": {"zh": "尝试使用 SwiftUI 并结合不同的动画效果，探索其潜力。将各种动画效果组合在一起，看看可以实现什么样的效果。", "tips": ""}, "Compose Animations for Complex Effects": {"zh": "为复杂效果制作动画", "tips": ""}, "Section 5": {"zh": "第 5 节", "tips": ""}, "Like the Landmark structure, the Hike structure conforms to Codable and has properties that match the keys in the corresponding data file.": {"zh": "与 Landmark 结构类似， Hike 结构符合 Codable 并具有与相应数据文件中键匹配的属性。", "tips": ""}, "Step 2": {"zh": "步骤 2", "tips": ""}, "When using SwiftUI, you can individually animate changes to views, or to a view’s state, no matter where the effects are. SwiftUI handles all the complexity of these combined, overlapping, and interruptible animations for you.": {"zh": "在使用 SwiftUI 时，你可以单独为视图的变化或视图状态的变化设置动画，无论这些效果设置。SwiftUI 会自动为你处理这些组合、重叠和可中断动画的所有复杂特性。", "tips": ""}, "Here, you’ll apply animations to all of the changes that occur when a user taps a button and toggles the showDetail state property.": {"zh": "在这里，当用户点击按钮并切换 showDetail 状态属性时，你将针对这个变化应用动画效果。", "tips": ""}, "Add a delay to each animation that’s based on the capsule’s position on the graph.": {"zh": "根据胶囊在图表上的位置，给每个胶囊动画添加一点延迟。", "tips": ""}, "Step 5": {"zh": "步骤 5", "tips": ""}, "In HikeGraph.swift, define a new ripple animation and apply it to each generated graph capsule.": {"zh": "在 HikeGraph.swift 中，定义一个新的波纹动画，并将它应用到每个生成的图表胶囊上。", "tips": ""}, "Wrap the call to showDetail.toggle() with a call to the withAnimation function.": {"zh": "用 withAnimation 函数包装对 showDetail.toggle() 的调用。", "tips": ""}, "Add a transition(_:) modifier to the conditionally visible HikeView.": {"zh": "在通过条件判断是否可见的 HikeView 上添加一个 transition(_:) 修饰符。", "tips": ""}}
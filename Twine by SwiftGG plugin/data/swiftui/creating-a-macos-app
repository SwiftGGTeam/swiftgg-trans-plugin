{"Add a Picker that controls the zoom value through a binding.": {"zh": "添加一个绑定缩放值的选择器。", "tips": ""}, "The changes you’ll make in the next few steps improve the layout for the larger display of a Mac.": {"zh": "在接下来的几个步骤中，你将进行的更改将会针对 Mac 优化，在更大显示屏上展示界面布局。", "tips": ""}, "Run the macOS app and try out the new menu item.": {"zh": "运行 macOS 应用程序并尝试新的菜单项。", "tips": ""}, "You’ll define content for the menu next.": {"zh": "接下来你将定义菜单的内容。", "tips": ""}, "Adding the second child view automatically converts the list to use the sidebar list style.": {"zh": "给 NavigationView 添加第二个子视图会自动将列表转换为侧边栏列表样式。", "tips": ""}, "Like a View structure, a Commands structure requires a computed body property that uses builder semantics, except with commands instead of views.": {"zh": "像 View 结构一样，Commands 结构也需要一个使用构建器语义的计算 body 属性，只是它使用的是 commands 而不是 views。", "tips": ""}, "This improves the preview, but also ensures that the list never becomes too small as the user resizes the macOS window.": {"zh": "这改进了预览效果，也保证了列表在用户调整 macOS 窗口大小时永远不会变得太小。", "tips": ""}, "Use a storage key that uniquely identifies the parameter like you would when storing items in UserDefaults, because that’s the underlying mechanism that SwiftUI relies on.": {"zh": "在存储键中使用一个唯一标识参数的值，就像在 UserDefaults 中存储项目一样，因为这是 SwiftUI 依赖的底层机制。", "tips": ""}, "Step 6": {"zh": "步骤 6", "tips": ""}, "Wrap the landmark name in a VStack and add the park as secondary information.": {"zh": "将地标名称包装在 VStack 中，并将公园添加为次要信息。", "tips": ""}, "To ensure that SwiftUI refreshes the map whenever delta changes, you’ll have to alter the way you calculate and apply the region.": {"zh": "为确保在 delta 更改时 SwiftUI 刷新地图，您需要更改计算和应用 region 的方式。", "tips": ""}, "In the Project navigator, delete the MacLandmarksApp.swift file from the MacLandmarks group. When asked, choose Move to Trash.": {"zh": "在项目导航器中，从 MacLandmarks 组中删除 MacLandmarksApp.swift 文件。 当系统询问时，选择移至废纸篓。", "tips": ""}, "Run the app and try setting the preferences.": {"zh": "运行应用程序并尝试设置偏好。", "tips": ""}, "The preview fails because the navigationBarTitleDisplayMode(_:) method isn’t available in macOS.": {"zh": "预览失败是因为 navigationBarTitleDisplayMode(_:) 方法在 macOS 中不可用。", "tips": ""}, "Run the macOS target and see how the menu operates.": {"zh": "运行 macOS 目标并查看菜单的运行方式。", "tips": ""}, "You won’t be able to see the toolbar updates until you run the app.": {"zh": "在运行该应用程序之前，将看不到工具栏的更新。", "tips": ""}, "You now have three files called LandmarkDetail.swift. Each serves the same purpose in the view hierarchy, but provides an experience tailored to a particular platform.": {"zh": "现在您有三个名为 LandmarkDetail.swift 的文件。它们在视图层次结构中具有相同的作用，但他们针对特定平台提供了定制的体验。", "tips": ""}, "Create a new SwiftUI view called LandmarkSettings that targets only the macOS app.": {"zh": "创造一个名为 LandmarkSettings 的新 SwiftUI 视图，它仅针对 macOS 平台。", "tips": ""}, "To make use of commands in an app, you have to apply them to a scene, which you’ll do next.": {"zh": "要在应用程序中使用命令，你需要将它们应用于一个场景，接下来你将执行这个操作。", "tips": ""}, "Choose the WatchLandmarks target to see a watchOS preview of the list.": {"zh": "选择 WatchLandmarks 目标来查看列表的 watchOS 预览。", "tips": ""}, "Move the favorites Toggle into the menu.": {"zh": "将收藏切换开关移动到菜单中。", "tips": ""}, "Step 8": {"zh": "步骤 8", "tips": ""}, "Replace the region state variable, the setRegion method, and the map’s onAppear modifier with a computed region property that you pass to the Map initializer as a constant binding.": {"zh": "将 region 状态变量、 setRegion 方法和地图的 onAppear 修饰符替换为计算得出的 region 属性，将其作为常量传递给 Map 进行初始化。", "tips": ""}, "Add a FilterCategory enumeration to describe filter states.": {"zh": "添加 FilterCategory 枚举来描述过滤器状态。", "tips": ""}, "Add an “Open in Maps” button in a ZStack so that it appears on top of the map in the upper-right corner.": {"zh": "在 ZStack 中添加“在地图中打开（Open in Maps）”按钮，使它显示在地图的右上角。", "tips": ""}, "The detail view displays information about the selected landmark. You created a view like this for the iOS app, but different platforms require different approaches to data presentation.": {"zh": "详细视图显示有关所选地标的信息。 在 iOS 应用程序中你已经创建了一个这样的视图，但不同的平台需要不同的数据呈现方法。", "tips": ""}, "The pattern for defining focused values resembles the pattern for defining new Environment values: Use a private key to read and write a custom property on the system-defined FocusedValues structure.": {"zh": "定义 focused 值的模式类似于定义新的 Environment 值的模式：使用私有键在系统定义的 FocusedValues 结构上读取和写入自定义属性。", "tips": ""}, "Add a @FocusedBinding property wrapper to track the currently selected landmark.": {"zh": "添加 @FocusedBinding 属性包装器来跟踪当前选定的地标。", "tips": ""}, "Create a new custom view in the MacLandmarks group targeting macOS called LandmarkDetail.": {"zh": "在针对 macOS 平台的 MacLandmarks 文件夹中，创建一个名为 LandmarkDetail 的新的自定义视图。", "tips": ""}, "Add a new SwiftUI view to the WatchLandmarks Extension folder called LandmarkList.swift that targets only WatchLandmarks Extension, and remove the older file’s WatchLandmarks Extension target membership.": {"zh": "在 WatchLandmarks Extension 文件夹中添加一个仅针对 WatchLandmarks Extension 的新 SwiftUI 视图，命名为 LandmarkList.swift，并移除旧文件的 WatchLandmarks Extension 目标引用。", "tips": ""}, "You typically use a Form to arrange controls in your settings view.": {"zh": "你一般可以使用 Form 在设置视图中排列控件。", "tips": ""}, "Next, you’ll create a Settings scene that controls the stored zoom value.": {"zh": "接下来，您将创建一个 Settings 场景，用于控制存储的缩放值。", "tips": ""}, "Update the navigation title to match the state of the filter.": {"zh": "更新导航标题来匹配过滤器的状态。", "tips": ""}, "Creating a macOS App": {"zh": "", "tips": ""}, "Section 1": {"zh": "第 1 节", "tips": ""}, "Add the focusedValue(_:_:) modifier to the NavigationView, providing a binding the value from the landmarks array.": {"zh": "将 focusedValue(_:_:) 修饰符添加到 NavigationView，传入地标数组值进行绑定。", "tips": ""}, "Continue Command-clicking to select all the items in the Model and Resources folders, as well as Asset.xcassets.": {"zh": "继续按住 Command 单击选择 Model 和 Resources 文件夹中的所有项目，以及 Asset.xcassets。", "tips": ""}, "Add a button to the menu that toggles the selected landmark’s favorite status, and that has an appearance that changes depending on the currently selected landmark and its state.": {"zh": "在菜单中添加一个按钮，用于切换所选地标的收藏状态，并且它的外观会根据当前所选地标及其当前的收藏状态而变化。", "tips": ""}, "Copy the iOS detail view contents into the macOS detail view.": {"zh": "将 iOS 详情视图的内容复制到 macOS 的详情视图中。", "tips": ""}, "Change the HStack holding the park and state to a VStack with leading alignment, and remove the Spacer.": {"zh": "将包含公园和州信息的 HStack 更改为对齐方式为 leading 的 VStack，并移除 Spacer。", "tips": ""}, "When you let go of the mouse button, the list disappears with no way to get it back. You’ll add a command to fix this.": {"zh": "当你松开鼠标按钮时，该列表将会消失且无法恢复。 你将添加一个命令来修复此问题。", "tips": ""}, "Delete the navigationBarTitleDisplayMode(_:) modifier and add a frame modifier to the preview so you can see more of the content.": {"zh": "删除 navigationBarTitleDisplayMode(_:) 修饰符并为预览设置一个视图大小，方便你可以看到更多内容。", "tips": ""}, "This built-in command set includes the command for toggling the sidebar.": {"zh": "这个内置的命令集包括用于切换侧边栏的命令。", "tips": ""}, "Add a keyboard shortcut for the menu item with the keyboardShortcut(_:modifiers:) modifier.": {"zh": "使用 keyboardShortcut(_:modifiers:) 修饰符为菜单中的选项添加键盘快捷键。", "tips": ""}, "SwiftUI automatically shows the keyboard shortcut in the menu.": {"zh": "SwiftUI 会自动在菜单中显示键盘快捷键。", "tips": ""}, "Constrain the ScrollView to a maximum width.": {"zh": "将 ScrollView 的最大宽度加以限制。", "tips": ""}, "Check Your Understanding": {"zh": "", "tips": ""}, "Like LandmarkRow, LandmarkList already works on macOS, but could use improvements. For example, you’ll move the toggle for showing only favorites to a menu in the toolbar, where it can be joined by additional filtering controls.": {"zh": "与 LandmarkRow 一样，LandmarkList 已经可以在 macOS 上运行，但可以进行改进。 例如，你可以将仅显示收藏夹的开关移动到工具栏中的菜单，可以在那里加入其他过滤控件。", "tips": ""}, "This template adds a new macOS app target to the project.": {"zh": "此模板将新的 macOS 应用程序目标添加到项目中。", "tips": ""}, "This moves the toggle into the toolbar in a platform-specific way, which has the additional benefit of making it accessible no matter how long the list of landmarks gets, or how far down the user scrolls.": {"zh": "这样以一种平台特定的方式将切换按钮移动到工具栏中，带来了额外的好处，即无论地标列表有多长，或者用户向下滚动了多远，都能轻松访问它。", "tips": ""}, "The shared LandmarkRow view works in macOS, but it’s worth revisiting to look for improvements given the new visual environment. Because this view is used by all three platforms, you need to be careful that any changes you make work across all of them.": {"zh": "共享的 LandmarkRow 视图在 macOS 上可以正常工作，但考虑到新的视觉场景，有必要重新审视它寻找值得改进的地方。由于这个视图被三个平台都使用到，你需要确保所做的任何更改都能在所有平台上正常工作。", "tips": ""}, "The watchOS app builds again.": {"zh": "再次构建 watchOS 应用程序。", "tips": ""}, "Notice that the map refreshes whenever you change the zoom level.": {"zh": "请注意，只要更改缩放级别，地图就会重新刷新。", "tips": ""}, "Go back to LandmarkRow and add an #if condition to prevent the secondary text from appearing in a watchOS build.": {"zh": "回到 LandmarkRow ，添加 #if 条件来防止二级文本出现在 watchOS 构建中。", "tips": ""}, "Open LandmarkList.swift and add a minimum width.": {"zh": "打开 LandmarkList.swift 并添加最小宽度。", "tips": ""}, "Add a condition around the commands modifier to omit it for the watchOS app.": {"zh": "在 commands 修饰符周围添加条件，以排除 watchOS 应用程序。", "tips": ""}, "You’re reading the value here. You’ll set it later in the list view, where the user makes the selection.": {"zh": "你在此处读取该值。稍后你将在列表视图中设置它，用户在那里进行选择。", "tips": ""}, "You also target iOS because the shared LandmarkList will eventually depend on some of the types you define in this file.": {"zh": "你还需要针对 iOS，因为共享的 LandmarkList 最终将依赖于你在此文件中定义的一些类型。", "tips": ""}, "When you create an app using the SwiftUI life cycle, the system automatically creates a menu with commonly needed items, like those for closing the front-most window or for quitting the app. SwiftUI lets you add other common commands with built-in behavior, as well as completely custom commands.": {"zh": "当你使用 SwiftUI 生命周期创建应用程序时，系统会自动创建一个包含常用选项的菜单，比如用于关闭最前面的窗口或退出应用程序。SwiftUI 还允许您添加具有内置行为的其他常用命令，以及完全自定义的命令。", "tips": ""}, "SwiftUI provides both a default main view and its preview provider, just like for an iOS app, enabling you to preview the app’s main window.": {"zh": "SwiftUI 提供默认主视图及其预览提供类，就像 iOS 应用程序一样，使你能够直接预览应用程序的主窗口。", "tips": ""}, "The first of these is the shared app definition. The others are views that will work on macOS.": {"zh": "其中第一个是应用程序的共享入口。 其他的是也能够适用于 macOS 的视图文件。", "tips": ""}, "Add a new Swift file called LandmarkCommands.swift and set its targets to include both macOS and iOS.": {"zh": "添加一个名为 LandmarkCommands.swift 的 Swift 文件，并将其目标设置为包括 macOS 和 iOS。", "tips": ""}, "Using the plain style here makes the button look more like the iOS equivalent.": {"zh": "在这里使用 plain 样式会让按钮看起来更像是 iOS 上的按钮。", "tips": ""}, "Add a new CommandMenu to your commands called Landmarks.": {"zh": "将一个名为 Landmarks 新的 CommandMenu 添加到你的命令选项中 。", "tips": ""}, "You perform a look-up here to ensure that you are modifying the landmark stored in the model, and not a copy.": {"zh": "在这里进行查找以确保你修改的是存储在模型中的地标，而不是其副本。", "tips": ""}, "Step 3": {"zh": "步骤 3", "tips": ""}, "The preview no longer builds because the LandmarkList uses LandmarkDetail, but you haven’t defined a detail view for the macOS app yet. You’ll take care of that in the next section.": {"zh": "预览不再生成，因为 LandmarkList 使用到了 LandmarkDetail，但你还没有为 macOS 应用程序定义 LandmarkDetail。 你将在下一节中解决这个问题。", "tips": ""}, "The MapView remains blank unless you start the live preview.": {"zh": "除非你开始实时预览模式，否则 MapView 将保持空白。", "tips": ""}, "Update the List View": {"zh": "更新列表视图", "tips": ""}, "The changes you’ll make will work for both macOS and iOS, but will be difficult to accommodate on watchOS. Fortunately, in the previous section you already split the list into a separate file for watchOS.": {"zh": "你所做的更改能够适用于 macOS 和 iOS，但很难适应 watchOS。 幸运的是，在上一节中，你已经将列表拆分成了一个针对 watchOS 的独立文件。", "tips": ""}, "Section 2": {"zh": "第 2 节", "tips": ""}, "This improves readability when the user makes the window very wide.": {"zh": "当视图窗口非常宽的时候，这样可以提高可读性。", "tips": ""}, "Add an @AppStorage property called zoom that takes on the medium zoom level by default.": {"zh": "添加一个名为 zoom 的 @AppStorage 属性，默认情况下采用 medium 缩放级别。", "tips": ""}, "Return to the MacLandmarks scheme, and in the LandmarkList file that targets iOS and macOS, add a ToolbarItem containing a Menu inside a new toolbar modifier.": {"zh": "回到到 MacLandmarks scheme，在针对 iOS 和 macOS 的 LandmarkList 文件中，在新的 toolbar 修饰符中添加一个包含菜单的 ToolbarItem。", "tips": ""}, "Step 10": {"zh": "步骤 10", "tips": ""}, "Finally, consider how your changes work for iOS.": {"zh": "最后，考虑你的更改是否可以适用于 iOS。", "tips": ""}, "Section 4": {"zh": "第 4 节", "tips": ""}, "Add a resizable() modifier to the image, and constrain the CircleImage to be a bit smaller.": {"zh": "为图像添加一个 resizable() 修饰符，并将 CircleImage 大小设置的小一点。", "tips": ""}, "In the previous section, you added a built-in menu command set. In this section, you’ll add a custom command for toggling the favorite status of the currently selected landmark. To know which landmark is currently selected, you’ll use a focused binding.": {"zh": "在上一节中，你添加了一个内置菜单命令集。 在本节中，你将添加一个自定义命令来切换当前所选地标的收藏状态。 要知道当前选择了哪个地标，你将使用焦点绑定（focused binding）。", "tips": ""}, "Add vertical padding around the contents of the row to give each row a little more breathing room.": {"zh": "在行内容周围添加垂直填充，为每行提供更多的空间，让它们看起来更加舒适。", "tips": ""}, "Start by adding a macOS target to the project. Xcode adds a new group and set of starter files for the macOS app, along with the scheme needed to build and run the app. You’ll then add some existing files to the new target.": {"zh": "首先向项目添加一个 macOS 目标。 Xcode 为 macOS 应用程序添加了一个新的文件夹以及配置好了启动文件，还有编译和运行该应用程序所需的方案。 然后，你将向新目标添加一些现有文件。", "tips": ""}, "In LandmarksApp.swift, add the Settings scene to your app, but only for macOS.": {"zh": "在 LandmarksApp.swift 中，将 Settings 场景添加到你的应用程序中，但仅适用于 macOS。", "tips": ""}, "In LandmarkCommands, extend the FocusedValues structure with a selectedLandmark value, using a custom key called SelectedLandmarkKey.": {"zh": "在 LandmarkCommands 中，使用名为 SelectedLandmarkKey 的自定义键，使用 selectedLandmark 值扩展 FocusedValues 结构。", "tips": ""}, "In the Project navigator, Command-click to select the following files: LandmarksApp.swift, LandmarkList.swift, LandmarkRow.swift, CircleImage.swift, MapView.swift, and FavoriteButton.swift.": {"zh": "在项目导航栏中，按住 Command 单击来选择以下文件：LandmarksApp.swift、LandmarkList.swift、LandmarkRow.swift、CircleImage.swift、MapView.swift 和 FavoriteButton.swift。", "tips": ""}, "Step 7": {"zh": "步骤 7", "tips": ""}, "Step 5": {"zh": "步骤 5", "tips": ""}, "The changes work well for iOS, so there’s no need to make any updates for that platform.": {"zh": "这些更改适用于 iOS，因此无需针对该平台进行任何更新。", "tips": ""}, "In the MacLandmarks group, select ContentView.swift, open the Canvas, and click Resume to see the preview.": {"zh": "在 MacLandmarks 文件夹中，选择 ContentView.swift，打开 Canvas，然后单击 Resume 查看预览。", "tips": ""}, "Add an @AppStorage property that uses the same key as you used in the map view.": {"zh": "添加一个 @AppStorage 属性，该属性和你在地图视图中使用的键相同。", "tips": ""}, "The minimum row width isn’t appropriate here. Because of this and other changes you’ll make to the list in the next section, the best solution is to create a watch-specific list that omits the width constraint.": {"zh": "最小行宽在这里是不合适的。 由于在接下来的部分中还需要进行其他更改，所以最好的解决方案是创建一个特定于 watch 的列表，省略宽度上的约束。", "tips": ""}, "Update the Row View": {"zh": "更新行视图", "tips": ""}, "Import SwiftUI and add a LandmarkCommands structure that conforms to the Commands protocol, with a computed body property.": {"zh": "导入 SwiftUI 框架并添加一个符合 Commands 协议的 LandmarkCommands 结构体，其中包含一个计算属性 body。", "tips": ""}, "Open LandmarkRow.swift and add a corner radius to the image for a more refined look.": {"zh": "打开 LandmarkRow.swift 并为图像添加圆角半径让它的外观更加精致。", "tips": ""}, "Choose the Landmarks build target to see what the list looks like for iOS.": {"zh": "选择 Landmarks 编译目标来查看 iOS 列表的界面。", "tips": ""}, "For the row, using conditional compilation is appropriate because the differences are small.": {"zh": "对于行视图来说可以使用条件判断是否需要编译，因为差异很小。", "tips": ""}, "Choose File > New > Target. When the template sheet appears, choose the macOS tab, select the App template, and click Next.": {"zh": "选择 File > New > Target。 出现模板选择列表时，选择 macOS 选项，选择 App 模版，然后单击下一步。", "tips": ""}, "The tag associates a particular landmark with the given item in the ForEach, which then drives the selection.": {"zh": "该标签将特定地标与 ForEach 中的给定项目相关联，标识地标是否选中。", "tips": ""}, "The menu now contains your new command, but you need to set the selectedLandmark focused binding for it to work.": {"zh": "菜单现在包含你的新命令，但你需要设置 selectedLandmark 焦点绑定才能工作。", "tips": ""}, "Choose the Landmarks build target, and use the live preview to see that the new filtering works well for iOS as well.": {"zh": "选择 Landmarks 构建目标，并使用实时预览查看新过滤是否也适用于 iOS。", "tips": ""}, "Step 11": {"zh": "步骤 11", "tips": ""}, "In this section, you’ll add a system-provided command that lets the user toggle the sidebar, to be able to get it back after dragging it closed.": {"zh": "在本节中，你将添加一个系统提供的命令，让用户可以切换侧边栏展开和隐藏，以便在拖动关闭后可以恢复它。", "tips": ""}, "Drag the AppIcon.appiconset folder from the downloaded projects’ Resources folder into the MacLandmark’s Asset catalog.": {"zh": "将 AppIcon.appiconset 文件夹从下载项目的 Resources 文件夹拖到 MacLandmark 的 Asset 目录中。", "tips": ""}, "Because the filter has only a few items, you use the inline picker style to make them all appear together.": {"zh": "因为过滤器只有几个选项，所以你使用 inline 样式让它们一起出现。", "tips": ""}, "After creating a version of the Landmarks app for watchOS, it’s time to set your sights on something bigger: bringing Landmarks to the Mac. You’ll build upon everything you’ve learned so far, to round out the experience of building a SwiftUI app for iOS, watchOS, and macOS.": {"zh": "在为 watchOS 创建 Landmarks 应用程序版本后，是时候将你的目光投向更大的目标了：将 Landmarks 引入到 Mac 上。 你将以迄今为止所学的一切为基础，完善为 iOS、watchOS 和 macOS 构建 SwiftUI 应用程序的体验。", "tips": ""}, "Add a second child view to the NavigationView as a placeholder for the second view in wide layouts.": {"zh": "将文本视图添加到 NavigationView 的横向布局中，作为的二级视图的占位。", "tips": ""}, "Next, you’ll share view, model, and resource files from the iOS app with the macOS target.": {"zh": "接下来，你将让  macOS 应用和 iOS 应用程序共享视图、模型和资源文件。", "tips": ""}, "Sometimes you can reuse a view across platforms with small adjustments or conditional compilation, but the detail view differs enough for macOS that it’s better to create a dedicated view. You’ll copy the iOS detail view as a starting point, and then modify it to suit the larger display of macOS.": {"zh": "有时候，你可以通过进行小的调整或使用条件判断是否参与编译的方式在不同平台间复用视图，但是 macOS 的详细视图差别较大，因此最好创建一个专用视图。你将复制 iOS 详情视图作为起点，然后修改它来适应 macOS 更大的显示屏。", "tips": ""}, "Add Preferences with a Settings Scene": {"zh": "使用设置场景的方式添加偏好设置", "tips": ""}, "Scene modifiers work like view modifiers, except that you apply them to scenes instead of views.": {"zh": "场景修改器的工作方式类似于视图修改器，只是你将它们应用于场景而不是视图。", "tips": ""}, "Add a Built-in Menu Command": {"zh": "添加一个内置的菜单栏选项。", "tips": ""}, "Follow the steps to build this project, or download the finished project to explore on your own.": {"zh": "按照步骤构建此项目，或下载已完成的项目来自行探索。", "tips": ""}, "Add a SidebarCommands command to the body.": {"zh": "在 body 中添加 SidebarCommands 命令。", "tips": ""}, "Run the macOS app again, and see that you can use the View > Toggle Sidebar menu command to restore the list view.": {"zh": "再次运行 macOS 应用程序，可以看到你可以使用“视图（View）”>“切换边栏（Toggle Sidebar）”菜单命令来恢复列表视图。", "tips": ""}, "By setting the scheme to My Mac, you can preview, build, and run the macOS app. As you move through the tutorial, you’ll use the other schemes to keep an eye on how other targets respond to changes in shared files.": {"zh": "通过将方案设置为“My Mac”，你可以预览、编译和运行 macOS 应用程序。 在学习本教程时，你也会使用其他的编译方案来关注当共享文件发生修改时，其他目标是如何响应的。", "tips": ""}, "You’ll replace this in the next step.": {"zh": "你将在下一步中替换它。", "tips": ""}, "These items define the app’s data model and resources.": {"zh": "这些项目定义了应用程序的数据模型和资源。", "tips": ""}, "Change the FavoriteButton to use the plain button style.": {"zh": "更改 FavoriteButton 的样式为 plain。", "tips": ""}, "Set the scheme to MacLandmarks > My Mac.": {"zh": "将编译方案设置为 MacLandmarks > My Mac，即在我的 Mac 上运行应用程序。", "tips": ""}, "Update filteredLandmarks to take into account the new filter setting, combined with the category of a given landmark.": {"zh": "更新 filteredLandmarks，将新的过滤设置与给定地标的类别相结合。", "tips": ""}, "Open the LandmarksApp.swift file, and apply LandmarkCommands using the commands(content:) scene modifier.": {"zh": "打开 LandmarksApp.swift 文件，并使用 commands(content:) 场景修饰符应用 LandmarkCommands。", "tips": ""}, "The content now has the right width, but each row has too much information.": {"zh": "内容现在有正确的宽度了，但每一行的信息太多了。", "tips": ""}, "Section 5": {"zh": "第 5 节", "tips": ""}, "Before modifying the row, set up a preview of the list, because the changes you’ll make are driven by how the row looks in context.": {"zh": "在修改行之前，设置好列表的预览，因为你所做的更改是需要在列表中展示的。", "tips": ""}, "Section 6": {"zh": "第 6 节", "tips": ""}, "Step 2": {"zh": "步骤 2", "tips": ""}, "Remove the offset from the circle, and instead apply a smaller offset to the entire VStack.": {"zh": "将圆形的偏移量移除，改成给整个 VStack 增加一个较小的偏移量。", "tips": ""}, "Create a macOS Detail View": {"zh": "创建 macOS 详细信息视图", "tips": ""}, "Change the longitude and latitude delta used to construct the region property to a value that depends on zoom.": {"zh": "将用于构造 region 属性的经度和纬度差值更改为一个取决于缩放级别的值。", "tips": ""}, "In the File inspector, add MacLandmarks to the Target Membership for the selected files.": {"zh": "在文件检查器中，给所选择的文件添加 MacLandmarks 目标，让 Mac 工程能够引用这些文件。", "tips": ""}, "Select the Assets.xcasset file in the MacLandmarks group and delete the empty AppIcon item.": {"zh": "选择 MacLandmarks 组中的 Assets.xcasset 文件并删除空的 AppIcon 项。", "tips": ""}, "You’ll start by adding a macOS target to your project, and then reusing views and data you created earlier. With a foundation in place, you’ll add some new views tailored to macOS, and modify others to work better across platforms.": {"zh": "你将首先向你的项目添加一个 macOS 目标，然后重用你之前创建的视图和数据。 有了适当的基础，你将添加一些为 macOS 量身定制的新视图，并修改其他视图来更好地跨平台工作。", "tips": ""}, "Add a Picker to the menu to set the filter category.": {"zh": "在菜单中添加一个 Picker 来设置过滤器类别。", "tips": ""}, "In ContentView in the MacLandmarks group, add LandmarkList as the top level view, with constraints on the frame size.": {"zh": "在 MacLandmarks 文件夹的 ContentView 中，添加 LandmarkList 作为顶层视图，并限制它的布局大小。", "tips": ""}, "Be sure to include MapKit to be able to create the MKMapItem that you send to Maps.": {"zh": "请记得引用 MapKit 框架，以便你能够创建 MKMapItem 对象发送到地图 App。", "tips": ""}, "In the sheet, enter MacLandmarks as the Product Name. Set the interface to SwiftUI, the life cycle to SwiftUI App, and the language to Swift, and then click Finish.": {"zh": "在弹出的窗口中，输入 MacLandmarks 作为产品名称。 界面开发框架设置为 SwiftUI，生命周期设置为 SwiftUI App，语言设置为 Swift，然后点击 Finish。", "tips": ""}, "With more room available, you’ll add a new control for filtering the list of landmarks by category.": {"zh": "有了更多可用空间，你将添加一个新控件，来按类别筛选地标列表。", "tips": ""}, "Return to the MacLandmarks target, run the macOS app, and drag the separator between the list and detail view all the way to the left.": {"zh": "返回 MacLandmarks 目标，运行 macOS 应用程序，并将列表和详细视图之间的分隔符一直拖到左侧。", "tips": ""}, "The larger display gives you more room for additional features.": {"zh": "更大的显示屏也为你提供更多功空间展示功能。", "tips": ""}, "Section 7": {"zh": "第 7 节", "tips": ""}, "By storing the filter state in the list view, the user can open multiple list view windows, each with its own filter setting, to be able to look at the data in different ways.": {"zh": "通过在列表视图中存储过滤器状态，用户可以打开多个列表视图窗口，每个窗口都有自己的过滤器设置，这样能够以不同的方式查看数据。", "tips": ""}, "Step 4": {"zh": "步骤 4", "tips": ""}, "You’ll start by adding a control in the MapView that sets the initial zoom to one of three levels: near, medium, or far.": {"zh": "你将首先在 MapView 中添加一个控件，用于将初始缩放设置为三个级别之一：近、中或远。", "tips": ""}, "Pin the list view preview so that you can see how the row looks in context as you make changes.": {"zh": "固定列表视图的预览窗口，让你可以在进行更改时看到行视图在列表中的外观变化。", "tips": ""}, "Initialize the List with a binding to the selected value, and add a tag to the navigation link.": {"zh": "用选定值的绑定初始化列表，并在导航链接中添加一个标签。", "tips": ""}, "Add a macOS Target to the Project": {"zh": "将 macOS 目标添加到项目", "tips": ""}, "Step 9": {"zh": "步骤 9", "tips": ""}, "Unfortunately, the watchOS app fails to build because Commands has no watchOS availability. You’ll fix that next.": {"zh": "不幸的是，watchOS 应用程序无法构建，因为 Commands 在 watchOS 上不可用。接下来你将解决这个问题。", "tips": ""}, "In LandmarkList.swift, add a state variable for the selected landmark and a computed property that indicates the index of the selected landmark.": {"zh": "在 LandmarkList.swift 中，为所选地标添加一个状态变量和一个表示所选地标索引的计算属性。", "tips": ""}, "Section 3": {"zh": "第 3 节", "tips": ""}, "Step 1": {"zh": "步骤 1", "tips": ""}, "Like with the watchOS app, you don’t need the default app structure because you’ll reuse the one you already have.": {"zh": "与 watchOS 应用程序一样，你不需要 Xcode 生成的默认的 App 文件，因为你会重复使用主工程中已有的 App 文件。", "tips": ""}, "In MapView.swift, add a Zoom enumeration to characterize the zoom level.": {"zh": "在 MapView.swift 中，添加一个 Zoom 枚举来表示缩放级别。", "tips": ""}, "Users expect to be able to adjust settings for a macOS app using the standard Preferences menu item. You’ll add preferences to MacLandmarks by adding a Settings scene. The scene’s views define the contents of the preferences window, which you’ll use to control the initial zoom level of the MapView. You communicate the value to the map view, and store it persistently, by using the @AppStorage property wrapper.": {"zh": "用户希望能够使用标准的偏好菜单调整 macOS 应用的设置。你将通过添加一个 Settings 场景来为 MacLandmarks 添加偏好设置。场景的视图定义了偏好窗口的内容，你将用它来控制 MapView 的初始缩放级别。通过使用 @AppStorage 属性包装器，你可以将值传递给地图视图，并将其持久地存储。", "tips": ""}, "This change will be useful in the iOS app.": {"zh": "这个修改将会在 iOS 应用程序中生效。", "tips": ""}, "Add a filter state variable, defaulting to the all case.": {"zh": "添加一个 filter 状态变量，默认设置为 all 包含所有情况。", "tips": ""}, "The updates improve the look in macOS, but you also need to consider the other platforms that use the list. Consider watchOS first.": {"zh": "这些更改优化了 macOS 的外观，但你还需要考虑使用该列表的其他平台。首先考虑 watchOS。", "tips": ""}, "Add a macOS app icon set to match those for the other targets.": {"zh": "添加一个 macOS 应用程序图标集合，让 Mac 上也能正确显示 App 图标。", "tips": ""}, "To be able to preview and run the app, be sure your Mac is running macOS Monterey or later.": {"zh": "为了能够预览和运行应用程序，请确保你的 Mac 运行的是 macOS Monterey 或更高版本。", "tips": ""}, "Match the case strings to the Category enumeration in the Landmark structure so that you can compare them, and include an all case to turn filtering off.": {"zh": "将 FilterCategory 枚举中的的字符串与 Landmark 结构中的 Category 枚举相匹配，以便你可以比较它们，并包含一个 all 类型来关闭过滤。", "tips": ""}, "Enclose everything below MapView in a VStack, and then place the CircleImage and the rest of the header in an HStack.": {"zh": "将 MapView 下方的所有内容都包含在 VStack 中，然后将 CircleImage 和头部的其余部分放在 HStack 中。", "tips": ""}, "Add a Custom Menu Command": {"zh": "添加自定义菜单命令", "tips": ""}, "Copy the contents of the old LandmarkList into the new one, but without the frame modifier.": {"zh": "将旧 LandmarkList 的内容复制到新的 LandmarkList 中，但不带 frame 修饰符。", "tips": ""}}
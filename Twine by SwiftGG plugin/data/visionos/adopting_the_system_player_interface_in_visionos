{"Adopting the system player interface in visionOS": {"zh": "在 visionOS 中采用系统播放器界面", "tips": ""}, "Provide an optimized viewing experience for watching 3D video content.": {"zh": "为观看 3D 视频内容提供优化的观看体验。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "The recommended way to provide a video playback interface for your visionOS app is to adopt AVPlayerViewController. Using this class makes it simple to provide the same playback user interface and features found in system apps like TV and Music. It also provides essential system integration to deliver an optimal viewing experience whether you’re playing standard 2D content or immersive 3D video with spatial audio. This article describes best practices for presenting the player in visionOS and covers the options the player provides to customize its user interface to best fit your app.": {"zh": "为你的 visionOS 应用提供视频播放界面的推荐方法是采用 AVPlayerViewController。使用此类可以轻松提供与系统应用（如电视和音乐）相同的播放界面和功能。它还提供了必要的系统集成，无论你是播放标准的 2D 内容还是带有空间音频的沉浸式 3D 视频，都能提供最佳的观看体验。本文介绍了在 visionOS 中展示播放器的最佳实践，并涵盖了播放器提供的自定义界面选项，以最适应你的应用。", "tips": ""}, "Note": {"zh": "备注", "tips": ""}, "In addition to providing the system playback interface, you can also use AVPlayerViewController to present a media-trimming experience similar to QuickTime Player in macOS. See Trimming and exporting media in visionOS for more information.": {"zh": "除了提供系统播放界面，你还可以使用 AVPlayerViewController 提供类似于 macOS 中 QuickTime Player 的媒体剪辑体验。更多信息，请参考 visionOS 中修剪和导出媒体。", "tips": ""}, "Explore presentation options": {"zh": "探索展示方式", "tips": ""}, "Use AVPlayerViewController to play video in windowed environments in visionOS. It automatically adapts its user interface to best fit its presentation. For example, when you present it nested inside another view, it displays an inline user interface:": {"zh": "使用 AVPlayerViewController 在 visionOS 的窗口环境中播放视频，它会自动调整其用户界面以适应当前展示方式。例如，当你将其嵌套在另一个视图中时，它会显示一个内嵌用户界面：", "tips": ""}, "When you present the player inline, it only displays standard 2D video. To play 3D content, present it fullscreen.": {"zh": "当你以内嵌方式展示播放器时，它仅支持标准 2D 视频。如要播放 3D 内容，请使用全屏展示。", "tips": ""}, "Present the player in full-screen mode by setting it as the exclusive root view of your app, or by presenting it using the fullScreenCover(item:onDismiss:content:) modifier. In full-screen mode, the player presents a more content-forward design that dims the environment by default to provide more suitable viewing. This provides a streamlined viewing experience for both 2D and 3D content.": {"zh": "将播放器设置为应用的唯一根视图，或使用 fullScreenCover(item:onDismiss:content:) 修饰符，可以以全屏模式展示播放器。在全屏模式下，播放器呈现出一种更加偏内容导向的设计，默认会调暗环境光线，以提供更合适的观看效果。这为欣赏 2D 和 3D 内容提供了优化的观看体验。", "tips": ""}, "Display supporting metadata": {"zh": "显示相关元数据", "tips": ""}, "The user interface displays a title view above the transport bar when the current player item contains title and subtitle metadata. When playing live-streaming content, the title view may also display a badge to indicate the content state to the viewer.": {"zh": "在当前播放项目包含标题和副标题元数据时，用户界面会在播放栏上方显示标题视图。当播放实时内容时，标题视图还可能显示一个徽章，向观众提示内容状态。", "tips": ""}, "The title view displays the values of an asset’s commonIdentifierTitle and iTunesMetadataTrackSubTitle metadata items, when available. If your media doesn’t provide embedded metadata, you can add supplemental metadata to display by creating instances of AVMetadataItem. The table below lists the metadata values the player user interface supports.": {"zh": "标题视图会显示媒体元数据项 commonIdentifierTitle 和 iTunesMetadataTrackSubTitle 的值（如可用）。如果你的媒体不提供嵌入的元数据，则可以通过创建 AVMetadataItem 的实例来补充元数据。下表列出了播放器用户界面支持的元数据值。", "tips": ""}, "Metadata": {"zh": "元数据", "tips": ""}, "Identifier": {"zh": "标识符", "tips": ""}, "Type": {"zh": "类型", "tips": ""}, "Title": {"zh": "标题", "tips": ""}, "commonIdentifierTitle": {"zh": "commonIdentifierTitle", "tips": ""}, "String": {"zh": "字符串", "tips": ""}, "Subtitle": {"zh": "副标题", "tips": ""}, "iTunesMetadataTrackSubTitle": {"zh": "iTunesMetadataTrackSubTitle", "tips": ""}, "Artwork": {"zh": "作品", "tips": ""}, "commonIdentifierArtwork": {"zh": "commonIdentifierArtwork", "tips": ""}, "Data": {"zh": "数据", "tips": ""}, "Description": {"zh": "描述", "tips": ""}, "commonIdentifierDescription": {"zh": "commonIdentifierDescription", "tips": ""}, "Genre": {"zh": "类型", "tips": ""}, "quickTimeMetadataGenre": {"zh": "quickTimeMetadataGenre", "tips": ""}, "Content rating": {"zh": "内容分级", "tips": ""}, "iTunesMetadataContentRating": {"zh": "iTunesMetadataContentRating", "tips": ""}, "In an app that defines a simple structure to hold string and data items, you can map its values to their appropriate metadata identifiers and build an array of metadata items:": {"zh": "在一个使用简单结构体来保存字符串和数据的应用中，你可以将这些值映射到相应的元数据标识符，并生成元数据项数组：", "tips": ""}, "To apply the metadata to the current player item, set the array of metadata items as the value of the player item’s externalMetadata property:": {"zh": "若要将元数据应用于当前播放项，将元数据项数组赋值给播放项目的 externalMetadata 属性：", "tips": ""}, "Only the title and subtitle values display in the title view. The player presents the other supported metadata values in its Info tab, which the section below describes.": {"zh": "标题视图中仅显示标题和副标题。播放器在其“信息”选项卡中显示其他支持显示的元数据值，文章的以下部分将对此进行介绍。", "tips": ""}, "Display custom informational views": {"zh": "显示自定义信息视图", "tips": ""}, "The visionOS player UI can display one or more content tabs in the user interface to show supporting information or related content. By default, the player presents an Info tab when an asset contains embedded metadata or when you set external metadata on the player item, as the Display supporting metadata section above describes.": {"zh": "visionOS 播放器 UI 可以在用户界面中显示一个或多个内容选项卡，以显示附属信息或相关内容。当媒体包含内嵌元数据或在播放器项目上设置了外部元数据时，播放器会如上面的“显示相关元数据”章节所述，默认显示“信息”选项卡。", "tips": ""}, "Your app can also present custom tabs to show supporting content. You define your tab content as standard SwiftUI views, wrap them in a UIHostingController, and set them as the customInfoViewControllers property. The player UI uses the title property of the hosting controller to display as the tab title in the interface, so set this value before setting it on the player view controller.": {"zh": "你的应用还可以通过展示自定义选项卡以显示相关内容。你可以使用标准 SwiftUI 视图定义选项卡内容，将它们包装在 UIHostingController 中，然后将它们设置为 customInfoViewControllers 属性。播放器 UI 将托管控制器的 title 属性显示为选项卡界面标题，因此请先设置好此值，再在播放器视图控制器上设置托管控制器。", "tips": "Hosting controller 译为“托管控制器”。"}, "Present actions in the Info tab": {"zh": "在“信息”选项卡中显示操作", "tips": ""}, "The player UI presents an Info tab when the asset it displays provides embedded or external metadata. The tab’s view displays the metadata details, and it may show up to two UIAction controls along its trailing edge:": {"zh": "当播放器 UI 显示的资源提供内嵌或外部元数据时，它会显示一个“信息”选项卡。选项卡视图会显示元数据详情，并且沿右侧边缘显示最多两个 UIAction 控件：", "tips": ""}, "Customize the actions the view presents by setting a value for the player view controller’s infoViewActions property. When playing nonlive content, this property contains a single-element array that presents an action to play the content from the beginning. You can replace the default value (if present), add an additional action, or set this property value to an empty array to display no actions. The example below shows how to add a Add to Favorites action to the view:": {"zh": "通过设置播放器视图控制器的 infoViewActions 属性来自定义视图所显示的操作。当播放非实时内容时，此属性默认为一个单元素数组，用于存放从头播放视频的操作。你可以替换默认值（如存在）、添加其他操作，或将此属性设置为空数组从而不显示任何操作。下面的示例演示了如何向视图添加“添加到收藏夹”操作：", "tips": ""}, "Display actions contextually": {"zh": "根据上下文情景来显示操作", "tips": ""}, "You can use the visionOS player UI to present controls contextually, which your app displays for a specific range of time in the content and then dismiss. A common use for this type of control is a skip button that displays during the title sequence of a movie or TV show. People can tap the button to bypass the introduction and quickly skip to the main content.": {"zh": "你可以让 visionOS 播放器 UI 根据情景来显示控件，应用会在一定时间内在视频内容中显示控件，然后隐藏。此类控件的常见用途是在电影或电视节目的片头序列中显示跳过按钮，用户可以点击此按钮绕过介绍并快速跳转到主要内容。", "tips": ""}, "AVPlayerViewController provides a contextualActions property you can use to specify one or more actions to present. The player displays them along the bottom-trailing side of the screen. The following code example shows a simple implementation of an action that seeks the player forward to the time of the main content:": {"zh": "AVPlayerViewController 提供了一个 contextualActions 属性，用于指定显示一个或多个操作。播放器在画面的底部靠右显示这些操作。下面的代码示例演示了一个简单的操作，该操作将播放器向前快进到主要内容的开始时间：", "tips": ""}, "When you set a value for the contextualActions property, the player presents the controls immediately. To present them only during a relevant section of the content, observe the player timing by adding a periodic or boundary time observer. The following example defines a periodic time observer that fires every second during normal playback. In each invocation, it evaluates the new time to determine whether it falls within the presentation range. If it does, the example sets the skip action as the contextual actions value; otherwise, it clears the value by setting it to an empty array.": {"zh": "当你为 contextualActions 属性赋值后，播放器会立即显示对应的控件。如需要仅在与内容相关的部分显示操作，请通过添加周期性或边界性时间观察器来监视播放时间。以下示例定义了一个周期性时间观察器，该观察器在视频播放期间每秒钟触发一次。在每次触发时，它都会评估当前播放时间，以确认它是否在显示范围内。如果是，则该示例将跳过设置为当前情景的操作；否则，它将通过将值设置为空数组来清除所有操作。", "tips": ""}}
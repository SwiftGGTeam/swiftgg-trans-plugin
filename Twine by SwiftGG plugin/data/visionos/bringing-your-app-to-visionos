{"Bringing your existing apps to visionOS": {"zh": "将现有应用移植到 visionOS", "tips": ""}, "Build a version of your iPadOS or iOS app using the visionOS SDK, and update your code for platform differences.": {"zh": "使用 visionOS SDK 为你的 iPadOS 或 iOS 应用构建一个新版本，并更新代码以适应平台差异。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "If you have an existing app that runs in iPadOS or iOS, you can build that app against the visionOS SDK to run it on the platform. Apps built specifically for visionOS adopt the standard system appearance, and they look more natural on the platform. Updating your app is also an opportunity to add elements that work well on the platform, such as 3D content and immersive experiences.": {"zh": "如果你有一个在 iPadOS 或 iOS 上运行的应用，你可以使用 visionOS SDK 构建该应用程序，以便在该平台上运行。为 visionOS 专门构建的应用采用标准系统外观，在该平台上看起来更自然。同时，更新应用也是添加在该平台上吸引眼球的元素（如 3D 内容和沉浸式体验）的好机会。", "tips": ""}, "In most cases, all you need to do to support visionOS is update your Xcode project’s settings and recompile your code. Depending on your app, you might need to make additional changes to account for features that are only found in the iOS SDK. While most of the same technologies are available on both platforms, some technologies don’t make sense or require hardware that isn’t present on visionOS devices. For example, people don’t typically use a headset to make contactless payments, so apps that that use the ProximityReader framework must disable those features when running in visionOS.": {"zh": "在大多数情况下，你只需更新 Xcode 的项目设置并重新编译代码即可支持 visionOS。根据你的应用，你可能需要进行其他更改，以解决那些仅在 iOS SDK 中支持的功能。虽然在两个平台上多数技术都是通用的，有些技术在 visionOS 设备上并不合理，或者需要的硬件并不存在。例如，用户通常不使用头戴式设备进行电子支付，因此使用 ProximityReader 框架的应用在 visionOS 中运行时必须禁用这些功能。", "tips": ""}, "Note": {"zh": "备注", "tips": ""}, "If you use ARKit in your iOS app to create an augmented reality experience, you need to make additional changes to support ARKit in visionOS. For information on how to update this type of app, see Bringing your ARKit app to visionOS.": {"zh": "如果你在 iOS 应用中使用了 ARKit 来实现增强现实体验，则需要进行额外的更改才能在 visionOS 中支持 ARKit。有关如何更新此类应用，请参阅将 ARKit 应用移植到 visionOS。", "tips": ""}, "Add visionOS as a supported destination for your app": {"zh": "将 visionOS 添加为应用的支持终端（supported destination）", "tips": ""}, "The first step to updating your app is to add visionOS as a supported destination. In your project’s settings, select your app target and navigate to the General tab. In Supported Destinations, click the Add (+) button to add a new destination and select the Apple Vision option. Adding this option lets you build your app specifically for the visionOS SDK.": {"zh": "更新应用的第一步是将 visionOS 添加为支持终端。在你的项目设置中，选择应用目标并导航到 General 选项卡。在 Supported Destinations 选项中，单击添加 （+） 按钮以添加新的终端，并选择 Apple Vision 选项。添加该选项后，你就可以专门为 visionOS SDK 构建应用了。", "tips": ""}, "When you add Apple Vision as a destination, Xcode makes some one-time changes to your project’s build settings. After you add the destination, you can modify your project’s build settings and build phases to customize the build behavior specifically for visionOS. For example, you might remove dependencies for the visionOS version of your app, or change the set of source files you want to compile.": {"zh": "当第一次 Apple Vision 添加为终端时，Xcode 会对项目的构建设置进行一些一次性更改。添加终端后，你可以修改项目的构建设置和构建阶段，以定制针对 visionOS 的构建行为。例如，你可以移除 visionOS 版应用的依赖项，或更改要编译的源文件集。", "tips": ""}, "For more information about how to update a target’s configuration, see Customizing the build phases of a target.": {"zh": "有关如何更新目标配置的更多信息，请参阅自定义目标的构建阶段。", "tips": ""}, "Clean up code that uses deprecated APIs": {"zh": "清理使用了废弃 API 的代码", "tips": ""}, "Fix any deprecation warnings in the iOS version of your code before you build for visionOS. Apple marks APIs as deprecated when they are no longer relevant or a suitable replacement exists. When you compile code that calls deprecated APIs, the compiler generates warnings and often suggests replacements for you to use instead. visionOS removed many deprecated symbols entirely, turning these deprecation warnings into missing-symbol errors on the platform. Make changes in the iOS version of your app to see the original deprecation warning and replacement details.": {"zh": "在为 visionOS 构建之前，修复 iOS 版本代码中的任何弃用警告。当 API 不再适用或存在合适的替代品时，Apple 就会将其标记为废弃。当你编译调用已废弃 API 的代码时，编译器会生成警告，并经常建议你使用替代品。visionOS 完全删除了许多已废弃的符号，这些废弃警告也因此变成了该平台上的符号缺失错误。请在 iOS 版本的应用查看原始的弃用警告和替换详情。", "tips": ""}, "In addition to individual symbols, the following frameworks are deprecated in their entirety in both iOS and visionOS. If your app still uses these frameworks, stop using them immediately. The reference documentation for each framework includes information about how to update your code.": {"zh": "除个别符号外，以下框架在 iOS 和 visionOS 中均已被完全弃用。如果你的应用仍在使用这些框架，请立即停止使用。每个框架的参考文档都包含有关如何修改代码的详情。", "tips": ""}, "Accounts": {"zh": "Accounts", "tips": ""}, "Address Book": {"zh": "Address Book", "tips": ""}, "Address Book UI": {"zh": "Address Book UI", "tips": ""}, "Assets Library": {"zh": "Assets Library", "tips": ""}, "GLKit": {"zh": "GLKit", "tips": ""}, "iAd": {"zh": "iAd", "tips": ""}, "Newsstand Kit": {"zh": "Newsstand Kit", "tips": ""}, "NotificationCenter": {"zh": "NotificationCenter", "tips": ""}, "OpenGL ES": {"zh": "OpenGL ES", "tips": ""}, "Isolate features that are unavailable in visionOS": {"zh": "隔离 visionOS 中不可用的功能", "tips": ""}, "The iOS SDK includes many frameworks that don’t apply to visionOS, either because they use hardware that isn’t available or their features don’t apply to the platform. Move code that uses these frameworks to separate source files whenever possible, and include those files only in the iOS version of your app.": {"zh": "iOS SDK 包含许多不适用于 visionOS 的框架，这可能是因为框架使用的硬件不可用，也可能是因为框架功能功能不适用于该平台。尽可能将使用这些框架的代码移到独立的源文件中，并只在 iOS 版本的应用中包含这些文件。", "tips": ""}, "When you can’t isolate the code to separate source files, use conditional statements such as the ones below to offer a different code path for visionOS and iOS. The following example shows how to configure conditional statements to execute separate code paths in visionOS and iOS:": {"zh": "如果无法将代码隔离到单独的源文件中，可使用条件语句（如下面的语句）为 visionOS 和 iOS 提供不同的代码路径。下面的示例展示了如何配置条件语句，以便在 visionOS 和 iOS 中执行不同的代码路径：", "tips": ""}, "The following frameworks are available in the iOS SDK but not in the visionOS SDK.": {"zh": "以下框架在 iOS SDK 中可用，但在 visionOS SDK 中不可用。", "tips": ""}, "ActivityKit": {"zh": "ActivityKit", "tips": ""}, "AdSupport": {"zh": "AdSupport", "tips": ""}, "AppClip": {"zh": "AppClip", "tips": ""}, "AutomatedDeviceEnrollment": {"zh": "AutomatedDeviceEnrollment", "tips": ""}, "BusinessChat": {"zh": "BusinessChat", "tips": ""}, "CarKey": {"zh": "CarKey", "tips": ""}, "CarPlay": {"zh": "CarPlay", "tips": ""}, "Cinematic": {"zh": "Cinematic", "tips": ""}, "ClockKit": {"zh": "ClockKit", "tips": ""}, "CoreLocationUI": {"zh": "CoreLocationUI", "tips": ""}, "CoreMediaIO": {"zh": "CoreMediaIO", "tips": ""}, "CoreNFC": {"zh": "CoreNFC", "tips": ""}, "CoreTelephony": {"zh": "CoreTelephony", "tips": ""}, "DeviceActivity": {"zh": "DeviceActivity", "tips": ""}, "DockKit": {"zh": "DockKit", "tips": ""}, "ExposureNotification": {"zh": "ExposureNotification", "tips": ""}, "FamilyControls": {"zh": "FamilyControls", "tips": ""}, "FinanceKit": {"zh": "FinanceKit", "tips": ""}, "FinanceKitUI": {"zh": "FinanceKitUI", "tips": ""}, "ManagedSettings": {"zh": "ManagedSettings", "tips": ""}, "ManagedSettingsUI": {"zh": "ManagedSettingsUI", "tips": ""}, "Messages": {"zh": "Messages", "tips": ""}, "MLCompute": {"zh": "MLCompute", "tips": ""}, "NearbyInteraction": {"zh": "NearbyInteraction", "tips": ""}, "OpenAL": {"zh": "OpenAL", "tips": ""}, "ProximityReader": {"zh": "ProximityReader", "tips": ""}, "RoomPlan": {"zh": "RoomPlan", "tips": ""}, "SafetyKit": {"zh": "SafetyKit", "tips": ""}, "ScreenTime": {"zh": "ScreenTime", "tips": ""}, "SensorKit": {"zh": "SensorKit", "tips": ""}, "ServiceManagement": {"zh": "ServiceManagement", "tips": ""}, "Social": {"zh": "Social", "tips": ""}, "Twitter": {"zh": "Twitter", "tips": ""}, "WidgetKit": {"zh": "WidgetKit", "tips": ""}, "WorkoutKit": {"zh": "WorkoutKit", "tips": ""}, "Some frameworks have behavioral changes that impact your app in visionOS, and some frameworks disable features when the required hardware is unavailable. To help you avoid using APIs for missing features, many frameworks offer APIs to check the availability of those features. Continue to use those APIs and take appropriate actions when the features aren’t available. In other cases, be prepared for the framework code to do nothing or to generate errors when you use it.": {"zh": "有些框架的行为变化会影响你的 visionOS 应用，有些框架会在所需硬件在当前平台不可用时禁用功能。为了帮助你避免使用缺失功能的 API，许多框架都提供了检查功能可用性的 API。继续使用这些 API，并在功能不可用时采取适当的措施。而在使用没有检查可用性的框架时，请做好框架代码失效或报错的准备。", "tips": ""}, "ARKit. This framework requires you to use different APIs for iOS and visionOS. For more information, see Bringing your ARKit app to visionOS.": {"zh": "ARKit。此框架要求你为 iOS 和 visionOS 使用不同的 API。有关详细信息，请参阅将 ARKit 应用移植到 visionOS。", "tips": ""}, "AutomaticAssessmentConfiguration. The framework returns an error if you try to start a test in visionOS.": {"zh": "AutomaticAssessmentConfiguration。如果你尝试在 visionOS 中启动测试，该框架会返回错误。", "tips": ""}, "AVFoundation. Capture interfaces aren’t available in visionOS. Use availability checks to determine which services are present.": {"zh": "AVFoundation。截屏接口在 visionOS 中不可用。请使用可用性检查来确定哪些服务可用。", "tips": ""}, "CallKit. You may continue to offer Voice-over-IP (VoIP) services, but phone number verification, call-blocking, and other cellular-related services are unavailable.": {"zh": "CallKit。你可以继续提供 Voice-over-IP (VoIP) 服务，但电话号码验证、呼叫阻断和其他蜂窝相关服务不可用。", "tips": ""}, "ClockKit. The APIs of this framework do nothing in visionOS.": {"zh": "ClockKit。该框架的 API 在 visionOS 中不起作用。", "tips": ""}, "CoreHaptics. visionOS plays audio feedback instead of haptic feedback.": {"zh": "CoreHaptics。visionOS 使用音频反馈而非触觉反馈。", "tips": ""}, "CoreLocation. You can request someone’s location using the standard location service, but most other services are unavailable. Use availability checks to determine which services are present. The Always authorization level is unavailable and automatically becomes When in Use authorization.": {"zh": "CoreLocation。 你可以使用标准定位服务请求某人的位置，但大多数其他服务都不可用。请使用可用性检查确认哪些服务可用。“始终”授权级别不可用，会自动变为“使用中”授权。", "tips": ""}, "CoreMotion. Barometer data is unavailable, but most other sensors are available. Use availability checks to determine which sensors you can use.": {"zh": "CoreMotion。 气压计数据不可用，但大多数其他传感器可用。使用可用性检查来确认哪些传感器可以使用。", "tips": ""}, "HealthKit and HealthKitUI. Health data is unavailable. Use availability checks to determine when information is available.": {"zh": "HealthKit 和 HealthKitUI。健康数据不可用。使用可用性检查确认信息何时可用。", "tips": ""}, "MapKit. User-tracking features that involve heading information aren’t available.": {"zh": "MapKit。涉及航向信息的用户跟踪功能不可用。", "tips": ""}, "MediaPlayer. Some APIs are unavailable in visionOS.": {"zh": "MediaPlayer。某些 API 在 visionOS 中不可用。", "tips": ""}, "MetricKit. You can gather on-device diagnostic logs and generate reports, but you can’t gather metrics.": {"zh": "MetricKit。你可以收集设备上的诊断日志并生成报告，但无法收集指标。", "tips": ""}, "MusicKit. Some APIs are unavailable in visionOS.": {"zh": "MusicKit。某些 API 在 visionOS 中不可用。", "tips": ""}, "NearbyInteraction. The framework does nothing in visionOS. Use availability checks to determine when services are present.": {"zh": "NearbyInteraction。该框架在 visionOS 中不起作用。使用可用性检查来确认服务是否存在。", "tips": ""}, "PushToTalk. Push to Talk services are unavailable. Check for errors when creating a PTChannelManager.": {"zh": "PushToTalk。一键通话服务不可用。请检查创建 PTChannelManager 时的错误。", "tips": ""}, "SafariServices. A link that presents a SFSafariViewController now opens a new scene in the Safari app.": {"zh": "SafariServices。显示 SFSafariViewController 的链接会在 Safari 应用程序中打开一个新场景。", "tips": ""}, "UIKit. The system reports a maximum of two simultaneous touch inputs — one for each of the person’s hands. All system gesture recognizers handle these inputs correctly, including for zoom and rotation gestures that require multiple fingers. If you have custom gesture recognizers that require more than two fingers, update them to support only one or two touches in visionOS.": {"zh": "UIKit。 系统最多可同时反馈两个触控输入 - 双手各一个。所有系统手势识别器都能正确处理这些输入，包括需要多手指操作的缩放和旋转手势。如果你有需要两个手指以上的自定义手势，请在 visionOS 中将其更新为只有一个或两个触控的手势。", "tips": ""}, "VisionKit. The DataScannerViewController APIs are unavailable, but other features are still available.": {"zh": "VisionKit。 DataScannerViewController API 不可用，但其他功能仍然可用。", "tips": ""}, "WatchConnectivity. The framework supports connections only between an iPhone and Apple Watch. Use availability checks to determine when services are available.": {"zh": "WatchConnectivity。该框架仅支持 iPhone 与 Apple Watch 之间的连接。使用可用性检查确认服务何时可用。", "tips": ""}, "For additional information about how to isolate code to the iOS version of your app, see Running code on a specific platform or OS version.": {"zh": "有关如何将代码隔离到 iOS 应用版本的更多信息，请参阅在特定平台或操作系统版本上运行代码。", "tips": ""}, "Update your interface to take advantage of visionOS features": {"zh": "更新界面以更好地利用 visionOS 功能", "tips": ""}, "After your existing code runs correctly in visionOS, look for ways to improve the experience you offer on the platform. In visionOS, you can display content using more than just windows. Think about ways to incorporate the following elements into your interface:": {"zh": "当你的现有代码在 visionOS 中正常运行后，请设法改善你在该平台上提供的体验。在 visionOS 中，你可以使用窗口之外的方式来显示内容。请考虑如何将以下元素融入你的界面：", "tips": ""}, "Depth. Many SwiftUI and UIKit views use visual effects to add depth. Look for similar ways to incorporate depth into your own custom views.": {"zh": "深度。许多 SwiftUI 和 UIKit 视图都使用视觉效果来增加深度。请寻找类似的方法，将深度元素融入进你的自定义视图中。", "tips": ""}, "3D content. Think about where you might incorporate 3D models and shapes into your content. Use RealityKit to implement your content, and a RealityView to present that content from your app. See Adding 3D content to your app.": {"zh": "3D 内容。想想在哪些内容中可以加入 3D 模型和形状。使用 RealityKit 实现你的内容，并使用 RealityView 从你的应用中展示这些内容。请参阅在应用中添加 3D 内容。", "tips": ""}, "Immersive experiences. Present a space to immerse someone in your app’s content. Spaces let you place content anywhere in a person’s surroundings. You can also create fully immersive experiences that display only your app’s content. See Creating fully immersive experiences in your app.": {"zh": "沉浸式体验。显示一个空间，让用户沉浸在你的应用内容中。空间可以让你将内容呈现在用户周围的任何地方。你还可以创建只显示当前应用内容的完全沉浸式体验。请参阅在应用中创建完全沉浸式体验。", "tips": ""}, "Interactions with someone’s surroundings. Use ARKit to facilitate interactions between your content and the surroundings. For example, detect planar surfaces to use as anchor points for your content. See ARKit.": {"zh": "与周围环境的互动。使用 ARKit 可促进你的内容与周围环境之间的互动。例如，检测平面以用作内容的锚点。请参阅 ARKit。", "tips": ""}, "If you built your interface using UIKit, you can still load iOS storyboards into your app, but you can’t customize your interface for visionOS or include 3D content. To include visionOS content in your app, programmatically add your SwiftUI views using UIHostingController or UIViewRepresentable. Alternatively, migrate the relevant parts of your interface to SwiftUI. Moving your interface to SwiftUI gives you less code to maintain and makes it easier to validate that your interface does what you want.": {"zh": "如果你使用 UIKit 构建了界面，你仍可将 iOS 故事板加载到你的应用中，但无法为 visionOS 定制界面或包含 3D 内容。要在应用中包含 visionOS 内容，请使用 UIHostingController 或 UIViewRepresentable 以编程方式添加 SwiftUI 视图。又或者，将界面的相关部分迁移到 SwiftUI。将界面迁移到 SwiftUI 会减少需要维护的代码，并更容易验证你的界面是否按你的需求运行。", "tips": ""}, "For information about mixing SwiftUI and UIKit content, see UIKit integration in SwiftUI. For guidance on how best to incorporate depth and 3D elements in your interface, see Human Interface Guidelines.": {"zh": "关于同时使用 SwiftUI 和 UIKit 内容的更多信息，请参阅 SwiftUI 中的 UIKit 集成。有关如何最好地在界面中融入深度和 3D 元素的指南，请参阅人机界面指南。", "tips": ""}, "Update your app’s assets": {"zh": "更新应用的素材资源", "tips": ""}, "Add vector-based or high-resolution images to your project specifically to support visionOS. In visionOS, people can view your app’s content at different angles and different distances, so image pixels rarely line up with screen pixels. Vector-based images work best because they maintain their detail and crispness at any size. For bitmap-based images, use high-resolution images (@2x or better) to ensure your images retain detail at different sizes.": {"zh": "在你的项目中添加基于矢量或高分辨率的图像，以专门支持 visionOS。在 visionOS 中，用户可以从不同角度和不同距离观看应用的内容，因此图像像素很少与屏幕像素对齐。基于矢量的图像效果最佳，因为它们在任何尺寸下都能保持细节和清晰度。对于位图图像，请使用高分辨率图像（@2x 或更高），以确保图像在不同尺寸下都能保持细节。", "tips": ""}, "For more information about designing images for your app, see Images in Human Interface Guidelines.": {"zh": "有关为应用设计图像的详细信息，请参阅人机界面指南中的图像章节。", "tips": ""}, "Decide whether to port your app at all": {"zh": "决定是否移植应用", "tips": ""}, "In some cases, it might not make sense to port your app for visionOS. For example, don’t port the following types of apps:": {"zh": "在某些情况下，将应用移植到 visionOS 可能并不合理。例如，请勿移植以下类型的应用：", "tips": ""}, "Apps that act as containers for app extensions. This includes apps where the primary purpose is to deliver custom keyboard extensions, device drivers, sticker packs, SMS and MMS message filtering extensions, call directory extensions, or widgets.": {"zh": "作为应用扩展信息容器的应用。这包括了主要目的是提供自定义键盘扩展、设备驱动程序、贴纸包、短信和彩信过滤扩展、通话目录扩展或小组件的应用。", "tips": ""}, "Movement-based apps. This includes apps that follow a person’s location changes, such as apps that offer turn-by-turn directions or navigation. It also includes apps that track body movements.": {"zh": "基于运动的应用。这包括了追踪用户位置变化的应用程序，如提供转弯指示或导航的应用程序。也包括了追踪身体运动的应用程序。", "tips": ""}, "Selfie or photography apps. This includes apps where the primary purpose is to capture images or video from the device’s cameras.": {"zh": "自拍或摄影类应用。这包括以通过设备摄像头捕捉图像或视频为主要目的的应用程序。", "tips": ""}, "If your app uses an unsupported feature but can function without it, you can still bring your app to visionOS. Remove features that aren’t available and focus on bringing the rest of your content to the platform. For example, if you have an app that lets people write down notes and take pictures to include with those notes, disable the picture-taking ability in visionOS but let people add text and incorporate images they already have.": {"zh": "如果你的应用使用了不支持的功能，但在没有该功能的情况下也能正常运行，你仍然可以将应用移植到 visionOS 中。移除不支持的功能，并专注于将其他内容移植到该平台。例如，如果你有一款应用可以让用户写下笔记并拍照放在笔记中，那么你可以在 visionOS 中禁用拍照功能，但允许用户添加文字并整合已有的图片。", "tips": ""}}
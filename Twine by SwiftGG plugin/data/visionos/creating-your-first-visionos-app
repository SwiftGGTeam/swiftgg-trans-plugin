{"Creating your first visionOS app": {"zh": "创建你的第一个 visionOS 应用", "tips": ""}, "Build a new visionOS app using SwiftUI and add platform-specific features.": {"zh": "使用 SwiftUI 构建新的 visionOS 应用，并添加平台特有的功能。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "If you’re new to visionOS, start with a new Xcode project to learn about the platform features, and to familiarize yourself with visionOS content and techniques. When you build an app for visionOS, SwiftUI is an excellent choice because it gives you full access to visionOS features. Although you can also use UIKit to build portions of your app, you need to use SwiftUI for many features that are unique to the platform.": {"zh": "如果你是 visionOS 的新手，请从一个新的 Xcode 项目开始，了解平台功能，并熟悉 visionOS 的内容和技术。当你为 visionOS 构建应用时，SwiftUI 是一个绝佳的选择，因为它能让你完全发挥 visionOS 的功能。虽然你也可以使用 UIKit 构建部分应用，但你需要使用 SwiftUI 来实现许多该平台的特有功能。", "tips": ""}, "Note": {"zh": "备注", "tips": ""}, "Developing for visionOS requires a Mac with Apple silicon.": {"zh": "为 visionOS 开发需要配备 Apple 芯片的 Mac。", "tips": ""}, "In any SwiftUI app, you place content onscreen using scenes. A scene contains the views and controls to display onscreen. Scenes also define the appearance of those views and controls when they appear onscreen. In visionOS, you can include both 2D and 3D views in the same scene, and you can present those views in a window or as part of the person’s surroundings.": {"zh": "在任何 SwiftUI 应用中，你都可以使用场景在屏幕上放置内容。场景包含了要在屏幕上显示的视图和控件。场景还定义了这些视图和控件在屏幕上显示时的外观。在 visionOS 中，你可以在同一场景中包含二维和三维视图，也可以将这些视图呈现在窗口或在用户周围环境中。", "tips": ""}, "Start with a new Xcode project and add features to familiarize yourself with visionOS content and techniques. Run your app in Simulator to verify your content looks like you expect, and run it on device to see your 3D content come to life.": {"zh": "从一个新的 Xcode 项目开始，添加功能以熟悉 visionOS 的内容和技术。在模拟器中运行应用，验证内容是否符合你的预期，然后在设备上运行以见证栩栩如生的三维内容。", "tips": ""}, "Organize your content around one or more scenes, which manage your app’s interface. Each scene contains the views and controls you want to display, and the scene type determines whether your content adopts a 2D or 3D appearance. SwiftUI adds 3D scene types specifically for visionOS, and also adds 3D elements and layout options for all scene types.": {"zh": "围绕一个或多个场景组织内容，场景决定了应用的界面。每个场景都包含了你要显示的视图和控件，而场景类型则决定你的内容采用二维还是三维外观。SwiftUI 专门为 visionOS 添加了三维场景类型，还为所有场景类型添加了三维元素和布局选项。", "tips": ""}, "Create your Xcode project": {"zh": "创建 Xcode 项目", "tips": ""}, "Create a new project in Xcode by choosing File > New > Project. Navigate to the visionOS section of the template chooser, and choose the App template. When prompted, specify a name for your project along with other options.": {"zh": "在 Xcode 中选择 \"文件\">\"新建\">\"项目\"，创建一个新项目。导航至模板选择器的 visionOS 部分，然后选择应用模板。出现提示时，为项目指定名称和其他选项。", "tips": ""}, "When creating a new visionOS app, you can configure your app’s initial scene types from the configuration dialog. To display primarily 2D content in your initial scene, choose a Window as your initial scene type. For primarily 3D content, choose a Volume. You can also add an immersive scene to place your content in the person’s surroundings.": {"zh": "创建新的 visionOS 应用时，你可以在配置对话框中配置应用的初始场景类型。如果要在初始场景中主要显示二维内容，请选择 \"窗口 \"作为初始场景类型。如果主要显示三维内容，则选择 \"体量\"。你还可以添加一个沉浸式场景，将内容置于用户的周围环境中。", "tips": ""}, "Include a Reality Composer Pro project file when you want to create 3D assets or scenes to display from your app. Use this project file to build content from primitive shapes and existing USDZ assets. You can also use it to build and test custom RealityKit animations and behaviors for your content.": {"zh": "当你想创建显示在应用中的三维素材或场景时，请包含一个 Reality Composer Pro 项目文件。使用此项目文件可从原始形状和现有的 USDZ 素材创建内容。你还可以用它为你的内容构建并测试自定义的 RealityKit 动画和行为。", "tips": ""}, "Modify the existing window": {"zh": "修改现有窗口", "tips": ""}, "Build your initial interface using standard SwiftUI views. Views provide the basic content for your interface, and you customize the appearance and behavior of them using SwiftUI modifiers. For example, the .background modifier adds a partially transparent tint color behind your content:": {"zh": "使用标准 SwiftUI 视图构建初始界面。视图为界面提供了基本内容，你可以使用 SwiftUI 修饰符自定义视图的外观和行为。例如，.background 修饰符可在内容后方添加半透明的色调：", "tips": ""}, "To learn more about how to create and configure interfaces using SwiftUI, see SwiftUI Essentials.": {"zh": "要进一步了解如何使用 SwiftUI 创建和配置界面，请参阅 SwiftUI Essentials。", "tips": ""}, "Handle events in your views": {"zh": "处理视图中的事件", "tips": ""}, "Many SwiftUI views handle interactions automatically — all you do is provide code to run when the interactions occur. You can also add SwiftUI gesture recognizers to a view to handle tap, long-press, drag, rotate, and zoom gestures. The system automatically maps the following types of input to your SwiftUI event-handling code:": {"zh": "许多 SwiftUI 视图会自动处理交互，你只需在交互发生时提供要运行的代码即可。你还可以在视图中添加 SwiftUI 手势识别器，以处理轻点、长按、拖动、旋转和缩放手势。系统会自动将以下类型的输入映射到你的 SwiftUI 事件处理代码中：", "tips": ""}, "Indirect input. The person’s eyes indicate the target of an interaction. To start the interaction, the person touches their thumb and forefinger together on one or both hands. Additional finger and hand movements define the gesture type.": {"zh": "间接输入。用户眼睛指示出了互动目标。要开始互动，用户会将一只或两只手的拇指和食指并拢。其他的手指和手掌动作决定了手势的类型。", "tips": ""}, "Direct input. When a person’s finger occupies the same space as an onscreen item, the system reports an interaction. Additional finger and hand movements define the gesture type.": {"zh": "直接输入。当用户手指与屏幕上的项目占据相同空间时，系统会报告一次交互。其他的手指和手掌动作决定了手势的类型。", "tips": ""}, "Keyboard input. People can use a connected mouse, trackpad, or keyboard to interact with items, trigger menu commands, and perform gestures.": {"zh": "键盘输入。用户可以使用连接的鼠标、触控板或键盘与项目互动，触发菜单命令并执行手势。", "tips": ""}, "For more information about handling interactions in SwiftUI views, see Handling User Input in the SwiftUI Essentials tutorial.": {"zh": "有关在 SwiftUI 视图中处理交互的更多信息，请参阅 SwiftUI Essentials 教程中的处理用户输入。", "tips": ""}, "Build and run your app": {"zh": "构建并运行应用", "tips": ""}, "Build and run your app in Simulator to see how it looks. Simulator for visionOS has a virtual background as the backdrop for your app’s content. Use your keyboard and your mouse or trackpad to navigate around the environment and interact with your app.": {"zh": "在模拟器中构建并运行应用来查看外观。visionOS 模拟器有一个虚拟背景，作为应用内容的背景。使用键盘，鼠标或触控板在环境中导航，并与应用进行交互。", "tips": ""}, "Tap and drag the window bar below your app’s content to reposition the window in the environment. Move the pointer over the circle next to the window bar to reveal the window’s close button. Move the cursor to one of the window’s corners to turn the window bar into a resizing control.": {"zh": "轻点并拖动应用内容下方的窗口栏，可调整窗口在环境中的位置。将指针移至窗口栏旁边的圆圈上，显示窗口的关闭按钮。将光标移至窗口的某个角落，可将窗口栏变成一个调整大小的控件。", "tips": ""}, "Apps don’t control the placement of windows in the space. The system places each window in its initial position, and updates that position based on further interactions with the app.": {"zh": "应用无法控制窗口在空间中的位置。系统会将每个窗口放置在其初始位置，并根据与应用的进一步交互更新该位置。", "tips": ""}, "For additional information about how to interact with your app in Simulator, see Interacting with your app in the visionOS simulator.": {"zh": "有关如何在模拟器中与应用交互的更多信息，请参阅在 visionOS 模拟器中与应用交互。", "tips": ""}}
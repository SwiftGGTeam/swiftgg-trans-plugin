{"Designing RealityKit content with Reality Composer Pro": {"zh": "使用 Reality Composer Pro 设计 RealityKit 内容", "tips": ""}, "Design RealityKit scenes for your visionOS app.": {"zh": "为你的 visionOS 应用设计 RealityKit 场景。", "tips": ""}, "Overview": {"zh": "概览", "tips": ""}, "Use Reality Composer Pro to visually design, edit, and preview RealityKit content. In Reality Composer Pro, you can create one or more scenes, which act as a container for RealityKit content. Scenes contain hierarchies of entities, which are virtual objects such as 3D models.": {"zh": "Reality Composer Pro 能用于可视化设计、编辑和预览 RealityKit 内容。在 Reality Composer Pro 中，你可以创建一个或多个场景，将其当作 RealityKit 内容的容器。场景包含实体层级，而这些实体则是例如 3D 模型等的虚拟对象。", "tips": ""}, "In addition to helping you compose scenes, Reality Composer Pro also gives you the ability to add and configure components — even custom components that you’ve written — to the entities in your scenes and also lets you create complex materials and effects using a node-based material editor called Shader Graph.": {"zh": "除了可以帮助你编排场景，Reality Composer Pro 还能让你添加和配置组件——包括你自己编写的自定义组件——到你场景中的实体。并且允许你使用一个基于节点的材质编辑器（称之为 Shader Graph）来创建复杂的材质和效果。", "tips": ""}, "Launch Reality Composer Pro": {"zh": "启动 Reality Composer Pro", "tips": ""}, "When you create a visionOS project in Xcode, it also contains a default Reality Composer Pro project named RealityKitContent within the Packages folder, which is a Swift package. The RealityKitContent package can include images, 3D models, and other assets like audio and video files. The assets you add to your project go in the RealityKitContent.rkassets bundle, while your source code goes into its Sources directory. The package also contains a file called Package.realitycomposerpro, which is the actual Reality Composer Pro project.": {"zh": "当你在 Xcode 中创建一个 visionOS 项目时，它还会在 Packages 文件夹中包含一个名为 RealityKitContent 的默认的 Reality Composer Pro 项目，它是一个 Swift package。RealityKitContent 包可以包括图像、3D 模型以及其他音视频文件资源。你添加到项目中的资源会放到 RealityKitContent.rkassets 包中，而源代码则会放在 Sources 目录下。这个包还带有一个名为 Package.realitycomposerpro 的文件，这就是实际的 Reality Composer Pro 项目。", "tips": ""}, "To launch Reality Composer Pro, double-click the Package.realitycomposerpro file in the Project navigator, or click the Open in Reality Composer Pro button. If your project doesn’t already have a Reality Composer Pro project, you can launch Reality Composer Pro directly by choosing Xcode > Open Developer Tool > Reality Composer Pro.": {"zh": "要启动 Reality Composer Pro，可以在项目导航栏（Project navigator）中双击 Package.realitycomposerpro 文件，或者点击“Open in Reality Composer Pro”按钮。如果你的项目还没有 Reality Composer Pro 项目，你可以通过选择 Xcode > Open Developer Tool > Reality Composer Pro 的方式直接启动 Reality Composer Pro。", "tips": ""}, "For efficiency, store all of your RealityKit assets in Reality Composer Pro projects. Xcode compiles Reality Composer Pro projects into a more efficient format when you build your app.": {"zh": "要想提高效率，可以将你所有的 RealityKit 资源保存到 Reality Composer Pro 项目中。Xcode 会在你构建项目时将 Reality Composer Pro 项目编译成更高效的格式。", "tips": ""}, "Note": {"zh": "注意", "tips": ""}, "Loading assets from a .reality file is considerably faster and more resource efficient than loading individual asset files.": {"zh": "从 .reality 文件加载资源，会比加载单个资源文件要快得多，而且更有效率。", "tips": ""}, "Orient yourself in Reality Composer Pro": {"zh": "熟悉 Reality Composer Pro 的操作界面", "tips": ""}, "The Reality Composer Pro window has several sections. The top-half displays the active scene. If you have multiple scenes, the window shows a tab bar at the top with one tab for each open scene. A scene in Reality Composer Pro is an entity hierarchy stored in a .usda file.": {"zh": "Reality Composer Pro 窗口包含多个部分。在上半部分显示处于活跃状态的场景。如果你有多个场景，在窗口顶部会有标签栏，每一个打开的场景对应一个标签页。在 Reality Composer Pro 中的场景是一个保存在 .usda 文件中的实体层级。", "tips": ""}, "The left side of the top pane contains the hierarchy browser, which shows a tree representation of the entities in the active scene. You can toggle it using the top-left toolbar button to reveal errors and warnings. The middle pane is the 3D View, which shows a 3D representation of the active scene. The top-right is the inspector, which shows configurable values for the item selected in the 3D view, hierarchy view, or Shader Graph, depending on which has focus.": {"zh": "上半部分面板的左侧是层级结构浏览工具，以树状结构显示当前活跃状态场景中的实体。你可以使用左上角的工具栏按钮来进行错误、警告和层级视图结构的显示切换。中间的面板是 3D 视图，展示活跃场景的 3D 内容。在右上角是检查器，分别显示在 3D 视图模式、层级视图模式或者 Shader Graph 下选中的内容的可配置值，具体取决于当前选中的内容。", "tips": ""}, "Tip": {"zh": "建议", "tips": ""}, "A Reality Composer Pro scene can represent an entire RealityKit scene, and you can have multiple scenes in your Reality Composer Pro project, each driving a different RealityView in the same app. A scene can also contain a collection of entities to use as a building block. For example, if you had an airplane model, you might build a scene for it that contains its 3D model, a particle effect to make smoke come out its engine, and audio entities or components that represent the various sounds a plane makes. Your app could then load those combined assets and use them together anywhere it needs.": {"zh": "一个 Reality Composer Pro 场景可以表示整个 RealityKit 场景，并且你可以在 Reality Composer Pro 项目中拥有多个场景，在同一个应用中，每一个场景负责驱动不同的 RealityView。一个场景还可以包含一系列作为构建模块的实体。举个例子来说，如果你有一架飞机模型，你可能会为它构建一个包含 3D 模型的场景，从引擎中生成烟雾效果的粒子模型，以及展现飞机产生的各种声音的音频实体或组件。你的应用可以加载这些合并后的资源，并在任何需要的地方使用。", "tips": ""}, "The bottom half of Reality Composer Pro contains the following four tabs:": {"zh": "Reality Composer Pro 的下半部分包含以下四个标签页：", "tips": ""}, "Displays all of the assets in your project.": {"zh": "显示你的项目中的所有资源。", "tips": ""}, "An advanced, node-based material editor.": {"zh": "一种先进的、基于节点的材质编辑器。", "tips": ""}, "A tool for combining sound assets.": {"zh": "一个用于合成声音资源的工具。", "tips": ""}, "Information about the currently open scene, such as the number of entities, vertices, and animations it contains.": {"zh": "当前打开的场景信息，比如它包含的实体、顶点和动画的数量。", "tips": ""}, "Reality Composer Pro projects start with a single empty scene called Scene which is stored in a file called Scene.usda. You can create as many additional scenes as you need by choosing File > New > Scene. New scenes open as tabs along the top of the window, and they also appear in the Project Browser as .usda files.": {"zh": "Reality Composer Pro 项目在开始时会有一个名为 Scene 的空白场景，保存在 Scene.usda 文件中。你可以通过选择 File > New > Scene 来创建你所需的任意数量的新场景。新场景会作为窗口顶部的标签页打开，而且它们也会以 .usda 文件的形式出现在项目浏览器（Project Browser）中。", "tips": ""}, "If you close a scene’s tab and need to re-open it, double-click on the scene’s .usda file in the Project Browser. If you no longer need a scene, delete its .usda file from the Project Browser or remove it from your project’s .rkassets bundle in Xcode.": {"zh": "如果你关闭了一个场景的标签页且需要重新打开它，那么你可以在项目浏览器上双击场景的 .usda 文件。如果你不再需要一个场景，可以从项目浏览器中删除它的 .usda 文件，或者从 Xcode 中的项目的 .rkassets 包中删除它。", "tips": ""}, "To delete a scene:": {"zh": "要删除一个场景：", "tips": ""}, "Close the scene tab by selecting File > Close Tab": {"zh": "通过选择 File > Close Tab 来关闭场景标签页", "tips": ""}, "Select the scene’s .usda file in the Project Browser": {"zh": "在项目浏览器中选择场景的 .usda 文件", "tips": ""}, "Control-click the scene’s .usda file the Project Browser.": {"zh": "在项目浏览器中对场景的 .usda 文件按住 Control 的同时进行点击", "tips": ""}, "Choose Delete from the contextual menu.": {"zh": "在菜单中选择删除", "tips": ""}, "Click Move to Trash.": {"zh": "选择移动到废纸篓", "tips": ""}, "This removes the scene’s .usda and the scene tab at the top of the window.": {"zh": "这将移除窗口上方的场景标签页和场景的 .usda 文件。", "tips": ""}, "Add assets to your project": {"zh": "为你的项目添加资源", "tips": ""}, "In Reality Composer Pro, you design scenes by first importing assets into your project. Then add assets to scenes and move, rotate, and scale them. The Project Browser tab displays all of the asset files in your project. You can add new assets by dragging them to the Project Browser or by choosing File > Import and select the assets to add to your project. To add an asset from the Project Browser to the current scene, drag it to the 3D view in the center of the window, or to the hierarchy view in the top-left of the window.": {"zh": "在 Reality Composer Pro 中，你首先通过将资源导入到项目中来设计场景。然后将资源添加到场景中并对它们进行移动、旋转和缩放操作。项目浏览器标签页会显示项目中的所有资源文件。你可以将它们拖到项目浏览器或通过选择 File > Import 并选择要添加到项目中的资源来添加新的资源。要将项目浏览器中的一个资源添加到当前场景，你可以将它拖到窗口中心的 3D 视图上，或者拖动到窗口左上角的层级视图处。", "tips": ""}, "Reality Composer Pro projects can contain assets not used in any scene. Such assets are still compiled into your app and can be loaded at runtime and take full advantage of the efficient loading process for .reality files.": {"zh": "Reality Composer Pro 项目可以包含未在任何场景中使用的资源。这些资源依旧会被编译到你的应用中，并且在运行时加载，并能充分利用 .reality 文件高效的加载过程。", "tips": ""}, "Reality Composer Pro can represent many assets as entities, but it can’t represent all assets that way; for example:": {"zh": "Reality Composer Pro 可以将许多资源表示为实体，但并不适用于所有资源。例如：", "tips": ""}, "USDZ models do become an entity or entity hierarchy when you add them to a scene.": {"zh": "当你将 USDC 模型添加到场景中时，它们会变成一个实体或者实体层级结构。", "tips": ""}, "Image files do not become an entity. Reality Composer Pro only uses image assets indirectly, such as being the source texture for materials you build in Shader Graph. If you drag assets that Reality Composer Pro can’t turn into an entity, nothing happens.": {"zh": "图像文件不会变成实体。Reality Composer Pro 只会间接使用图像资源，比如作为你在 Shader Graph 中构建的材质的原始纹理。如果你拖动 Reality Composer Pro 无法转化成实体的资源，将不会造成任何影响。", "tips": ""}, "Add any 3D models, animations, sounds, and image files you need to your project. You can organize your assets into subfolders to make the Project Browser more manageable as your project grows in size.": {"zh": "将你所需的任何 3D 模型、动画、声音和图像文件添加到项目中。随着你项目规模的增长，为使项目浏览器更方便管理资源，可以将它们整理到各个子文件夹中。", "tips": ""}, "Reality Composer Pro has a library of assets that you can use in your own apps. You can access the library by clicking the Add button (+) in the toolbar. Click the icon of the down-arrow inside a circle next to an asset to download the asset to Reality Composer Pro. When the download finishes, you can double-click or drag the asset into your project.": {"zh": "Reality Composer Pro 有一个可以在自己的应用中使用的资源库。你可以通过点击工具栏中的添加按钮（+）来访问库。点击资源旁边带有向下箭头的圆环图标，将资源下载到 Reality Composer Pro。当下载完成后，你可以双击或者拖动资源到你的项目中。", "tips": ""}, "Important": {"zh": "重要", "tips": ""}, "Reality Composer Pro treats your imported assets as read-only.": {"zh": "Reality Composer Pro 将已导入的资源视作只读资源。", "tips": ""}, "Changes you make to assets in a scene only affect that scene’s copy of the asset. The changes you make are stored in the scene’s .usda file, not in the original asset. That means you can work without fear of inadvertently changing other scenes. If you plan to make significant changes to an imported 3D model, such as by replacing its materials with dynamic Shader Graph materials, import the model as a.usdc file instead of as a .usdz file, and then separately import just the supporting assets you need to avoid Xcode compiling assets that you don’t need into your app.": {"zh": "你在场景中对资源的修改只会影响该场景的资源副本。你所做出的更改会保存在场景的 .usda 文件中，而不是在原始资源中。这意味着你可以放心工作，无需担心对其他场景进行不必要的改动。如果你计划对已导入的 3D 模型作出重大修改，例如使用动态的 Shader Graph 材质替换其现有材质，那么需要将模型作为 .usdc 文件而不是 .usdz 文件导入，然后分别导入你需要的支持资源，以避免 Xcode 将你不需要的资源编译进你的应用。", "tips": ""}, "Compose scenes from assets": {"zh": "使用资源来合成场景", "tips": ""}, "All RealityKit entities in a scene exist at a specific position, orientation, and scale, even if that entity has no visual representation. When you click to select an entity in the 3D view or hierarchy view, Reality Composer Pro displays:": {"zh": "场景中所有 RealityKit 的实体都有一个明确的位置、方向和比例，即使该实体并不可见。当你在 3D 视图或者层级视图中选择一个实体时，Reality Composer Pro 会显示：", "tips": ""}, "A manipulator over the entity in the 3D view.": {"zh": "在 3D 视图中的实体上展示一个操纵器", "tips": ""}, "Any configurable values from the entity’s components in the inspector on the right.": {"zh": "在右侧检查器中显示实体组件的任何可以配置的值。", "tips": ""}, "You can use the manipulator to move, rotate, and scale the selected entity.": {"zh": "你可以使用操纵器来移动、旋转和缩放所选的实体。", "tips": ""}, "To move the selected entity around the 3D scene, drag the small colored cone that corresponds to the axis you want to move it along. Alternatively, you can drag the entity itself to move it freely relative to your viewing angle.": {"zh": "要在 3D 场景中移动所选实体，拖动与你想沿其移动的轴对应的小色锥。或者，你可以拖动实体本身，相对于你的观察角度来自由移动它。", "tips": ""}, "To rotate the selected entity, click on the manipulator’s rotation control, which looks like a circle, and drag in a circular motion.": {"zh": "要旋转所选实体，点击操纵器的旋转控件（它看起来像一个圆）并以圆的动作拖动。", "tips": ""}, "Reality Composer Pro’s manipulator only shows one rotation control at a time.": {"zh": "Reality Composer Pro 的操纵器在同一时间只显示一个旋转控件。", "tips": ""}, "To rotate an entity on one of the other axes, click the cone corresponding to the axis you want to rotate. For example, if you want to rotate the entity on the X axis, tap the red cone to bring up the red rotation handle for that axis.": {"zh": "要在其他轴上旋转实体，点击你想要旋转的轴对应的圆锥。例如，如果你想在 X 轴上旋转实体，点击红色圆锥，使其为该轴带出红色的旋转手柄。", "tips": ""}, "To scale the selected entity uniformly, click the rotation circle and drag away from the entity origin to scale it up, or toward the entity origin to scale it down. Because it scales uniformly, it doesn’t matter which rotation handle Reality Composer Pro is showing.": {"zh": "要统一缩放所选实体，点击旋转圈并从实体原点向外拖动以放大它，或者向实体原点方向拖动以缩小它。由于它是等比例缩放，无论 Reality Composer Pro 正在显示哪个旋转手柄都没有关系。", "tips": ""}, "In the manipulator, Red indicates the X axis, Green indicates the Y axis, and Blue indicates the Z axis.": {"zh": "在操纵器中，红色代表 X 轴，绿色代表 Y 轴，蓝色代表 Z 轴。", "tips": ""}, "Alternatively, you can make the same changes to the selected entity by typing new values into the transform component of the inspector. The transform component stores the position, rotation, and scale for an entity. The manipulator is just a visual way to change the values on this component.": {"zh": "另外，你也可以通过在检查器的转换组件中输入新的值，来对选中的实体应用同样的更改操作。转换组件保存实体的位置、旋转和缩放数值。操纵器只是通过可视化来改变此组件值的一种方式。", "tips": ""}, "Activate and deactivate scene entities": {"zh": "激活和停用场景中的实体", "tips": ""}, "Reality Composer Pro scenes can get quite complex and sometimes contain overlapping entities, which can be difficult to work with. To simplify a scene, you can deactivate entities to remove them from the 3D view. Deactivate entities by Control-clicking them and selecting Deactivate from the contextual menu. The entity still exists in your project and is shown in the hierarchy view, albeit grayed out and without any child entities. It won’t, however, appear in the 3D view. Xcode doesn’t compile deactivated entities into your app’s bundle, so it’s important to re-activate any entities your app needs before saving your project. To reactivate an entity, Control-click the entity in the hierarchy view and select Activate from the contextual menu.": {"zh": "Reality Composer Pro 的场景可能会非常复杂，有时候会包含难以处理的、重叠的实体。为了简化场景，你可以停用实体从而将它们从 3D 视图中移除。通过按住 Control 的同时在实体上点击，并在上下文菜单中选择停用来停用这个实体。尽管它已经变成灰色而且没有了任何的子实体，但它仍然存在于你的项目中，并在层级视图中展示。然而，它不会展现在 3D 视图中。Xcode 不会将停用的实体编译进应用的包中，所以，在保存项目之前重新激活应用需要的实体是非常重要的。要重新激活实体，可以在层级视图中按住 Control 的同时点击实体，并从上下文菜单中选择激活。", "tips": ""}, "Add components to entities": {"zh": "为实体添加组件", "tips": ""}, "RealityKit follows a design pattern called Entity-Component-System (ECS). In ECS, you store data on an entity using components and then implement entity behavior by writing systems that use the data from those components. You can add and configure components to entities in Reality Composer Pro, including both built-in components like ParticleEmitterComponent, and custom components that you write and place in the Sources folder of your Reality Composer Pro Swift package. You can also create new components in Reality Composer Pro and edit them in Xcode.": {"zh": "RealityKit 遵循名为 ECS（Entity-Component-System）的设计模式。在 ECS 中，你通过使用组件来保存实体上的数据，然后通过编写各个系统来实现实体的行为，这些系统则使用保存在组件的数据。你可以在 Reality Composer Pro 中为实体添加和配置组件，包括像内置的 ParticleEmitterComponent 这样的组件，以及你编写并放置在你的 Reality Composer Pro Swift 包的 Sources 文件夹中的自定义组件。你还可以在 Reality Composer Pro 中创建新的组件，并在 Xcode 中对它们进行编辑。", "tips": ""}, "For more information about ECS, see Understanding RealityKit’s modular architecture.": {"zh": "更多有关 ECS 的内容，详见“理解 RealityKit 的模块化结构”一文。", "tips": ""}, "To add a component to an entity, select that entity in the hierarchy view or 3D view. At the bottom-right of the inspector window, click Add Component. A list of available components appears with New Component at the top. If you select the first item, Reality Composer Pro creates a new component class in the Sources folder, and optionally a new system class. It also adds the component to the selected entity. If you select any other item in the list, it adds that component to the selected entity if it doesn’t already have that component.": {"zh": "要将组件添加到实体，可以从层级视图或者 3D 视图中选择实体。在检查器窗口的右下角，点击 “Add Component”。会在窗口顶部出现一个名为“New Component”的可用组件列表。如果你选择列表中的第一项，Reality Composer Pro 会在 Sources 文件夹中创建一个新的组件类，和一个可选的新的系统类。它还会将该组件添加到所选的实体。如果你选择列表中的任何其他项，如果该实体尚未拥有该组件，它将将该组件添加到所选实体。", "tips": ""}, "Create or modify entity hierarchies": {"zh": "创建或修改实体层级结构", "tips": ""}, "Reality Composer Pro scenes are hierarchies of RealityKit entities. You can change the relationship between entities in the hierarchy browser except for parts of the hierarchy imported from a .usdz file, which Reality Composer Pro treats as a read-only file.": {"zh": "Reality Composer Pro 的场景是 RealityKit 实体的层级结构。你可以在层级结构浏览器中更改实体之间的关系，除了从 .usdz 文件导入的层级结构那部分以外，因为 Reality Composer Pro 将其视作只读文件。", "tips": ""}, "To change the relationship between entities, or to create a relationship between two currently unrelated entities, use the hierarchy view and drag an entity onto the entity that you want it to be part of. If you want an entity to become a root entity, drag it to the Root transform at the top of the hierarchy view.": {"zh": "要更改实体之间的关系，或是在当前无关的两个实体之间建立新联系，使用层级结构视图并将实体拖放到你希望产生联系的另一个实体之上。如果你想让实体成为根实体，那就将它拖到层级视图顶部的 Root transform 上。", "tips": ""}, "Modify or create new materials": {"zh": "修改或创建新材质", "tips": ""}, "When you import a USDZ model into Reality Composer Pro, it creates a RealityKit material for every physically-based rendering (PBR) material the asset contains. Reality Composer Pro displays materials in the hierarchy view just like it displays entities, except it uses a paintbrush icon. Reality Composer Pro doesn’t display materials in the 3D view.": {"zh": "当你将 USDZ 模型导入到 Reality Composer Pro 时，它会为资源包含的所有基于物理渲染的材质（PBR）创建一个对应的 RealityKit 材质。RealityKit Composer Pro 就可以像在展示实体一样在层级视图中展示材质，唯一区别是它使用了画笔图标。Reality Composer Pro 不会在 3D 视图中展示材质。", "tips": ""}, "The library in Reality Composer Pro contains materials for several common real-world surfaces like metal, wood, and denim that you can import into your project.": {"zh": "Reality Composer Pro 的资源库中包含了一些真实世界常见的材质，诸如金属、木材和牛仔布，你可以将它们导入到你的项目中。", "tips": ""}, "If you select a PBR material in the hierarchy view, you can edit it using the inspector. You can replace images, colors, or values for any of the PBR attributes with another image, color, or value of your choosing. Any changes you make to a material affects any entity that’s bound to that material. You can also create new materials from scratch by clicking the Add button (+) at the bottom of the scene hierarchy and choosing Material.": {"zh": "如果你在层级视图中选择了一个 PBR 材质，你可以使用检查器来进行编辑。你可以用你选择的其他图像、颜色或值来替换 PBR 属性中的任何图像、颜色或值。你对材质的进行的任何修改都会影响到绑定到该材质的所有实体。你也能够通过在场景层级的底部点击添加按钮（+）并选择 Material 来创建全新的材质。", "tips": ""}, "Build materials in Shader Graph": {"zh": "在 Shader Graph 中构建材质", "tips": ""}, "PBR materials are great at reproducing real-world surfaces. However, they can’t represent nonrealistic materials like cartoon shaders, and they can’t contain logic. This means that you can’t animate a PBR material or have it react to input from your app.": {"zh": "PBR 材质擅长再现真实世界的表面。然而，它们不能表示像卡通着色器这样的非现实材质，也不能包含逻辑。这意味着你不能对 PBR 材质进行动画处理，也不能让它对你的应用输入作出反应。", "tips": ""}, "Reality Composer Pro offers a second type of material called a custom material. You can build and edit custom materials using the Shader Graph tab. Shader Graph provides a tremendous amount of control over materials and allows you to do things that would otherwise require writing Metal shaders. For more information on writing Metal shaders, see Metal.": {"zh": "Reality Composer Pro 提供了第二种类型的材质，称为自定义材质。你可以使用 Shader Graph 标签来构建和编辑自定义材质。Shader Graph 提供了对材质的高度控制能力，并使你能够实现通常需要编写 Metal 着色器才能完成的操作。有关编写 Metal 着色器的更多信息，请参见 Metal。", "tips": ""}, "RealityKit doesn’t represent Reality Composer Pro custom materials as an instance of CustomMaterial, as you might expect. Instead, RealityKit represents these materials as ShaderGraphMaterial instances.": {"zh": "RealityKit 不会像你可能预期的那样，将 Reality Composer Pro 的自定义材质表示为 CustomMaterial 的实例。相反，RealityKit 会将这些材质表示为 ShaderGraphMaterial 实例。", "tips": ""}, "The materials you build in the editor can affect both the look of an entity and its shape. If you build a node graph and connect it to the Custom Surface pin on the output node, that node graph controls the surface appearance of the model and roughly equates to writing Metal code in a fragment shader. If you build a node graph and connect it to the Custom Geometry Modifier output pin, those nodes control the shape of the entity, which equates to Metal code running in a vertex shader.": {"zh": "在编辑器中你所构建的材质能够影响实体的外观和形状。如果你构建了一个节点图并将其连接到输出节点上的 Custom Surface 引脚，那么该节点图就会控制模型的表面外观，这基本上等同于在片段着色器中编写 Metal 代码。如果你构建了一个节点图并将其连接到 Custom Geometry Modifier 输出引脚，那么这些节点就会控制实体的形状，这等同于在顶点着色器中运行 Metal 代码。", "tips": ""}, "Nodes represent values and operations and serve the same purpose as either a variable or constant, or a function in Metal. If you need the sine of a value, for example, connect the value’s output node to the input pin of a Sin node. Add new nodes to the graph by double-clicking the background of the Shader Graph view or click the New Node button on the right side of the screen.": {"zh": "节点代表值和操作，其作用与 Metal 中的变量或常数，或函数相同。例如，如果你需要一个值的正弦，将值的输出节点连接到 Sin 节点的输入引脚。通过双击 Shader Graph 视图的背景或点击屏幕右侧的“New Node”按钮，可以向图中添加新的节点。", "tips": ""}, "Some nodes, like Sin, are universal and can be used with either output pin. Other nodes are specific to either the Custom Surface or Geometry Modifier outputs. If a node name starts with Geometry Modifier, you can only connect it to the Geometry Modifier output pin. If the node’s name starts with “Surface”, you can only connect it to the Custom Surface output pin.": {"zh": "一些节点，比如 Sin，是通用的，可以用于任意输出引脚。其他节点则特定于 Custom Surface 或 Geometry Modifier 输出。如果一个节点的名称以 Geometry Modifier 开头，那么你只能将它连接到 Geometry Modifier 输出引脚。如果节点的名称以“Surface”开头，你只能将它连接到 Custom Surface 输出引脚。", "tips": ""}, "To unlock the real power of Shader Graph, you need to be able to change values on the material from Swift code. Shader Graph allows you to do this by creating promoted inputs, which are parameters you can set and read from Swift to change your material at runtime. If you have a feature that you want to turn on and off, you might create a Boolean input parameter and have conditional logic based on its value. If you want to smoothly interpolate between two colors, you might create a Float input parameter and use it to control how to interpolate between the two colors. You can Control-click on a constant node and select Promote to turn it into a promoted input. You can also turn a promoted input back into a constant by Control-clicking it and selecting Demote.": {"zh": "要解锁 Shader Graph 的真正能力，你需要通过 Swift 代码来更改材质上的值。Shader Graph 允许你通过创建提升输入（promoted input）来达到这一点，这些输入是你可以在 Swift 中设置和读取的参数，用于改变在运行时的材质。如果你有一个想要开启和关闭的功能，你可能会创建一个 Boolean 输入参数，并根据其值执行条件逻辑。如果你想在两种颜色之间平滑插值，你可能会创建一个 Float 输入参数，并使用它来控制如何在两种颜色之间插值。你可以按住 Control 并点击一个常量节点并选择 Promote 来将其转换为提升输入。你也可以通过按住 Control 并点击它并选择 Demote 来将提升输入转换回常量。", "tips": ""}, "If you don’t have an existing constant to promote, you can create new promoted inputs using the inspector. The New Input button only shows up in the inspector when you select a material in the hierarchy view but have no nodes selected in the Shader Graph tab.": {"zh": "如果你没有要提升的现有常量，你可以使用检查器创建新的提升输入。只有当在你在层级视图中选择了材质，但在 Shader Graph 标签中未选择任何节点时，“New Input”按钮才会在检查器中显示。", "tips": ""}, "To change the value of an input parameter from Swift code, use setParameter(name:value:), passing the name of the parameter and the new value. Note that parameter names are case sensitive, so your name string must exactly match what you called the parameter in Shader Graph.": {"zh": "要从 Swift 代码中更改输入参数的值，使用 setParameter(name:value:) 方法，传入参数名和新值。请注意，参数名称是区分大小写的，因此你的名称字符串必须与你在 Shader Graph 中为参数所取的名称完全匹配。", "tips": ""}, "For examples of Shader Graph use, see Diorama and Happy Beam.": {"zh": "要查看 Shader Graph 的使用示例，可参看 Diorama 和 Happy Beam。", "tips": ""}, "Use references to reuse assets": {"zh": "使用引用来复用资源", "tips": ""}, "If your project has multiple scenes that share assets, you can use references to avoid creating duplicate assets. A reference acts like an alias in Finder — it points to the original asset and functions just as if it were another copy of that asset.": {"zh": "如果你的项目包含多个共享资源的场景，你可以使用引用来避免创建重复的资源。引用就像 Finder 中的别名——它指向原始资源，并且功能上就像是该资源的另一份副本。", "tips": ""}, "Create references using the inspector. By default, the references section is hidden for entities and materials that don’t have any references. To add a new reference to an asset or material that doesn’t have one, choose Reality Composer Pro > Settings and uncheck Hide Empty References.": {"zh": "使用检查器来创建引用。默认情况下，对于没有任何引用的实体和材质，引用部分是隐藏的。要为没有引用的资源或材质添加新引用，需要选择 Reality Composer Pro > Settings，然后取消选中“Hide Empty References”。", "tips": ""}, "To add a reference, click the Add button (+) at the bottom of the references section in the inspector, choose the .usda file for the scene that contains the asset, then choose the asset you want to link to. After you do that, the selected entity or material becomes a copy of the one you linked to.": {"zh": "要添加引用，单击检查器中引用部分底部的添加按钮（+），选择包含该资源的场景的 .usda 文件，然后选择你想要链接的资源。完成后，所选的实体或材质将成为你链接的那个的副本。", "tips": ""}, "If you make changes to a linked asset, those changes will affect every linked reference.": {"zh": "如果你对链接的资源进行了更改，那么这些更改将影响每个链接的引用。", "tips": ""}, "Preview scenes on device": {"zh": "在设备上预览场景", "tips": ""}, "If you have an Apple Vision Pro connected to your Mac, choose Preview > Play or click the preview button in the Reality Composer Pro toolbar to view your scene on device. The Preview button is the left-most button on the right side of the toolbar — the one with an Apple Vision Pro icon. If you have multiple Apple Vision Pro devices connected, choose which device to use by clicking the pull-down menu next to the Preview button.": {"zh": "如果你的 Mac 上连接了一台 Apple Vision Pro，选择 Preview > Play 或点击 Reality Composer Pro 工具栏中的预览按钮，就可以在设备上查看你的场景。预览按钮是工具栏右侧最左边的按钮——带有 Apple Vision Pro 图标的按钮。如果你连了多台 Apple Vision Pro 设备，通过点击预览按钮旁边的下拉菜单选择要使用的设备。", "tips": ""}, "Load Reality Composer Pro scenes in RealityKit": {"zh": "在 RealityKit 中加载 Reality Composer Pro 场景", "tips": ""}, "Loading a Reality Composer Pro scene is nearly identical to loading a USDZ asset from your app bundle, except you have to specify the Reality Composer Pro package bundle instead. You typically do this in the make closure of a RealityView initializer. Reality Composer Pro packages define a global constant that points to its bundle, which is named after the project with “Bundle” appended to it. In the default Xcode visionOS template, the Reality Composer Pro project is called RealityKitContent, so the global bundle variable is called realityKitContentBundle:": {"zh": "加载 Reality Composer Pro 场景与从你的应用包中加载 USDZ 资源几乎相同，只是你需要指定 Reality Composer Pro 的包内容。你通常会在 RealityView 初始化方法的闭包中完成这一操作。Reality Composer Pro 包定义了一个全局常量，该常量指向其自身的 bundle，并且它的名称是在项目名称后添加“Bundle\"。在默认的 Xcode visionOS 模板中，Reality Composer Pro 项目被称为 RealityKitContent，因此全局 bundle 变量被称为 realityKitContentBundle：", "tips": ""}, "The code above saves a reference to the root node. This isn’t required, but with RealityView, unlike ARView on iOS and macOS, you don’t have ready access to the scene content, so it’s often handy to maintain your own reference to the root entity of your scene in your app’s data model.": {"zh": "上述代码保存了对根节点的引用。虽然这不是必需的，但与 iOS 和 macOS 上的 ARView 不同，你在 RealityView 中不能直接获取到场景内容，因此在应用的数据模型中保持对你场景的根实体的引用通常会很方便。", "tips": ""}, "When RealityKit finishes loading the scene, the scene variable contains the root entity of the scene you specified. Add it to content and RealityKit displays it to the user.": {"zh": "当 RealityKit 完成场景加载后，scene 变量会包含你指定的场景的根实体。将它添加到 content 中，RealityKit 就会将它显示给用户。", "tips": ""}}
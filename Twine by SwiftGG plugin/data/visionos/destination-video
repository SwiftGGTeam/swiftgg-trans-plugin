{"Destination Video": {"zh": "目的地视频", "tips": ""}, "Leverage 3D video and Spatial Audio to deliver an immersive experience.": {"zh": "利用 3D 视频和空间音频提供身临其境的体验。", "tips": "Spatial Audio 译为“空间音频”"}, "Overview": {"zh": "概述", "tips": ""}, "Destination Video is a multiplatform video-playback app for visionOS, iOS, and tvOS. People get a familiar media-browsing experience navigating the libraryʼs content and playing videos they find interesting. The app provides a similar experience on supported platforms, but leverages unique features of visionOS to create a novel, immersive playback experience.": {"zh": "Destination Video 是一款适用于 visionOS、iOS 和 tvOS 的多平台视频播放应用。应用为用户提供了熟悉的媒体浏览体验：在图书馆中浏览内容并可以播放感兴趣的视频。该应用在所有支持的平台上提供了相近的体验，但同时也利用了 visionOS 的特有功能来创建新颖、身临其境的视听体验。", "tips": ""}, "Play video in an inline player": {"zh": "在内联播放器中播放视频", "tips": "inline player 译为内联播放器"}, "When you select a video in the library, Destination Video presents a view that displays additional details about the item. The view presents controls to play the video and specify whether to include it in your Up Next list. In visionOS, it also displays a video poster along its leading edge. Tapping the view’s Preview button displays an inline preview of the video.": {"zh": "当您在资源库中选择视频时，“目的地视频”会显示一个有关该项目详情的视图。该视图显示播放视频的控件，并允许用户指定是否将其包含在“待播清单”列表中。在visionOS中，它还会靠左显示一张视频海报。点击视图中的“预览”按钮可在行中显示视频的预览。", "tips": ""}, "When you present an AVPlayerViewController object’s interface as a child of another view, inline controls display, for example, pause, skip, and seek. Showing standard playback controls in your app provides a familiar UI that automatically adapts its appearance to fit each platform, and is the recommended choice in most cases.": {"zh": "当您将 AVPlayerViewController 的界面作为一个子视图显示时，暂停、跳过和查找等内联控件将显示。在应用中显示标准播放控件可提供可自动调整其外观以适应平台的熟悉 UI，这在大多数情况下是推荐的选择。", "tips": ""}, "Destination Video uses a simple UI for the inline player view: a single button that toggles state of playback. AVPlayerViewController doesn’t provide this controls style, but the app uses it to display the video content without controls by setting the value of its showsPlaybackControls property to false. It then overlays the custom playback controls it requires. See Destination Video’s InlinePlayerView type for details on how you can implement this.": {"zh": "目的地视频使用简单的 UI 作为内联播放器视图：一个用于切换播放状态的按钮。 AVPlayerViewController 不提供此控件样式，但本应用仅仅使用它来显示视频内容，而不显示控件，其实现方法是将 showsPlaybackControls 属性的值设置为 false。然后应用会用所需的自定义播放控件覆盖在上。如想了解此功能的详情，请参阅目的地视频中的 InlinePlayerView 类型。", "tips": ""}, "Note": {"zh": "注意", "tips": ""}, "AVPlayerViewController only supports displaying 2D content when embedded inline.": {"zh": "", "tips": "注意 AVPlayerViewController 在内联嵌入时仅支持显示 2D 内容。"}, "Play video in a full-window player": {"zh": "在全屏播放器中播放视频", "tips": ""}, "One of the most exciting features of visionOS is its ability to play 3D video along with Spatial Audio, which adds a deeper level of immersion to the viewing experience. Playing 3D content in your app requires that you display AVPlayerViewController full window. When you present the player this way, the system automatically docks it into the ideal viewing position, and presents streamlined playback controls that keep the person’s focus on the content.": {"zh": "visionOS 最令人兴奋的功能之一是它能够播放 3D 视频和空间音频，这为观看体验增加了更深层的沉浸感。在应用中播放 3D 内容需要在全屏模式下显示 AVPlayerViewController。当您以这种方式呈现播放器时，系统会自动将其停靠在理想的观看位置，并提供简化的播放控件，使用户专注于内容。", "tips": ""}, "In iOS or tvOS, you typically present video in a full-screen presentation using the fullScreenCover(isPresented:onDismiss:content:) modifier. This API is available in visionOS; however, the recommended way to present the player for full-window playback is to set it as the root view of your app’s window group.": {"zh": "在 iOS 或 Apple tvOS 中，你可以使用 fullScreenCover(isPresented:onDismiss:content:) 修饰符在全屏模式下演示视频。此 API 在 visionOS 亦可用；然而，推荐的全屏模式播放视频方法是将视图设置为应用窗口组的根视图。", "tips": ""}, "Destination Video’s ContentView displays the app’s library by default. It observes changes to the player model’s presentation property, which indicates whether the app requests inline or full-window playback. When the presentation state changes to fullWindow, the view redraws the UI to display the player view in place of the library.": {"zh": "默认情况下，目的地视频的 ContentView 会显示应用的资源库。它观察对播放器模型中 presentation（演示状态） 属性的更改，属性的变化意味着应用请求内联播放或全屏播放。当演示状态变为 fullWindow 时，视图将重新绘制 UI，用播放器视图来代替原本的资源库视图。", "tips": "Player model 译为播放器模型。presentation 译为演示状态。"}, "When someone selects the Play Video button on the detail view, the app calls the player model’s loadVideo(_: presentation:) method requesting the fullWindow presentation option.": {"zh": "当用户在详细信息视图上选择了“播放视频”按钮时，应用会调用播放器模型的 loadVideo(_: presentation:) 方法，请求fullWindow 演示选项。", "tips": "presentation option 译为演示选项"}, "After the player model successfully loads the video content for playback, it updates its presentation value to fullWindow, which causes the app to replace the library with PlayerView.": {"zh": "当播放器模型成功加载视频内容并播放后，会将其 presentation 值更新为 fullWindow ，这会让应用将资源库替换为 PlayerView 。", "tips": ""}, "To dismiss the full-window player in visionOS, people tap the Back button in the player UI. To handle this action, the app’s PlayerViewControllerDelegate type defines an AVPlayerViewControllerDelegate object that handles the dismissal.": {"zh": "要在 visionOS 中关闭全屏播放器，用户可以点击播放器 UI 中的“后退”按钮。为了处理此操作，应用的 PlayerViewControllerDelegate 类型定义了一个 AVPlayerViewControllerDelegate 对象，用于关闭界面。", "tips": ""}, "When the delegate receives this call, it clears the media from the player model and resets the presentation state back to its default value, which results in the Destination Video app redisplaying the library view.": {"zh": "当委托（delegate）收到此调用时，它会从播放器模型中清除媒体，并将演示状态重置回其默认值，这会让目的地视频应用重新显示资源库视图", "tips": ""}, "Configure the Spatial Audio experience": {"zh": "配置空间音频体验", "tips": ""}, "Media playback apps require common configuration of their capabilities and audio session. In addition to performing the steps outlined in Configuring your app for media playback, Destination Video also adopts new AVAudioSession API to customize a person’s Spatial Audio experience.": {"zh": "媒体播放应用需要对其功能和音频会话进行通用配置。除了执行配置应用以进行媒体播放中列举的步骤之外，Destination Video 还采用新的 AVAudioSession API 来自定义用户的空间音频体验。", "tips": ""}, "After the app successfully loads a video for playback, it configures the Spatial Audio experience for the current presentation. For the inline player view, it sets the experience to a small, focused sound stage where the audio originates from the location of the view. When displaying a video full window, it sets the experience to a large, fully immersive sound stage.": {"zh": "应用成功加载视频进行播放后，会为当前的演示内容配置空间音频体验。对于内联播放器视图，它将体验设置为一个小型的、集中的声场，其中音源来自视图的位置。当显示全屏视频时，它会将体验设置为大型、完全沉浸式的声场。", "tips": ""}, "Present an immersive space": {"zh": "呈现沉浸式空间", "tips": ""}, "Building video playback apps for visionOS provides new opportunities to enhance the viewing experience beyond the bounds of the player window. To add a greater level of immersion, the sample presents an immersive space that displays a scene around a person as they watch the video. It defines the immersive space in the DestinationVideo app structure.": {"zh": "在 visionOS 上制作视频播放应用提供了新的机会，因为开发者可以将观看体验扩展到播放器窗口之外。为了提供更强的沉浸感，该示例提供了一个在用户观看视频时在其周围显示风景的沉浸式空间。应用结构体 DestinationVideo 中定义了沉浸式空间。", "tips": ""}, "The immersive space presents an instance of DestinationView, which maps a texture to the inside of a sphere that it displays around a person. The app presents it using the .progressive immersion style, which lets someone change their amount of immersion by turning the Digital Crown on the device.": {"zh": "沉浸式空间呈现了一个 DestinationView 的实例，它将纹理映射到围绕用户而显示的球体内部。应用使用 .progressive 风格呈现它，该风格允许用户通过转动设备上的“数码表冠”来修改沉浸度。", "tips": ""}, "The Destination Video app automatically presents the immersive space when a person navigates to a video’s detail view, and dismisses it when they return to the library. To monitor these events, the app observes its navigation path to determine when a navigation event occurs so it can show or dismiss the space.": {"zh": "应用会在用户进入视频详情视图时自动显示沉浸式空间，并在返回资源库时将其关闭。为了监视这些事件，应用会观察其导航路径以确定导航事件发生的时机，并显示或关闭空间。", "tips": ""}, "Provide a shared viewing experience": {"zh": "提供共享的观看体验", "tips": ""}, "One of the best ways to enhance your app’s playback experience is to make that experience shareable with others. You can use the AVFoundation and the GroupActivities frameworks to build SharePlay experiences that bring people together even when they can’t be in the same location.": {"zh": "增强应用播放体验的最佳方法之一是使体验可与他人共享。您可以使用 AVFoundation 和 Group Activities 框架来构建同播共享体验，即使用户们不在同一个地方，同播体验也能够拉近他们的距离。", "tips": ""}, "The Destination Video app creates an experience where people can watch videos with others across devices and platforms. It defines a group activity called VideoWatchingActivity that adopts the GroupActivity protocol. When people have a FaceTime call active and they play a video in the full-window player, it becomes eligible for playback for everyone on the call.": {"zh": "目的地视频创造了一种用户可以跨设备和平台与他人一起观看视频的体验。它定义了一个名为 VideoWatchingActivity 且遵循 GroupActivity 协议的组活动。当用户们激活了 FaceTime 通话并在全屏播放器中播放视频时，通话中的每个人都有权限播放该视频。", "tips": ""}, "The app’s VideoWatchingCoordinator actor manages Destination Video’s SharePlay functionality. It observes the activation of new VideoWatchingActivity sessions and when one starts, it sets the GroupSession instance on the player object’s AVPlaybackCoordinator.": {"zh": "应用的 VideoWatchingCoordinator actor 管理目的地视频的同播共享功能。它观察新 VideoWatchingActivity 会话的激活，当一个会话启动时，它将 GroupSession 对象设置为播放器对象的 AVPlaybackCoordinator。", "tips": ""}, "With the player configured to use the group session, when the app loads new videos, they become eligible to share with people in the FaceTime call.": {"zh": "将播放器配置使用群组会话后，每当应用加载了新视频，它们都可以在 FaceTime 通话中与他人共享。", "tips": ""}}
{"Making your existing app compatible with visionOS": {"zh": "使现有应用与 visionOS 兼容", "tips": ""}, "Modify your iPadOS or iOS app to run successfully in visionOS.": {"zh": "修改你的 iPadOS 或 iOS 应用，以便在 visionOS 中成功运行。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "A compatible iPadOS or iOS app links against the iOS SDK and runs in visionOS. Although visionOS provides a complete set of iOS frameworks for linking, some features of those frameworks might be unavailable due to hardware or usage differences. To ensure your app runs correctly in visionOS, handle any missing features gracefully and provide workarounds wherever possible.": {"zh": "兼容的 iPadOS 或 iOS 应用可链接 iOS SDK 并在 visionOS 中运行。尽管 visionOS 提供了一套完整的 iOS 桥接框架，但由于硬件或使用上的差异，这些框架的某些功能可能无法使用。为确保你的应用能在 visionOS 中正确运行，请优雅地应对可能缺失的功能，并尽可能提供变通方法。", "tips": ""}, "Perform availability and authorization checks before using features": {"zh": "使用功能前进行可用性和授权检查", "tips": ""}, "Some frameworks offer APIs to let you determine when framework features are available or whether your app is authorized to use them. Always check these APIs before you try to use the corresponding features, and don’t assume a feature is available because the necessary hardware is present. The device’s configuration also plays a role in determining the results of some availability and authorization checks, and features might not be present when your app runs in Simulator. If an availability or authorization check fails, don’t try to use the associated feature in your app.": {"zh": "有些框架提供了 API 让你检查框架功能何时可用，或你的应用是否已被授权使用这些功能。在尝试使用相应功能之前，请务必检查这些 API，不要因为存在必要的硬件就认为某项功能可用。设备的配置也会对某些可用性和授权检查的结果产生影响，另外当你的应用在模拟器中运行时，某些功能可能并不存在。如果可用性或授权检查失败，请不要尝试在应用中使用相关功能。", "tips": ""}, "The following frameworks support availability or authorization checks:": {"zh": "以下框架支持可用性或授权检查：", "tips": ""}, "ActivityKit. Check the areActivitiesEnabled property of ActivityAuthorizationInfo to determine if Live Activities are authorized.": {"zh": "ActivityKit。检查 ActivityAuthorizationInfo 的 areActivitiesEnabled 属性，以确认”实时活动“是否已获得授权。", "tips": ""}, "ARKit. Check the isSupported property of your configuration object to determine availability of augmented reality features. In visionOS, ARKit views such as ARView are never available, so isolate interface code containing those views to the iOS version of your app.": {"zh": "ARKit。检查配置对象的 isSupported 属性，以确认增强现实功能是否可用。在 visionOS 中，ARView 等 ARKit 视图总是不可用，因此请将包含这些视图的接口代码隔离到 iOS 版本的应用中。", "tips": ""}, "AVFoundation. Identify what cameras are available using the AVCaptureDevice.DiscoverySession class. Don’t assume the presence of specific cameras.": {"zh": "AVFoundation。使用 AVCaptureDevice.DiscoverySession 类确认哪些摄像头可用。不要假设存在特定的摄像头。", "tips": ""}, "Automatic Assessment Configuration. Check for error values when you configure an AEAssessmentSession object.": {"zh": "自动评估配置。请在配置 AEAssessmentSession 对象时检查错误值。", "tips": ""}, "Contacts. Use the CNContactStore class to determine your app’s authorization status.": {"zh": "联系人。使用 CNContactStore 类确认应用的授权状态。", "tips": ""}, "Core Bluetooth. Use the CBCentralManager and CBPeripheralManager classes to determine feature availability and your app’s authorization status.": {"zh": "核心蓝牙。使用 CBCentralManager 和 CBPeripheralManager 类确认功能可用性和应用的授权状态。", "tips": ""}, "Core Haptics. Call the capabilitiesForHardware() method of the haptic engine to determine the available features.": {"zh": "核心触觉。调用触觉引擎的 capabilitiesForHardware() 方法确认可用功能。", "tips": ""}, "Core Location. Check the properties of CLLocationManager to determine the availability of location services.": {"zh": "核心位置。检查 CLLocationManager 的属性以确认位置服务的可用性。", "tips": ""}, "Core Motion. Check the properties of CMMotionManager to determine the availability of accelerometers, gyroscopes, magnetometers, and other hardware sensors.": {"zh": "核心运动。检查 CMMotionManager 的属性，以确认加速计、陀螺仪、磁力计和其他硬件传感器是否可用。", "tips": ""}, "Core NFC. Check the readingAvailable property of your reader session to determine if NFC tag reading is available.": {"zh": "核心 NFC。检查读取器会话的 readingAvailable 属性，以确认 NFC 标签读取是否可用。", "tips": ""}, "EventKit. Use the EKEventStore class to determine your app’s authorization status.": {"zh": "EventKit。使用 EKEventStore 类确认应用的授权状态。", "tips": ""}, "ExposureNotification. Use the ENManager class to determine your app’s authorization status.": {"zh": "ExposureNotification。使用 ENManager 类确认应用的授权状态。", "tips": ""}, "HealthKit. Use the HKHealthStore class to determine if health-related data is available.": {"zh": "HealthKit。使用 HKHealthStore 类确认健康相关数据是否可用。", "tips": ""}, "HomeKit. Check the properties of HMHomeManager to determine your app’s authorization status.": {"zh": "HomeKit。检查 HMHomeManager 的属性，确认应用的授权状态。", "tips": ""}, "Local Authentication. Use the LAContext class to determine the authentication policies you can use.": {"zh": "本地身份验证。使用 LAContext 类确认可以使用的身份验证策略。", "tips": ""}, "Media Player. Use the MPMediaLibrary class to determine your app’s authorization status.": {"zh": "媒体播放器。使用 MPMediaLibrary 类确认应用的授权状态。", "tips": ""}, "Nearby Interaction. Check the deviceCapabilities property of your session to determine whether features are available.": {"zh": "邻近交互。检查会话的 deviceCapabilities 属性，确认功能是否可用。", "tips": ""}, "PhotoKit. Use the PHPhotoLibrary class to determine your app’s authorization status.": {"zh": "PhotoKit。使用 PHPhotoLibrary 类确认应用的授权状态。", "tips": ""}, "ProximityReader. Check the isSupported property of the card reader object to determine if Tap to Pay on iPhone is available.": {"zh": "ProximityReader。检查读卡器对象的 isSupported 属性，以确认 iPhone 上的“Tap to Pay”是否可用。", "tips": ""}, "ReplayKit. Check the isAvailable property of RPScreenRecorder to determine if screen recording support is available.": {"zh": "ReplayKit。检查 RPScreenRecorder 的 isAvailable 属性，以确认屏幕录制功能是否可用。", "tips": ""}, "RoomPlan. Check the isSupported property of the RoomCaptureSession object to determine if LiDAR scanning is available on the device.": {"zh": "RoomPlan。检查 RoomCaptureSession 对象的 isSupported 属性，以确认设备上是否支持 3D 激光扫描。", "tips": "LiDAR 是 Light Detection And Ranging 的缩写，通常被称为“3D 激光扫描”。"}, "SensorKit. Use the SRSensorReader class to determine your app’s authorization status.": {"zh": "SensorKit。使用 SRSensorReader 类确认应用的授权状态。", "tips": ""}, "Speech. Use the SFSpeechRecognizer class to determine if speech recognition is available.": {"zh": "语音。使用 SFSpeechRecognizer 类确认语音识别是否可用。", "tips": ""}, "User Notifications. Use the getNotificationSettings(completionHandler:) method of UNUserNotificationCenter to determine your app’s authorization status.": {"zh": "用户通知。使用 UNUserNotificationCenter 的 getNotificationSettings(completionHandler:) 方法确认应用的授权状态。", "tips": ""}, "WatchConnectivity. Call the isSupported() method of the WCSession object to determine if the framework is available.": {"zh": "WatchConnectivity。调用 WCSession 对象的 isSupported() 方法来确认框架是否可用。", "tips": ""}, "Handle environmental differences appropriately": {"zh": "妥善处理环境差异", "tips": ""}, "Apple frameworks take a device-agnostic approach whenever possible to minimize issues when you use them on different device types. Apple devices come in a variety of shapes and sizes, and with different sets of features. Rather than build your app for a specific device, make sure it adapts to any device and can gracefully handle differences.": {"zh": "Apple 框架在设计时尽可能地采用了无视设备的方式，以减少在不同类型设备上使用时出现的问题。苹果设备的形状和大小各不相同，功能也不尽相同。与其为特定设备构建应用，不如确保应用能适应任何设备，并能从容应对差异。", "tips": ""}, "Build robustness into your app during the design process. Avoid assumptions that might cause your app to break when it runs on a new device, and make sure your app adapts dynamically to different conditions. For example:": {"zh": "请在应用的设计过程中考虑到稳健性。请避免可能导致应用在新设备上运行时发生故障的假设，并确保你的应用能动态地适应不同的条件。例如：", "tips": ""}, "Don’t assume the device type or idiom is always iPhone, iPad, or iPod Touch. Avoid decisions based on the current idiom. If you do rely on the current idiom, provide reasonable defaults for unknown idioms.": {"zh": "不要假设设备类型或惯用名总是 iPhone、iPad 或 iPod Touch。请避免根据当前的惯用名做出决定。如果你确实依赖当前的惯用名，请为未知惯用名提供合理的默认值。", "tips": ""}, "Design your app to handle unavailable hardware or features. Specific hardware and features might be unavailable for many different reasons. For example, a feature might be unavailable when your app runs in Simulator. Perform availability checks whenever possible, and handle missing features gracefully.": {"zh": "将应用设计为能够对应不可用的硬件或功能。导致特定硬件和功能不可用的原因多种多样。例如，当应用在模拟器中运行时，某个功能或许不可用。请尽可能地执行可用性检查，并从容应对功能缺失。", "tips": ""}, "Design your windows and views to adapt dynamically. Build your interface to adapt dynamically to any size using SwiftUI or Auto Layout. Assume the size of your app can change dynamically.": {"zh": "设计能够动态适应的窗口和视图。使用 SwiftUI 或自动布局来构建界面，以便动态适应任何尺寸。请假设应用的尺寸会动态变化。", "tips": ""}, "Don’t assume the device has a specific number of displays. People can connect iPad and iPhone to an external display, and visionOS devices use two displays to create a stereoscopic version of your app’s content.": {"zh": "不要假设设备有特定数量的显示屏。人们可以将 iPad 和 iPhone 连接到外部显示屏，而 visionOS 设备则使用两个显示屏来创建应用内容的立体版。", "tips": ""}, "Don’t make assumptions based on the available frameworks or symbols. The presence or absence of frameworks or code symbols is an unreliable way to identify a device type, and can change in later software updates.": {"zh": "不要根据可用的框架或符号做出假设。某个框架或代码符号的存在或缺失不是识别设备类型的可靠方法，而且可能会在今后的软件更新中变化。", "tips": ""}, "Don’t assume your app runs in the background. visionOS doesn’t support the location, external accessory, or Bluetooth-peripheral background execution modes.": {"zh": "不要假设你的应用在后台运行。visionOS 不支持定位、外部访问或蓝牙外设后台执行模式。", "tips": ""}, "Don’t assume that background apps are hidden. In visionOS, the windows of background apps remain visible, but are dimmed when no one looks at them. The only time app windows disappear is when one app presents an immersive space.": {"zh": "不要假设所有后台应用都是隐藏的。在 visionOS 中，后台应用的窗口仍然可见，但在未被观看时会变暗。只有当某个应用呈现出沉浸式空间时，应用窗口才会消失。", "tips": ""}, "When you make decisions using device details, your app might produce inconsistent or erroneous results on an unknown device type, or it might fail altogether. Find solutions that rely on environmental information, rather than the device type. For example, SwiftUI and UIKit start layout using the app’s window size, which isn’t necessarily the same size as the device’s display.": {"zh": "当你使用设备详细信息进行决策时，你的应用可能会在未知设备类型上产生不一致或错误的结果，或者彻底崩溃。请寻找依赖环境信息而非设备类型的解决方案。例如，SwiftUI 和 UIKit 使用应用的窗口大小启动布局，而窗口大小并不一定与设备显示屏大小相同。", "tips": ""}, "Note": {"zh": "备注", "tips": ""}, "Device-specific information is available when you absolutely need it, but validate the information you receive and provide reasonable default behavior for unexpected values.": {"zh": "在绝对必要时可以使用设备特定信息，但要对收到的信息进行验证，并为意外值提供合理的默认行为。", "tips": ""}, "Audit your interface code": {"zh": "审核你的界面代码", "tips": ""}, "To minimize disruptions, visionOS runs your compatible iPad or iPhone app in an environment that matches an iPad as much as possible. Windows and views retain the same appearance that they have in iPadOS or iOS, and the system sizes your app’s window to fit an iPad whenever possible.": {"zh": "为了最大限度地减少干扰，visionOS 会尽可能在与 iPad 相匹配的环境中运行兼容的 iPad 或 iPhone 应用。窗口和视图保留了与 iPadOS 或 iOS 中相同的外观，而且系统会尽可能调整应用窗口的大小以适应 iPad。", "tips": ""}, "When building your app’s interface, make choices that ensure your app runs well in visionOS too. Adopt the following best practices for your interface-related code:": {"zh": "在构建应用的界面时，请选择能确保你的应用在 visionOS 中也能正常运行的选项。对于与界面相关的代码，请采用以下最佳实践：", "tips": ""}, "Support iPad and iPhone in the same app. Create one app that supports both device types, rather than separate apps for each device. SwiftUI and UIKit support adaptable interfaces, and Xcode provides tools to help you visualize your interface at different supported sizes.": {"zh": "在一个应用中支持 iPad 和 iPhone。创建一个同时支持两种设备类型的应用，而不是为每种设备分别创建应用。SwiftUI 和 UIKit 支持自适应界面，而 Xcode 提供的工具可帮助你在不同的支持尺寸下显示界面。", "tips": ""}, "Organize your interface using scenes. Scenes are a fundamental tool for managing your app’s interface. Use the scene types in SwiftUI and UIKit to assemble and manage the views you display in windows.": {"zh": "使用场景来组织界面。场景是管理应用界面的基本工具。使用 SwiftUI 和 UIKit 中的场景类型来组合和管理你在窗口中显示的视图。", "tips": ""}, "Adapt your interface to any size. Design your interface to adapt naturally to different sizes. For an introduction to SwiftUI views and layout, see Declaring a custom view. For information about laying out views in UIKit, see View layout.": {"zh": "让界面适应任何尺寸。将你的界面设计成能自然适应不同尺寸。有关 SwiftUI 视图和布局的介绍，请参阅声明自定义视图。有关在 UIKit 中布局视图的信息，请参阅视图布局。", "tips": ""}, "Don’t access screen details. visionOS provides reasonable values for UIScreen objects, but don’t use those values to make decisions.": {"zh": "不要访问屏幕细节。visionOS 为 UIScreen 对象提供了合理的值，但请不要使用这些值来做决策。", "tips": ""}, "Specify the supported interface orientations. Add the UISupportedInterfaceOrientations key to your app’s Info.plist file to specify the interface orientations it supports. Support all interface orientations whenever possible. visionOS adds an interface rotation for your app button only when this key is present.": {"zh": "指定支持的界面方向。在应用的 Info.plist 文件中添加 UISupportedInterfaceOrientations 键以指定支持的界面方向。请尽可能地支持所有的界面方向。只有当该键存在时，visionOS 才会为你的应用按钮添加界面旋转。", "tips": ""}, "Update hover effects in custom views. Hover effects convey the focused view or control in your interface. Standard system views apply hover effects as needed. For custom views and controls, verify that the hover effects look appropriate in visionOS. Add or update the content shape for your hover effects if needed.": {"zh": "更新自定义视图中的悬停效果。悬停效果用于表明界面中被选中的视图或控件。标准系统视图会根据需要添加悬停效果。对于自定义视图和控件，请确认悬停效果在 visionOS 中看起来是否合适。必要时，为悬停效果添加或更新内容形状。", "tips": ""}, "Adopt vector-based images when possible. Vector-based images scale well to different sizes while retaining a crisp appearance. If you use bitmap-based assets, make them the exact size you need. Don’t use oversized assets, which require extra work to display at the correct size.": {"zh": "尽可能采用基于矢量的图像。基于矢量的图像可以很好地缩放至不同尺寸，同时保持清晰的外观。如果你使用基于位图的资源，请将它们生成为所需的精确尺寸。不要使用过大的资源，因为那样需要额外的工作才能将它们显示为正确尺寸。", "tips": ""}, "If you want visionOS to display your app’s interface in a particular orientation at launch, add the UIPreferredDefaultInterfaceOrientation key to your app’s Info.plist file. Set the value of the key to one of the values in your app’s UISupportedInterfaceOrientations key. For example, to specify a preference for a portrait orientation, set the value to UIInterfaceOrientationPortrait. Add ~ipad or ~iphone to the key name to specify device-specific orientation preferences.": {"zh": "如果你希望 visionOS 在启动时以特定方向展示应用的界面，请在应用的 Info.plist 文件中添加 UIPreferredDefaultInterfaceOrientation 键盘。将该键的值设置为应用的 UISupportedInterfaceOrientations 键中的值之一。例如，如要指定偏好纵向，请将值设置为 UIInterfaceOrientationPortrait。在键名中添加 ~ipad 或 ~iphone 以指定特定设备的方向首选项。", "tips": ""}, "Respond gracefully to missing features": {"zh": "优雅地应对功能缺失", "tips": ""}, "If your app relies on frameworks that behave differently in visionOS, update your code to handle those differences. Availability checks give you a clear indication when you can’t use a feature, but some frameworks might have more subtle behavior. Throughout your code, make sure you respond to unusual situations:": {"zh": "如果你的应用依赖的框架在 visionOS 中表现不同，请更新你的代码以处理这些差异。可用性检查会在无法使用某项功能时给出明确指示，但某些框架可能会有更微妙的差异。请在你的所有代码中，确保能应对以下异常情况：", "tips": ""}, "Handle error conditions. If a function throws an exception or returns an error, handle the error. Use error information to adjust your app’s behavior or provide an explanation of why it can’t perform certain operations.": {"zh": "处理错误情况。如果函数抛出异常或返回错误，请处理错误。使用错误信息来调整应用行为，或解释无法执行某些操作的原因。", "tips": ""}, "Handle nil or empty values gracefully. Validate objects and return values before you try to use them.": {"zh": "优雅地处理 nil 或空值。在尝试使用对象和返回值之前对其进行验证。", "tips": ""}, "Update your interface. Provide appropriate messaging in your interface when a feature is missing, or remove feature-specific views entirely if you can do so cleanly. Don’t leave empty views where the feature was.": {"zh": "更新界面。当某一功能缺失时，请在界面中提供展示适当的信息，如能干净利落地移除特定功能视图，则请完全移除。不要在功能的原位置留下空视图。", "tips": ""}, "For information about frameworks that behave differently in visionOS, see Checking whether your existing app is compatible with visionOS.": {"zh": "关于在 visionOS 中表现不同的框架的信息，请参阅检查现有应用是否与 visionOS 兼容。", "tips": ""}, "Remove code that uses deprecated APIs": {"zh": "移除使用了废弃 API 的代码", "tips": ""}, "If your app currently uses deprecated APIs or frameworks, update your code to use appropriate replacements. Deprecated symbols represent outdated features, and in some cases might not do anything when you call them. To prevent potential issues, replace them with modern equivalents to ensure your code behaves as expected.": {"zh": "如果你的应用当前使用了废弃的 API 或框架，请更新代码以使用适当的替代。废弃符号代表着过时的功能，在某些情况下，调用它们可能什么也做不了。为防止发生潜在的问题，请使用当前的等效符号替换它们，以确保你的代码按预期运行。", "tips": ""}, "The following frameworks are deprecated in their entirety in iPadOS, iOS, and visionOS. If your app still uses these frameworks, move off of them immediately. The reference documentation for each framework includes information about how to update your code.": {"zh": "在 iPadOS、iOS 和 visionOS 中，以下框架已被完全废弃。如果你的应用仍在使用这些框架，请立即停止使用。每个框架的参考文档都包含有关如何更新代码的信息。", "tips": ""}, "Accounts": {"zh": "Accounts", "tips": ""}, "Address Book": {"zh": "Address Book", "tips": ""}, "Address Book UI": {"zh": "Address Book UI", "tips": ""}, "Assets Library": {"zh": "Assets Library", "tips": ""}, "iAd": {"zh": "iAd", "tips": ""}, "Newsstand Kit": {"zh": "Newsstand Kit", "tips": ""}, "NotificationCenter": {"zh": "NotificationCenter", "tips": ""}, "OpenGL ES": {"zh": "OpenGL ES", "tips": ""}}
{"Positioning and sizing windows": {"zh": "定位和调整窗口大小", "tips": ""}, "Influence the initial geometry of windows that your app presents.": {"zh": "影响应用呈现的窗口的初始几何位置和大小", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "visionOS and macOS enable people to move and resize windows. In some cases, your app can use scene modifiers to influence a window’s initial geometry on these platforms, as well as to specify the strategy that the system employs to place minimum and maximum size limitations on a window. This kind of configuration affects both windows and volumes, which are windows with the volumetric window style.": {"zh": "visionOS 和 macOS 允许用户能够移动和调整窗口大小。在某些情况下，你的应用可以使用场景修饰器来影响窗口在这些平台上的初始几何位置和大小，以及指定系统用于在窗口上设置最小和最大尺寸限制的策略。这种配置会影响窗口和立体窗口（具有 volumetric 窗口样式的窗口）。", "tips": ""}, "Your ability to configure window size and position is subject to the following constraints:": {"zh": "配置窗口大小和位置的能力受以下限制：", "tips": ""}, "The system might be unable to fulfill your request. For example, if you specify a default size that’s outside the range of the window’s resizability, the system clamps the affected dimension to keep it in range.": {"zh": "系统可能无法满足你的请求。例如，如果指定的默认大小超出了窗口大小的可调整范围，则系统会收缩受影响的尺寸以使其保持在合理范围内。", "tips": ""}, "Although you can change the window’s content, you can’t directly manipulate window position or size after the window appears. This ensures that people have full control over their workspace.": {"zh": "虽然你可以更改窗口的内容，但不能在窗口出现后直接操作窗口位置或大小。这确保了用户可以完全控制他们的工作空间。", "tips": ""}, "During state restoration, the system restores windows to their previous position and size.": {"zh": "在 app 状态恢复的时候，系统会将窗口恢复到其以前的位置和大小。", "tips": ""}, "Note": {"zh": "注意", "tips": ""}, "Windows in iPadOS occupy the full screen, or share the screen with another window in Slide Over or Split View. You can’t programmatically affect window geometry on that platform.": {"zh": "iPadOS 中的窗口占据全屏，或在“侧拉”（Slide Over）或“分屏浏览”（Split）中与另一个窗口共享屏幕。你无法以编程方式影响该平台上的窗口几何位置和大小。", "tips": ""}, "Specify initial window position": {"zh": "指定窗口初始位置", "tips": ""}, "In macOS, the first time your app opens a window from a particular scene declaration, the system places the window at the center of the screen by default. For scene types that support multiple simultaneous windows, the system offsets each additional window by a small amount to avoid fully obscuring existing windows.": {"zh": "在 macOS 中，当你的 App 首次从特定场景声明中打开窗口时，系统会默认将该窗口置于屏幕中央。对于支持多个同时并存窗口的场景类型，系统会将每个新添加的窗口偏移一小段距离，以避免完全遮挡现有窗口。", "tips": ""}, "You can override the default placement of the first window in macOS by applying the defaultPosition(_:) scene modifier to indicate where to place the window relative to the screen bounds. For example, you can request that the system place a new window in the bottom trailing corner of the screen:": {"zh": "你可以通过应用 defaultPosition(_:) 场景修饰器来指示窗口相对于屏幕边界的放置位置，从而覆盖 macOS 中首个窗口的默认位置。例如，你可以请求系统在屏幕的右下角放置一个新窗口：", "tips": ""}, "The system aligns the point in the window that corresponds to the specified UnitPoint with the point in the screen that corresponds to the same unit point. You can use a built-in unit point, like bottomTrailing in the above example, or define a custom one.": {"zh": "系统将窗口中与指定 UnitPoint 点相对应的点与屏幕中与同一单位点相对应的点对齐。你可以使用内置单位点（如上例所示的 bottomTrailing），也可以定义一个自定义单位点。", "tips": ""}, "Important": {"zh": "重要", "tips": ""}, "You can’t use defaultPosition(_:) in visionOS. The system always places new windows directly in front of people, where they happen to be looking at the moment the window opens. This helps to make people aware of new windows.": {"zh": "你不能在 visionOS 中使用 defaultPosition(_:)。visionOS 总是将新窗口直接放置在用户面前，在窗口打开时用户一眼就能看到的位置。这有助于用户感知新窗口的出现。", "tips": ""}, "Specify initial window size": {"zh": "指定窗口初始大小", "tips": ""}, "You can indicate a default initial size for a new window that the system creates from a Scene declaration by applying one of the default size scene modifiers, like defaultSize(width:height:). For example, you can request that new windows that a WindowGroup generates occupy 600 points in the x-dimension and 400 points in the y-dimension:": {"zh": "你可以通过应用默认大小场景修饰器的其中一个（如 defaultSize(width:height:) ）来指示系统从 Scene 声明中创建的新窗口的默认初始大小。例如，你可以请求 WindowGroup 生成的新窗口在 x 维度中占据 600 个点，在 y 维度中占据 400 个点：", "tips": ""}, "The system might clamp the actual size of the window depending on both the window’s content and resizability settings.": {"zh": "系统可能会根据窗口的内容和可调整大小设置来限制窗口的实际大小。", "tips": ""}, "Specify window resizability": {"zh": "指定窗口大小的可调整性", "tips": ""}, "Both macOS and visionOS provide interface controls that enable people to resize windows, within certain limits. For example, people can use the control that appears when they look at the corner of a visionOS window to resize a window on that platform.": {"zh": "macOS 和 visionOS 都提供相应的界面控件，使用户能够在一定限制内调整窗口大小。例如，用户可以使用查看 visionOS 窗口角落时出现的控件来调整该系统平台上的窗口大小。", "tips": ""}, "You can specify how the system limits window resizability. The default resizability for all scenes is automatic. With that strategy, Settings windows use the contentSize strategy, where both the minimum and maximum window size match the respective minimum and maximum sizes of the content that the window contains. Other scene types use contentMinSize by default, which retains the minimum size restriction, but doesn’t limit the maximium size.": {"zh": "你可以指定系统对窗口尺寸调整的限制。所有场景的默认可调整性为 automatic。应用该策略时，Settings 窗口使用该 contentSize 策略， 其中最小和最大窗口尺寸都与窗口所包含内容的最小和最大尺寸相匹配。其他场景类型默认使用 contentMinSize 策略 ，它保留了最小尺寸限制，但并不限制最大尺寸。", "tips": ""}, "You can specify one of these resizability strategies explicitly by adding the windowResizability(_:) scene modifier to a scene. For example, people can resize windows from the following window group to between 100 and 400 points in both dimensions because the frame modifier imposes those bounds on the content view:": {"zh": "你可以通过向场景添加 windowResizability(_:) 场景修改器来显式指定某个特定的可调整尺寸策略。例如，用户可以将窗口的大小从以下窗口组调整为两个维度的 100 到 400 点之间，因为 frame 修饰器会将这些边界强加在内容视图上：", "tips": ""}, "You can take this even further and enforce a specific size for a window with content that has a fixed size.": {"zh": "你可以更进一步，为具有固定大小的内容的窗口强制指定尺寸。", "tips": ""}, "Specify a volume size": {"zh": "指定一个立体窗口的大小", "tips": ""}, "When you create a volume, which is a window with the volumetric style, you can specify the volume’s size using one of the three-dimensional default size modifiers, like defaultSize(width:height:depth:in:). The following code creates a volume that’s one meter on a side:": {"zh": "当你创建一个立体窗口（具有 volumetric 窗口样式的窗口）时，你可以使用三维的默认尺寸修饰器（如 defaultSize(width:height:depth:in:)））。", "tips": ""}, "The volume maintains this size for its entire lifetime. People can’t change the size of a volume at runtime.": {"zh": "立体窗口将在其整个生命周期内保持此大小。用户无法在运行时更改立体窗口的大小。", "tips": ""}, "Although you can specify a volume’s size in points, it’s typically better to use physical units, like the above code which specifies a size in meters. This is because the system renders a volume with fixed scaling rather than dynamic scaling, unlike a regular window, which means the volume appears more like a physical object than a user interface. For information about the different kinds of scaling, see Spatial layout.": {"zh": "虽然你可以以“点”为单位指定立体窗口的大小，但通常最好使用物理单位，如上面的代码，它以米为单位指定大小。这是因为与常规窗口不同，系统以固定缩放而不是动态缩放的形式来呈现立体窗口，这意味着立体窗口看起来更像是物理对象，而不是用户界面。有关不同类型缩放的信息，请参阅空间布局。", "tips": ""}}
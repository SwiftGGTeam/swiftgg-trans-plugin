{"Tracking specific points in world space": {"zh": "追踪世界空间中的特定点", "tips": ""}, "Retrieve the position and orientation of anchors your app stores in ARKit.": {"zh": "检索应用在 ARKit 中存储锚点的位置和方向。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "Use world anchors along with an ARKit session’s WorldTrackingProvider to track points of interest in the world over time, as a person moves while wearing the device, and across device usage sessions. For example, someone might place a 3D object in a specific position on their desk and expect it to come back the next time they use the device.": {"zh": "将世界锚点与 ARKit 会话的 WorldTrackingProvider 结合使用，可以随着佩戴设备用户的移动，跨设备、跨会话地追踪你感兴趣的世界点。例如，用户可能会将一个 3D 物体放置在桌子的特定位置，并希望下次使用设备时它再次出现在同一位置。", "tips": ""}, "ARKit keeps track of a unique identifier for each world anchor your app creates and automatically places those anchors back in the space when the person returns to your app in the same location. A world tracking provider also provides the position of the device the person is wearing.": {"zh": "ARKit 会为应用创建的每个世界锚点收录一个唯一标识符，当用户在同一地点返回你的应用时，ARKit 会自动将这些锚点放回空间。世界追踪提供程序还会提供用户佩戴设备的位置。", "tips": ""}, "Start an ARKit session with world tracking": {"zh": "使用世界追踪启动 ARKit 会话", "tips": ""}, "Use an ARKitSession configured for world tracking to start receiving updates on the world anchors your app places. The following shows updates to world anchors your app previously registered using the addAnchor(_:) method:": {"zh": "使用为世界追踪配置过的 ARKitSession 开始接收应用放置的世界锚点的更新。下面代码展示了应用之前使用方法 addAnchor(_:) 注册的世界锚点的更新：", "tips": ""}, "Important": {"zh": "重要", "tips": ""}, "If a person repositions the current space — for example, by holding down the Digital Crown — world anchor updates begin updating their position relative to the new world origin. For example, a world anchor placed on a table still reports information about the table’s position, but those positions are relative to the updated world origin.": {"zh": "如果用户重新定位当前空间（例如按住数码表冠），世界锚点更新将开始更新其相对于新世界原点的位置。例如，放置在桌子上的世界锚点仍会报告桌子的位置信息，但这些位置是相对于更新后的世界原点的。", "tips": ""}, "Create and add world anchors": {"zh": "创建和添加世界锚点", "tips": ""}, "You can create world anchors for any point of interest in your app’s world coordinate system once you’ve started a world tracking ARKit session. For example, you might track that a person placed an item at a particular offset from a desk in their space:": {"zh": "启动世界追踪 ARKit 会话后，你可以在应用的世界坐标系中为任何感兴趣的点创建世界锚点。例如，你可能会追踪到用户将某件物品放置在空间内距桌子有特定位移的某一位置：", "tips": ""}, "Once you add a world anchor to your app’s tracking provider using the addAnchor(_:) method, the anchorUpdates sequence in the current session and future runs of your app provides updates to the current position of that new world anchor.": {"zh": "使用 addAnchor(_:) 方法将世界锚点添加到应用的追踪提供程序后，当前和未来运行的应用会话中的 anchorUpdates 序列会持续更新该新锚点的当前位置。", "tips": ""}, "Persist world anchors across sessions": {"zh": "跨会话保留世界锚点", "tips": ""}, "The only information ARKit persists about the world anchors in your app is their UUID — a WorldAnchor instance’s id property — and pose in a particular space. It’s your app’s responsibility to persist additional information, such as the meaning of each anchor. For example, you might save local data about a custom 3D lamp model that a person placed on their desk.": {"zh": "ARKit 保留的你应用中世界锚点的唯一信息是它们的 UUID（WorldAnchor 实例的 id 属性）以及在特定空间中的位置。你的应用负责保留其他信息，譬如每个锚点的含义。例如，你可以保存用户放在桌子上的自定义 3D 台灯模型的本地数据。", "tips": ""}, "As a person moves from town-to-town or room-to-room, your app won’t receive all of the world anchor updates from each place someone used your app. Instead, the anchorUpdates sequence only provides world anchors for nearby objects.": {"zh": "当用户从一个城市移动到另一个城市或从一个房间移动到另一个房间时，应用不会从被使用过的每个地方接收所有的世界锚点更新。相反， anchorUpdates 序列仅为附近的物体提供世界锚点更新。", "tips": ""}, "Track the device position in the world": {"zh": "追踪设备在世界中的位置", "tips": ""}, "Use the Compositor Services framework and the WorldTrackingProvider class’s queryDeviceAnchor(atTimestamp:) method to get low-latency information about the current and future-predicted pose of the person’s device in world space. For more information, see Drawing fully immersive content using Metal.": {"zh": "使用 Compositor Services 框架和 WorldTrackingProvider 类的 queryDeviceAnchor(atTimestamp:) 方法在空间中获取有关用户设备当前和未来预测姿势的低延迟信息。更多信息，请参阅使用 Metal 绘制完全沉浸式内容。", "tips": ""}}
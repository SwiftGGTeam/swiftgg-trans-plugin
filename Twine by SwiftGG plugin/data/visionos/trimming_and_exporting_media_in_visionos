{"Trimming and exporting media in visionOS": {"zh": "在 visionOS 中剪辑和导出媒体", "tips": ""}, "Display standard controls in your app to edit the timeline of the currently playing media.": {"zh": "在应用中显示标准控件，以编辑当前播放媒体的时间轴。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "You use AVPlayerViewController to present the system video-player interface in your visionOS app. In addition to its primary role, AVPlayerViewController can also provide a media-trimming experience similar to the interface of QuickTime Player in macOS, like that below.": {"zh": "你可以使用 AVPlayerViewController 在你的 visionOS 应用中显示系统默认的视频播放器界面。除了其主要作用外，AVPlayerViewController 还能提供类似于 macOS 中 QuickTime Player 界面的媒体剪辑体验，如下图所示。", "tips": ""}, "When you enable this feature, people can specify a segment of the media timeline for display. This article describes how to adopt this feature in your app, and shows how to use AVFoundation to export the trimmed result.": {"zh": "启用此功能后，用户可以指定显示媒体时间轴的某个片段。本文将介绍如何在应用中采用这一功能，并说明如何使用 AVFoundation 导出剪辑后的结果。", "tips": ""}, "Determine whether the media supports trimming": {"zh": "确定媒体是否支持剪辑", "tips": ""}, "Apps typically provide a user-interface element to put the player view controller into trimming mode. Because the player doesn’t support trimming certain media, such as HTTP Live Streaming or protected content, apps observe the state of the canBeginTrimming property to update the enabled state of their user interface accordingly. For example, the following code observes the state of the canBeginTrimming property and updates the state of a published property, which sets the appropriate enabled state in the UI:": {"zh": "应用通常会提供一个 UI 元素，让播放器视图控制器进入剪辑模式。由于播放器不支持剪辑某些媒体，如 HTTP 实时流媒体或受保护的内容，因此应用会观察 canBeginTrimming 属性的状态，并相应地更新用户界面的启用状态。例如，以下代码会观察 canBeginTrimming 属性的状态，并更新已发布属性的状态，从而在 UI 中设置相应的启用状态：", "tips": ""}, "Enable the trimming user interface": {"zh": "启用剪辑用户界面", "tips": ""}, "After you determine that the player view controller supports editing the current media’s timeline, call the player’s beginTrimming(completionHandler:) method to enable its trimming interface. Call this method from an asynchronous context:": {"zh": "确定播放器视图控制器支持编辑当前媒体的时间轴后，调用播放器的 beginTrimming(completionHandler:) 方法启用其剪辑界面。你需要在异步上下文中调用此方法：", "tips": ""}, "This method returns a Boolean value that indicates whether the user pinched the Done button or the Cancel button. Pinching the Done button causes the view controller to update the values of the player item’s reversePlaybackEndTime and forwardPlaybackEndTime properties to match the trimmed selection.": {"zh": "此方法返回一个布尔值，表示用户是按了 \"完成 \"按钮还是 \"取消 \"按钮。按下 \"完成 \"按钮会导致视图控制器更新播放器项目的 reversePlaybackEndTime 和 forwardPlaybackEndTime 属性值，使其与剪辑后的选区相匹配。", "tips": ""}, "Export the trimmed media selection": {"zh": "导出剪辑后的媒体选区", "tips": ""}, "A convenient way to export your trimmed selection is to use AVAssetExportSession. This object provides a simple preset-based approach to transcode media in various formats. Create an instance of an export session by passing it the player item’s asset and an export preset. Additionally, configure its output URL and file type:": {"zh": "使用 AVAssetExportSession 是导出剪辑后选区的便捷方法。该对象提供了一种基于预设的简单方法，可对各种格式的媒体进行转码。通过传入播放器项目的素材和导出预设，来创建一个导出会话的实例。此外，还要配置其输出 URL 和文件类型：", "tips": ""}, "To export only the portion of the asset that matches your trimmed selection, create a CMTimeRange based on the reverse and forward playback end times of the current player item:": {"zh": "要只导出与剪辑选区匹配的素材部分，可根据当前播放器项目的反向和正向播完时间创建一个 CMTimeRange:", "tips": ""}, "Finally, begin the export operation to begin asynchronously transcoding the media to the output URL:": {"zh": "最后，开始导出操作，将媒体异步转码到输出 URL：", "tips": ""}}
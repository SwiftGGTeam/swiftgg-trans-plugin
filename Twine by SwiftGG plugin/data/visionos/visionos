{"visionOS": {"zh": "visionOS", "tips": ""}, "Create a new universe of apps and games for Apple Vision Pro.": {"zh": "为 Apple Vision Pro 打造全新的应用和游戏世界。", "tips": ""}, "Overview": {"zh": "概览", "tips": ""}, "visionOS is the operating system that powers Apple Vision Pro. Use visionOS together with familiar tools and technologies to build immersive apps and games for spatial computing.": {"zh": "visionOS 是为 Apple Vision Pro 提供支持的操作系统。将 visionOS 与熟悉的工具和技术结合使用，可为空间计算打造沉浸式的应用和游戏。", "tips": ""}, "Developing for visionOS requires a Mac with Apple silicon. Create new apps using SwiftUI to take full advantage of the spectrum of immersion available in visionOS. If you have an existing iPad or iPhone app, add the visionOS destination to your app’s target to gain access to the standard system appearance, and add platform-specific features to create a compelling experience. To provide continuous access to your content in the meantime, deliver a compatible version of your app that runs in visionOS.": {"zh": "为 visionOS 开发需要一台配备了苹果芯片的 Mac。使用 SwiftUI 创建新应用，从而充分利用 visionOS 提供的各种沉浸式体验。如果你已有 iPad 或 iPhone 应用，可将 visionOS 终端添加到应用的目标中以访问标准系统外观，并添加平台特定的功能以创建引人入胜的体验。同时为了用户能够无间断地访问你的内容，请提供能在 visionOS 中运行的兼容版本应用。", "tips": ""}, "Expand your app into immersive spaces": {"zh": "将应用扩展到沉浸式空间", "tips": ""}, "Start with a familiar window-based experience to introduce people to your content. From there, add SwiftUI scene types specific to visionOS, such as volumes and spaces. These scene types let you incorporate depth, 3D objects, and immersive experiences.": {"zh": "从熟悉的窗口式体验开始，引导用户了解你的内容。在此基础上，添加 visionOS 特有的 SwiftUI 场景类型，如体量和空间。这些场景类型可让你呈现深度、3D 物体和沉浸式的体验。", "tips": ""}, "Build your app’s 3D content with RealityKit and Reality Composer Pro, and display it with a RealityView. In an immersive experience, use ARKit to integrate your content with the person’s surroundings.": {"zh": "使用 RealityKit 和 Reality Composer Pro 构建应用中的 3D 内容，并通过 RealityView 呈现它们。在沉浸式体验中，使用 ARKit 将应用内容与用户周围环境整合在一起。", "tips": ""}, "Explore new kinds of interaction": {"zh": "探索新型交互方式", "tips": ""}, "People can select an element by looking at it and tapping their fingers together. They can also pinch, drag, zoom, and rotate objects using specific hand gestures. SwiftUI provides built-in support for these standard gestures, so rely on them for most of your app’s input. When you want to go beyond the standard gestures, use ARKit to create custom gestures.": {"zh": "用户可以通过注视某个元素并轻点手指来选择该元素。他们还可以使用特定的手势来捏合、拖动、缩放和旋转对象。SwiftUI 提供了对这些标准手势的内置支持，因此你的应用的大部分输入都可以依靠它们。如果你想使用标准手势之外的手势，请使用 ARKit 创建自定义手势。", "tips": ""}, "Dive into featured sample apps": {"zh": "深入了解精选示例应用", "tips": ""}, "Explore the core concepts for all visionOS apps with Hello World. Understand how to detect custom gestures using ARKit with Happy Beam. Discover streaming 2D and stereoscopic media with Destination Video. And learn how to build 3D scenes with RealityKit and Reality Composer Pro with Diorama and Swift Splash.": {"zh": "通过“你好，世界”探索所有 visionOS 应用共通的核心概念。通过“快乐光束”了解如何使用 ARKit 检测自定义手势。通过“目的地视频”探索演示 2D 和立体媒体。通过“西洋镜”和“迅捷飞溅”学习如何使用 RealityKit 和 Reality Composer Pro 构建 3D 场景。", "tips": ""}}
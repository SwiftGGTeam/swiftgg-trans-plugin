{"Hello World": {"zh": "你好，世界 （Hello World）", "tips": ""}, "Use windows, volumes, and immersive spaces to teach people about the Earth.": {"zh": "使用窗口、体量和沉浸式空间让用户了解地球。", "tips": ""}, "Overview": {"zh": "概述", "tips": ""}, "You can use visionOS scene types and styles to share information in fun and compelling ways. Features like volumes and immersive spaces let you put interactive virtual objects into people’s environments, or put people into a virtual environment.": {"zh": "您可以使用 visionOS 场景类型和样式，以有趣且引人入胜的方式传达信息。体量和沉浸式空间等功能可以让你将可交互的虚拟物体放入用户的环境中，或反之将用户置于虚拟环境中。", "tips": ""}, "Hello World uses these tools to teach people about the Earth — the planet we call home. The app shows how the Earth’s tilt creates the seasons, how objects move as they orbit the Earth, and how Earth appears from space.": {"zh": "Hello World 使用了这些工具向用户介绍地球--这个我们称之为家的星球。该应用程序展示了地球的倾斜角如何形成季节，物体如何围绕地球运行，以及地球在太空中的样子。", "tips": ""}, "The app uses SwiftUI to define its interface, including both 2D and 3D elements. To create, customize, and manage 3D models and effects, it also relies on the RealityKit framework and Reality Composer Pro.": {"zh": "该应用程序使用 SwiftUI 来制作其用户界面，其中包含了 2D 和 3D 元素。为了创建、自定义和管理 3D 模型和效果，它还依赖于 RealityKit 框架和 Reality Composer Pro。", "tips": ""}, "Create an entry point into the app": {"zh": "创建应用的入口", "tips": ""}, "Hello World constructs the scene that it displays at launch — the first scene that appears in the WorldApp structure — using a WindowGroup:": {"zh": "Hello World 使用了 WindowGroup 来构建启动时显示的场景（WorldApp 结构体中出现的第一个场景）：", "tips": ""}, "Like other platforms — for example, macOS and iOS — visionOS displays a window group as a familiar-looking window. In visionOS, people can resize and move windows around the Shared Space. Even if your app offers a sophisticated 3D experience, a window is a great starting point for an app because it eases people into the experience. It’s also a good place to provide instructions or controls.": {"zh": "与其他平台（如 macOS 和 iOS）一样，visionOS 将窗口组显示为用户熟悉的窗口。在 visionOS 中，用户可以在共享空间中调整窗口大小并移动窗口。即使你的应用提供了复杂的 3D 体验，窗口也是应用的一个很好的起点，因为它可以让用户由浅入深地顺利进入体验。同时窗口也是提供说明或放置控件的理想位置。", "tips": ""}, "Tip": {"zh": "提示", "tips": ""}, "This particular window group uses the plain window style to maintain control over the glass background effect that visionOS would otherwise automatically add.": {"zh": "此窗口组使用了 plain 窗口样式以保持控件悬浮在毛玻璃背景上的效果。即使没有此行代码 visionOS 也会自动添加毛玻璃背景效果。", "tips": ""}, "Present different modules using a navigation stack": {"zh": "使用导航栈展示不同的模块", "tips": ""}, "After you watch a brief introductory animation that shows the text Hello World typing in, the Modules view that defines the primary scene’s content presents options to explore different aspects of the world. This view contains a table of contents at the root of a NavigationStack:": {"zh": "在观看键入文本 Hello World 的简短介绍动画后，定义主场景内容的 Modules 视图会显示多种探索世界的选项。此视图包含了一个导航栈 （NavigationStack），导航栈的根视图是一个目录：", "tips": ""}, "A visionOS navigation stack has the same behavior that it has in other platforms. When it first appears, the stack displays its root view. When someone chooses an embedded NavigationLink, the stack draws a new view and displays a back button in the toolbar. When someone taps the back button, the stack restores the previous view.": {"zh": "visionOS 导航栈与其他平台的导航栈具有相同的行为。当它首次出现时，导航栈会显示其根视图。当用户点击内嵌的导航链接 （NavigationLink） 时，导航栈会绘制一个新视图并在工具栏中显示一个后退按钮。当用户点击后退按钮时，导航堆将恢复上一个视图。", "tips": ""}, "The trailing closure of the navigationDestination(for:destination:) view modifier in the code above displays a view when someone activates a link based on a module input that comes from the corresponding link’s initializer:": {"zh": "上面代码中的 navigationDestination(for:destination:) 视图修饰符的尾部闭包，会根据链接初始化时传入的模块，在用户激活链接时显示相应的视图：", "tips": ""}, "The possible module values come from a custom Module enumeration:": {"zh": "可选的模块值来源于自定义的 Module 枚举：", "tips": ""}, "Display an interactive globe in a new scene": {"zh": "在新场景中显示可交互的地球仪", "tips": ""}, "The globe module opens with a few facts about the Earth in the main window next to a decorative, flat image that supports the content. To help people understand even more, the module includes a button titled View Globe that opens a 3D interactive globe in a new window.": {"zh": "当地球仪（globe）模块打开时，主窗口中会显示一些有关地球的知识，旁边装饰着一个解释内容的平面图像。为了帮助用户更好地理解模块内容，该模块包含了一个名为“View Globe”的按钮，该按钮可在新窗口中打开一个三维交互式的地球仪。", "tips": ""}, "To be able to open multiple scene types, Hello World includes the UIApplicationSceneManifest key in its Information Property List file. The value for this key is a dictionary that includes the UIApplicationSupportsMultipleScenes key with a value of true:": {"zh": "为了能够打开多种场景类型，Hello World 在其 Information Property List 文件中包含了 UIApplicationSceneManifest 键。该键的值是一个字典，其中包含了 UIApplicationSupportsMultipleScenes 键，且其值为：true", "tips": ""}, "Declare a volumetric window for the globe": {"zh": "为地球仪定义一个三维窗口", "tips": ""}, "With the key in place, the app makes use of a second WindowGroup in its App declaration. This new window group uses the Globe view as its content:": {"zh": "在上述键值就位后，应用程序就可以在其 App 声明中使用第二个 WindowGroup 了。这个新窗口组使用视图 Globe 作为其内容：", "tips": ""}, "This window group creates a window that has arbitrary depth — great for displaying a 3D model in a bounded region that behaves like a transparent box — because Hello World uses the volumetric window style scene modifier. People can move this box around the Shared Space like any other window, and the content remains fixed inside. The defaultSize(width:height:depth:in:) modifier specifies a size for the window in meters, including a depth dimension.": {"zh": "由于 Hello World 使用了三维 （volumetric） 窗口样式场景修饰符，因此该窗口组创建了一个可自定义深度的窗口--非常适合在有边界的区域中显示三维模型，其行为就像一个透明的盒子。用户可以像移动任何其他窗口一样在共享空间中移动这个盒子，而里面的内容则保持不变。defaultSize(width:height:depth:in:) 修饰符用来指定窗口的（包含深度的）大小（以米为单位）。", "tips": ""}, "The Globe view contains 3D content, but is still just a SwiftUI view. It contains two elements in a ZStack: a subview that draws a model of the Earth, and another that provides a control panel that people can use to configure the model’s appearance.": {"zh": "该 Globe 视图虽然包含了 3D 内容，但其本身仍然只是一个 SwiftUI 视图。它的 ZStack 中包含了两个元素：一个绘制地球模型的子视图，另一个子视图负责提供控制面板，用户可以使用它来配置地球仪的外观。", "tips": ""}, "Open and dismiss the globe window": {"zh": "打开和关闭地球仪窗口", "tips": ""}, "The globe module presents a View Globe button that people can tap to display the volumetric window or dismiss the window, depending on the current state. Hello World achieves this behavior by creating a Toggle with the button style, and embedding it in a custom GlobeToggle view.": {"zh": "地球仪模块显示了一个 View Globe 按钮。当用户点击该按钮后，系统会根据当前状态来显示三维窗口或关闭窗口。Hello World 通过创建一个按钮样式的 Toggle，并将其嵌入到自定义 GlobeToggle 视图中来实现这一功能。", "tips": ""}, "When someone taps the toggle, the isShowingGlobe state changes, and the onChange(of:initial:_:) modifier calls the openWindow or dismissWindow action to open or dismiss the window, respectively. The view gets these actions from the environment and uses an identifier that matches the window’s identifier.": {"zh": "当用户点击切换按钮时，isShowingGlobe 状态会发生变化， 且 onChange(of:initial:_:) 修饰符会分别调用 openWindow 或 dismissWindow 操作来打开或关闭窗口。视图从环境变量中获取这些操作，并使用对应的窗口标识符来运行操作。", "tips": ""}, "Display objects that orbit the Earth": {"zh": "显示绕地球运行的物体", "tips": ""}, "You use windows in visionOS the same way you do in other platforms. But windows in visionOS provide a small amount of depth you can use to create 3D effects — like elements that appear in front of other elements. Hello World takes advantage of this depth to present small models inline with 2D content.": {"zh": "在 visionOS 中使用窗口的方式与其他平台相同。但是，visionOS 中的窗口提供了可用于创建 3D 效果的少量深度--比如显示在其他元素前方的元素。Hello World 利用这种深度来在 2D 内容的行间展示小的 3D 模型。", "tips": ""}, "The app’s second module, Objects in Orbit, provides information about objects that go around the Earth, like the Moon and artificial satellites. To give a sense of what these objects look like, the module displays 3D models of these items directly inside the window.": {"zh": "应用的第二个模块，“轨道上的物体”（Objects in Orbit）提供了月球和人造卫星等绕地球飞行的物体的信息。为了让用户了解这些对象的外观，该模块直接在窗口内显示这些对象的 3D 模型。", "tips": ""}, "Hello World loads these models from the asset bundle using a Model3D structure inside a custom ItemView. The view scales and positions the model to fit the available space, and applies optional orientation adjustments:": {"zh": "Hello World 在自定义的 ItemView 中使用 Model3D 结构体从资源包里加载这些模型。视图会根据可用空间对模型进行缩放和定位，并视情况调整角度：", "tips": ""}, "The app uses this ItemView once for each model, placing each in an overlay that only becomes visible based on the current selection. For example, the following overlay displays the satellite model with a small amount of tilt in the x-axis and z-axis:": {"zh": "该应用为每个模型都创建了上述的 ItemView，并将它们放在一个叠加层中， 且只有当前被选中的模型会显示出来。例如，下述的叠加层显示了一个在 x 轴和 z 轴上有稍微倾斜卫星模型：", "tips": ""}, "The VStack that contains the models also contains a Picker that people use to select a model to view:": {"zh": "包含上述模型的 VStack 中还包含了一个 Picker，用来选择查看的模型：", "tips": ""}, "When you add 3D effects to a 2D window, keep this guidance in mind:": {"zh": "当你向 2D 窗口添加 3D 效果时，请牢记以下几点：", "tips": ""}, "Don’t overdo it. These kinds of effects add interest, but can unintentionally obscure important controls or information as people view the window from different directions.": {"zh": "不要过度使用。这种类型的效果虽然增加了趣味性，但当用户从不同方向查看窗口时，这些效果有可能会无意中遮挡重要控件或信息。", "tips": ""}, "Ensure that elements don’t exceed the available depth. Excess depth causes elements to clip. Account for any position or orientation changes that might occur after initial placement.": {"zh": "确保元素不超出可用深度。过大的深度会导致元素被剪切。要考虑到初始放置后可能发生的位置或角度变化。", "tips": ""}, "Avoid models intersecting with the backing glass. Again, account for potential movement after initial placement.": {"zh": "避免模型与玻璃背景相交。再次强调，请考虑初始放置物体后可能发生的移动。", "tips": ""}, "Show Earth’s relationship to its satellites in an immersive space": {"zh": "在沉浸式空间中展示地球与其卫星的关系", "tips": ""}, "People can visualize how satellites move around the Earth because the app’s orbit module displays the Earth, the Moon, and a communications satellite together as a single system. People can move the system anywhere in their environment or resize it using standard gestures. They can also move themselves around the system to get different perspectives.": {"zh": "用户可以直观地看到卫星是如何围绕地球运动的，因为应用的轨道模块将地球、月球和一个通信卫星显示在同一个系统里。用户可以将该系统拖动到环境中的任何位置，或使用标准手势调整其大小。用户自己也可以在系统移动以获得不同的视角。", "tips": ""}, "Note": {"zh": "备注", "tips": ""}, "To learn about designing with gestures in visionOS, read Gestures in Human Interface Guidelines.": {"zh": "想了解如何在 visionOS 中使用手势进行设计，请阅读《用户界面指南》中的手势章节。", "tips": ""}, "To create this visualization, the app displays the Orbit view — which contains a single RealityView that models the entire system — in an ImmersiveSpace scene with the mixed immersion style:": {"zh": "为创建这一效果，应用在 mix 沉浸风格的 ImmersiveSpace 场景中展示了 Orbit 视图--其中包含了一个模拟整套系统的 RealityView：", "tips": ""}, "As with any secondary scene in a visionOS app, this scene depends on having the UIApplicationSupportsMultipleScenes key in the Information Property List file. The app also opens and closes the space using a toggle view that resembles the one used for the globe:": {"zh": "与 visionOS 应用中的所有辅助场景一样，此场景依赖于 Information Property List file 文件中的 UIApplicationSupportsMultipleScenes 键。同时，应用还使用了与地球仪模组中类似的开关按钮来打开和关闭空间：", "tips": ""}, "There are a few key differences from the version that appears in the section Open and dismiss the globe window:": {"zh": "这里与“打开和关闭地球仪窗口”一节中的版本有几个主要区别：", "tips": ""}, "OrbitToggle uses openImmersiveSpace and dismissImmersiveSpace from the environment, rather than the window equivalents.": {"zh": "OrbitToggle 使用了环境变量中的 openImmersiveSpace 和 dismissImmersiveSpace 沉浸式空间操作，而不是窗口操作。", "tips": ""}, "The dismiss action in this case doesn’t require an identifier, because people can only open one space at a time, even across apps.": {"zh": "这时关闭操作不需要标识符，因为用户一次只能打开一个沉浸式空间，即使切换应用也是如此。", "tips": ""}, "The open and dismiss actions for spaces operate asynchronously, and so they appear inside a Task.": {"zh": "打开和关闭空间操作是异步的，因此它们的使用出现在 Task 闭包中。", "tips": ""}, "View the solar system from space using full immersion": {"zh": "使用完全沉浸式从太空观察太阳系", "tips": ""}, "The app’s final module gives people a sense of the Earth’s place in the solar system. Like other modules, this one includes information and a decorative image next to a button that leads to another visualization — in this case so people can experience Earth from space.": {"zh": "应用的最后一个模块意在帮助用户了解地球在太阳系中的位置。与其他模块一样，这个模块包括了说明、装饰图像、及一个指向另一个场景的按钮--在本模块的场景中，用户可以从太空中观察地球。", "tips": ""}, "When a person taps the button, the app takes over the entire display and shows stars in all directions. The Earth appears directly in front, the Moon to the right, and the Sun to the left. The main window also shows a small control panel that people can use to exit the fully immersive experience.": {"zh": "当用户点击按钮后，应用将接管整个显示屏，并在各个方位显示星星。地球出现在正前方，月球在右侧，太阳在左侧。主窗口还显示了一个小型控制面板，用户可以用它来退出完全沉浸式体验。", "tips": ""}, "People can exit full immersion by pressing the device’s Digital Crown, but it’s typically useful when you provide a built-in mechanism to maintain control of the experience within your app.": {"zh": "用户可以按下设备的数码表冠来退出完全沉浸式体验，但通常情况下，在应用程序中提供一个内置机制来控制体验是非常有帮助的。", "tips": ""}, "The app uses another immersive space scene for this module, but here with the full immersion style that turns off the passthrough video:": {"zh": "本模块使用了另一个沉浸式空间场景，但此处使用的是 full 沉浸风格，它会关闭设备的现实映射功能：", "tips": ""}, "This scene depends on the same UIApplicationSupportsMultipleScenes key that other secondary scenes do, and is activated by a SolarSystemToggle that’s similar to the ones that the app uses for the other scenes:": {"zh": "与其他辅助场景相同，此场景也依赖于的 UIApplicationSupportsMultipleScenes 键，并由与其他场景中用的开关类似的 SolarSystemToggle 激活：", "tips": ""}, "This control appears in the main window to provide a way to begin the fully immersive experience, and separately in the control panel as a way to exit the experience. Because the app uses this control as two distinct buttons rather than as a toggle in one location, it’s composed of a Button with behavior that changes depending on the app state rather than as a toggle with a button style.": {"zh": "此控件显示在主窗口中，以提供进入完全沉浸式体验的入口，同时又单独显示在控制面板中，作为退出体验的一种方式。由于应用在不同的两个位置将此控件用作按钮，而不是一个位置不变的开关，因此它是由一个根据应用状态而改变行为的 Button 构成的，而不是使用了按钮样式的 Toggle。", "tips": ""}, "To reuse the main window for the solar system controls, Hello World places both the navigation stack and the controls in a ZStack, and then sets the opacity of each to ensure that only one appears at a time:": {"zh": "为了能在太阳系模块的控件中复用主窗口，Hello World 将导航栈和控件放在了一个 ZStack 中，然后通过设置每个控件的不透明度，确保每次只显示一个视图：", "tips": ""}}